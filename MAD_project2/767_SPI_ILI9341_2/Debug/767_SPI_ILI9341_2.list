
767_SPI_ILI9341_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae48  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f8  0800b048  0800b048  0001b048  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b740  0800b740  000205ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800b740  0800b740  0001b740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b748  0800b748  000205ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b748  0800b748  0001b748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b74c  0800b74c  0001b74c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005ec  20000000  0800b750  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000053c  200005ec  0800bd3c  000205ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b28  0800bd3c  00020b28  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000205ec  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002061a  2**0
                  CONTENTS, READONLY
 13 .debug_info   000186e5  00000000  00000000  0002065d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c3f  00000000  00000000  00038d42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001478  00000000  00000000  0003c988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fdd  00000000  00000000  0003de00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002bd48  00000000  00000000  0003eddd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c9d7  00000000  00000000  0006ab25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00106835  00000000  00000000  000874fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000634c  00000000  00000000  0018dd34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  00194080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200005ec 	.word	0x200005ec
 800021c:	00000000 	.word	0x00000000
 8000220:	0800b030 	.word	0x0800b030

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200005f0 	.word	0x200005f0
 800023c:	0800b030 	.word	0x0800b030

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005f2:	463b      	mov	r3, r7
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005fe:	4b21      	ldr	r3, [pc, #132]	; (8000684 <MX_ADC1_Init+0x98>)
 8000600:	4a21      	ldr	r2, [pc, #132]	; (8000688 <MX_ADC1_Init+0x9c>)
 8000602:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000604:	4b1f      	ldr	r3, [pc, #124]	; (8000684 <MX_ADC1_Init+0x98>)
 8000606:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800060a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800060c:	4b1d      	ldr	r3, [pc, #116]	; (8000684 <MX_ADC1_Init+0x98>)
 800060e:	2200      	movs	r2, #0
 8000610:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000612:	4b1c      	ldr	r3, [pc, #112]	; (8000684 <MX_ADC1_Init+0x98>)
 8000614:	2200      	movs	r2, #0
 8000616:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000618:	4b1a      	ldr	r3, [pc, #104]	; (8000684 <MX_ADC1_Init+0x98>)
 800061a:	2201      	movs	r2, #1
 800061c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800061e:	4b19      	ldr	r3, [pc, #100]	; (8000684 <MX_ADC1_Init+0x98>)
 8000620:	2200      	movs	r2, #0
 8000622:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000626:	4b17      	ldr	r3, [pc, #92]	; (8000684 <MX_ADC1_Init+0x98>)
 8000628:	2200      	movs	r2, #0
 800062a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800062c:	4b15      	ldr	r3, [pc, #84]	; (8000684 <MX_ADC1_Init+0x98>)
 800062e:	4a17      	ldr	r2, [pc, #92]	; (800068c <MX_ADC1_Init+0xa0>)
 8000630:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000632:	4b14      	ldr	r3, [pc, #80]	; (8000684 <MX_ADC1_Init+0x98>)
 8000634:	2200      	movs	r2, #0
 8000636:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000638:	4b12      	ldr	r3, [pc, #72]	; (8000684 <MX_ADC1_Init+0x98>)
 800063a:	2201      	movs	r2, #1
 800063c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800063e:	4b11      	ldr	r3, [pc, #68]	; (8000684 <MX_ADC1_Init+0x98>)
 8000640:	2200      	movs	r2, #0
 8000642:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000646:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <MX_ADC1_Init+0x98>)
 8000648:	2200      	movs	r2, #0
 800064a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800064c:	480d      	ldr	r0, [pc, #52]	; (8000684 <MX_ADC1_Init+0x98>)
 800064e:	f003 f82f 	bl	80036b0 <HAL_ADC_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000658:	f001 fc1c 	bl	8001e94 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800065c:	230a      	movs	r3, #10
 800065e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000660:	2301      	movs	r3, #1
 8000662:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000664:	2300      	movs	r3, #0
 8000666:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000668:	463b      	mov	r3, r7
 800066a:	4619      	mov	r1, r3
 800066c:	4805      	ldr	r0, [pc, #20]	; (8000684 <MX_ADC1_Init+0x98>)
 800066e:	f003 f93f 	bl	80038f0 <HAL_ADC_ConfigChannel>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000678:	f001 fc0c 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800067c:	bf00      	nop
 800067e:	3710      	adds	r7, #16
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000608 	.word	0x20000608
 8000688:	40012000 	.word	0x40012000
 800068c:	0f000001 	.word	0x0f000001

08000690 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000696:	463b      	mov	r3, r7
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80006a2:	4b21      	ldr	r3, [pc, #132]	; (8000728 <MX_ADC2_Init+0x98>)
 80006a4:	4a21      	ldr	r2, [pc, #132]	; (800072c <MX_ADC2_Init+0x9c>)
 80006a6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006a8:	4b1f      	ldr	r3, [pc, #124]	; (8000728 <MX_ADC2_Init+0x98>)
 80006aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006ae:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006b0:	4b1d      	ldr	r3, [pc, #116]	; (8000728 <MX_ADC2_Init+0x98>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006b6:	4b1c      	ldr	r3, [pc, #112]	; (8000728 <MX_ADC2_Init+0x98>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80006bc:	4b1a      	ldr	r3, [pc, #104]	; (8000728 <MX_ADC2_Init+0x98>)
 80006be:	2201      	movs	r2, #1
 80006c0:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80006c2:	4b19      	ldr	r3, [pc, #100]	; (8000728 <MX_ADC2_Init+0x98>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006ca:	4b17      	ldr	r3, [pc, #92]	; (8000728 <MX_ADC2_Init+0x98>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006d0:	4b15      	ldr	r3, [pc, #84]	; (8000728 <MX_ADC2_Init+0x98>)
 80006d2:	4a17      	ldr	r2, [pc, #92]	; (8000730 <MX_ADC2_Init+0xa0>)
 80006d4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006d6:	4b14      	ldr	r3, [pc, #80]	; (8000728 <MX_ADC2_Init+0x98>)
 80006d8:	2200      	movs	r2, #0
 80006da:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <MX_ADC2_Init+0x98>)
 80006de:	2201      	movs	r2, #1
 80006e0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80006e2:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_ADC2_Init+0x98>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80006ea:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <MX_ADC2_Init+0x98>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80006f0:	480d      	ldr	r0, [pc, #52]	; (8000728 <MX_ADC2_Init+0x98>)
 80006f2:	f002 ffdd 	bl	80036b0 <HAL_ADC_Init>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80006fc:	f001 fbca 	bl	8001e94 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000700:	230d      	movs	r3, #13
 8000702:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000704:	2301      	movs	r3, #1
 8000706:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000708:	2300      	movs	r3, #0
 800070a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800070c:	463b      	mov	r3, r7
 800070e:	4619      	mov	r1, r3
 8000710:	4805      	ldr	r0, [pc, #20]	; (8000728 <MX_ADC2_Init+0x98>)
 8000712:	f003 f8ed 	bl	80038f0 <HAL_ADC_ConfigChannel>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800071c:	f001 fbba 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000720:	bf00      	nop
 8000722:	3710      	adds	r7, #16
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20000650 	.word	0x20000650
 800072c:	40012100 	.word	0x40012100
 8000730:	0f000001 	.word	0x0f000001

08000734 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08c      	sub	sp, #48	; 0x30
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073c:	f107 031c 	add.w	r3, r7, #28
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
 800074a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a41      	ldr	r2, [pc, #260]	; (8000858 <HAL_ADC_MspInit+0x124>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d153      	bne.n	80007fe <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000756:	4b41      	ldr	r3, [pc, #260]	; (800085c <HAL_ADC_MspInit+0x128>)
 8000758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800075a:	4a40      	ldr	r2, [pc, #256]	; (800085c <HAL_ADC_MspInit+0x128>)
 800075c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000760:	6453      	str	r3, [r2, #68]	; 0x44
 8000762:	4b3e      	ldr	r3, [pc, #248]	; (800085c <HAL_ADC_MspInit+0x128>)
 8000764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800076a:	61bb      	str	r3, [r7, #24]
 800076c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800076e:	4b3b      	ldr	r3, [pc, #236]	; (800085c <HAL_ADC_MspInit+0x128>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a3a      	ldr	r2, [pc, #232]	; (800085c <HAL_ADC_MspInit+0x128>)
 8000774:	f043 0304 	orr.w	r3, r3, #4
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b38      	ldr	r3, [pc, #224]	; (800085c <HAL_ADC_MspInit+0x128>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0304 	and.w	r3, r3, #4
 8000782:	617b      	str	r3, [r7, #20]
 8000784:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000786:	2301      	movs	r3, #1
 8000788:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800078a:	2303      	movs	r3, #3
 800078c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	4619      	mov	r1, r3
 8000798:	4831      	ldr	r0, [pc, #196]	; (8000860 <HAL_ADC_MspInit+0x12c>)
 800079a:	f003 ffa1 	bl	80046e0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800079e:	4b31      	ldr	r3, [pc, #196]	; (8000864 <HAL_ADC_MspInit+0x130>)
 80007a0:	4a31      	ldr	r2, [pc, #196]	; (8000868 <HAL_ADC_MspInit+0x134>)
 80007a2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80007a4:	4b2f      	ldr	r3, [pc, #188]	; (8000864 <HAL_ADC_MspInit+0x130>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007aa:	4b2e      	ldr	r3, [pc, #184]	; (8000864 <HAL_ADC_MspInit+0x130>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007b0:	4b2c      	ldr	r3, [pc, #176]	; (8000864 <HAL_ADC_MspInit+0x130>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80007b6:	4b2b      	ldr	r3, [pc, #172]	; (8000864 <HAL_ADC_MspInit+0x130>)
 80007b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007bc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007be:	4b29      	ldr	r3, [pc, #164]	; (8000864 <HAL_ADC_MspInit+0x130>)
 80007c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80007c4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007c6:	4b27      	ldr	r3, [pc, #156]	; (8000864 <HAL_ADC_MspInit+0x130>)
 80007c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007cc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80007ce:	4b25      	ldr	r3, [pc, #148]	; (8000864 <HAL_ADC_MspInit+0x130>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80007d4:	4b23      	ldr	r3, [pc, #140]	; (8000864 <HAL_ADC_MspInit+0x130>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80007da:	4b22      	ldr	r3, [pc, #136]	; (8000864 <HAL_ADC_MspInit+0x130>)
 80007dc:	2200      	movs	r2, #0
 80007de:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80007e0:	4820      	ldr	r0, [pc, #128]	; (8000864 <HAL_ADC_MspInit+0x130>)
 80007e2:	f003 fc01 	bl	8003fe8 <HAL_DMA_Init>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 80007ec:	f001 fb52 	bl	8001e94 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	4a1c      	ldr	r2, [pc, #112]	; (8000864 <HAL_ADC_MspInit+0x130>)
 80007f4:	639a      	str	r2, [r3, #56]	; 0x38
 80007f6:	4a1b      	ldr	r2, [pc, #108]	; (8000864 <HAL_ADC_MspInit+0x130>)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80007fc:	e028      	b.n	8000850 <HAL_ADC_MspInit+0x11c>
  else if(adcHandle->Instance==ADC2)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a1a      	ldr	r2, [pc, #104]	; (800086c <HAL_ADC_MspInit+0x138>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d123      	bne.n	8000850 <HAL_ADC_MspInit+0x11c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000808:	4b14      	ldr	r3, [pc, #80]	; (800085c <HAL_ADC_MspInit+0x128>)
 800080a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080c:	4a13      	ldr	r2, [pc, #76]	; (800085c <HAL_ADC_MspInit+0x128>)
 800080e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000812:	6453      	str	r3, [r2, #68]	; 0x44
 8000814:	4b11      	ldr	r3, [pc, #68]	; (800085c <HAL_ADC_MspInit+0x128>)
 8000816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000818:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800081c:	613b      	str	r3, [r7, #16]
 800081e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000820:	4b0e      	ldr	r3, [pc, #56]	; (800085c <HAL_ADC_MspInit+0x128>)
 8000822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000824:	4a0d      	ldr	r2, [pc, #52]	; (800085c <HAL_ADC_MspInit+0x128>)
 8000826:	f043 0304 	orr.w	r3, r3, #4
 800082a:	6313      	str	r3, [r2, #48]	; 0x30
 800082c:	4b0b      	ldr	r3, [pc, #44]	; (800085c <HAL_ADC_MspInit+0x128>)
 800082e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000830:	f003 0304 	and.w	r3, r3, #4
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000838:	2308      	movs	r3, #8
 800083a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800083c:	2303      	movs	r3, #3
 800083e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000844:	f107 031c 	add.w	r3, r7, #28
 8000848:	4619      	mov	r1, r3
 800084a:	4805      	ldr	r0, [pc, #20]	; (8000860 <HAL_ADC_MspInit+0x12c>)
 800084c:	f003 ff48 	bl	80046e0 <HAL_GPIO_Init>
}
 8000850:	bf00      	nop
 8000852:	3730      	adds	r7, #48	; 0x30
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40012000 	.word	0x40012000
 800085c:	40023800 	.word	0x40023800
 8000860:	40020800 	.word	0x40020800
 8000864:	20000698 	.word	0x20000698
 8000868:	40026410 	.word	0x40026410
 800086c:	40012100 	.word	0x40012100

08000870 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000876:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <MX_DMA_Init+0x38>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a0b      	ldr	r2, [pc, #44]	; (80008a8 <MX_DMA_Init+0x38>)
 800087c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <MX_DMA_Init+0x38>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	2100      	movs	r1, #0
 8000892:	2038      	movs	r0, #56	; 0x38
 8000894:	f003 fb6d 	bl	8003f72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000898:	2038      	movs	r0, #56	; 0x38
 800089a:	f003 fb86 	bl	8003faa <HAL_NVIC_EnableIRQ>

}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40023800 	.word	0x40023800

080008ac <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08e      	sub	sp, #56	; 0x38
 80008b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]
 80008c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008c2:	4ba5      	ldr	r3, [pc, #660]	; (8000b58 <MX_GPIO_Init+0x2ac>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4aa4      	ldr	r2, [pc, #656]	; (8000b58 <MX_GPIO_Init+0x2ac>)
 80008c8:	f043 0310 	orr.w	r3, r3, #16
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4ba2      	ldr	r3, [pc, #648]	; (8000b58 <MX_GPIO_Init+0x2ac>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0310 	and.w	r3, r3, #16
 80008d6:	623b      	str	r3, [r7, #32]
 80008d8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008da:	4b9f      	ldr	r3, [pc, #636]	; (8000b58 <MX_GPIO_Init+0x2ac>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a9e      	ldr	r2, [pc, #632]	; (8000b58 <MX_GPIO_Init+0x2ac>)
 80008e0:	f043 0304 	orr.w	r3, r3, #4
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b9c      	ldr	r3, [pc, #624]	; (8000b58 <MX_GPIO_Init+0x2ac>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0304 	and.w	r3, r3, #4
 80008ee:	61fb      	str	r3, [r7, #28]
 80008f0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008f2:	4b99      	ldr	r3, [pc, #612]	; (8000b58 <MX_GPIO_Init+0x2ac>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a98      	ldr	r2, [pc, #608]	; (8000b58 <MX_GPIO_Init+0x2ac>)
 80008f8:	f043 0320 	orr.w	r3, r3, #32
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b96      	ldr	r3, [pc, #600]	; (8000b58 <MX_GPIO_Init+0x2ac>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0320 	and.w	r3, r3, #32
 8000906:	61bb      	str	r3, [r7, #24]
 8000908:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800090a:	4b93      	ldr	r3, [pc, #588]	; (8000b58 <MX_GPIO_Init+0x2ac>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a92      	ldr	r2, [pc, #584]	; (8000b58 <MX_GPIO_Init+0x2ac>)
 8000910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b90      	ldr	r3, [pc, #576]	; (8000b58 <MX_GPIO_Init+0x2ac>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800091e:	617b      	str	r3, [r7, #20]
 8000920:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	4b8d      	ldr	r3, [pc, #564]	; (8000b58 <MX_GPIO_Init+0x2ac>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a8c      	ldr	r2, [pc, #560]	; (8000b58 <MX_GPIO_Init+0x2ac>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b8a      	ldr	r3, [pc, #552]	; (8000b58 <MX_GPIO_Init+0x2ac>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	613b      	str	r3, [r7, #16]
 8000938:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093a:	4b87      	ldr	r3, [pc, #540]	; (8000b58 <MX_GPIO_Init+0x2ac>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a86      	ldr	r2, [pc, #536]	; (8000b58 <MX_GPIO_Init+0x2ac>)
 8000940:	f043 0302 	orr.w	r3, r3, #2
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b84      	ldr	r3, [pc, #528]	; (8000b58 <MX_GPIO_Init+0x2ac>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0302 	and.w	r3, r3, #2
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000952:	4b81      	ldr	r3, [pc, #516]	; (8000b58 <MX_GPIO_Init+0x2ac>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a80      	ldr	r2, [pc, #512]	; (8000b58 <MX_GPIO_Init+0x2ac>)
 8000958:	f043 0308 	orr.w	r3, r3, #8
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b7e      	ldr	r3, [pc, #504]	; (8000b58 <MX_GPIO_Init+0x2ac>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0308 	and.w	r3, r3, #8
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800096a:	4b7b      	ldr	r3, [pc, #492]	; (8000b58 <MX_GPIO_Init+0x2ac>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a7a      	ldr	r2, [pc, #488]	; (8000b58 <MX_GPIO_Init+0x2ac>)
 8000970:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b78      	ldr	r3, [pc, #480]	; (8000b58 <MX_GPIO_Init+0x2ac>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	2168      	movs	r1, #104	; 0x68
 8000986:	4875      	ldr	r0, [pc, #468]	; (8000b5c <MX_GPIO_Init+0x2b0>)
 8000988:	f004 f86e 	bl	8004a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800098c:	2200      	movs	r2, #0
 800098e:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000992:	4873      	ldr	r0, [pc, #460]	; (8000b60 <MX_GPIO_Init+0x2b4>)
 8000994:	f004 f868 	bl	8004a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000998:	2200      	movs	r2, #0
 800099a:	2140      	movs	r1, #64	; 0x40
 800099c:	4871      	ldr	r0, [pc, #452]	; (8000b64 <MX_GPIO_Init+0x2b8>)
 800099e:	f004 f863 	bl	8004a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80009a8:	486f      	ldr	r0, [pc, #444]	; (8000b68 <MX_GPIO_Init+0x2bc>)
 80009aa:	f004 f85d 	bl	8004a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PE9 */
  GPIO_InitStruct.Pin = T_IRQ_Pin|T_MISO_Pin|GPIO_PIN_9;
 80009ae:	f44f 7305 	mov.w	r3, #532	; 0x214
 80009b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b4:	2300      	movs	r3, #0
 80009b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c0:	4619      	mov	r1, r3
 80009c2:	4866      	ldr	r0, [pc, #408]	; (8000b5c <MX_GPIO_Init+0x2b0>)
 80009c4:	f003 fe8c 	bl	80046e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 80009c8:	2368      	movs	r3, #104	; 0x68
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009cc:	2301      	movs	r3, #1
 80009ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d4:	2303      	movs	r3, #3
 80009d6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009dc:	4619      	mov	r1, r3
 80009de:	485f      	ldr	r0, [pc, #380]	; (8000b5c <MX_GPIO_Init+0x2b0>)
 80009e0:	f003 fe7e 	bl	80046e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Blue_Button_Pin;
 80009e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ea:	2300      	movs	r3, #0
 80009ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);
 80009f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f6:	4619      	mov	r1, r3
 80009f8:	485b      	ldr	r0, [pc, #364]	; (8000b68 <MX_GPIO_Init+0x2bc>)
 80009fa:	f003 fe71 	bl	80046e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80009fe:	2332      	movs	r3, #50	; 0x32
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a02:	2302      	movs	r3, #2
 8000a04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0a:	2303      	movs	r3, #3
 8000a0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a0e:	230b      	movs	r3, #11
 8000a10:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a16:	4619      	mov	r1, r3
 8000a18:	4853      	ldr	r0, [pc, #332]	; (8000b68 <MX_GPIO_Init+0x2bc>)
 8000a1a:	f003 fe61 	bl	80046e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a1e:	2386      	movs	r3, #134	; 0x86
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a22:	2302      	movs	r3, #2
 8000a24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2a:	2303      	movs	r3, #3
 8000a2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a2e:	230b      	movs	r3, #11
 8000a30:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a36:	4619      	mov	r1, r3
 8000a38:	484c      	ldr	r0, [pc, #304]	; (8000b6c <MX_GPIO_Init+0x2c0>)
 8000a3a:	f003 fe51 	bl	80046e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a44:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a52:	4619      	mov	r1, r3
 8000a54:	4846      	ldr	r0, [pc, #280]	; (8000b70 <MX_GPIO_Init+0x2c4>)
 8000a56:	f003 fe43 	bl	80046e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a60:	2302      	movs	r3, #2
 8000a62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a6c:	230b      	movs	r3, #11
 8000a6e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000a70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a74:	4619      	mov	r1, r3
 8000a76:	483a      	ldr	r0, [pc, #232]	; (8000b60 <MX_GPIO_Init+0x2b4>)
 8000a78:	f003 fe32 	bl	80046e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000a7c:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a82:	2301      	movs	r3, #1
 8000a84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a92:	4619      	mov	r1, r3
 8000a94:	4832      	ldr	r0, [pc, #200]	; (8000b60 <MX_GPIO_Init+0x2b4>)
 8000a96:	f003 fe23 	bl	80046e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a9a:	2340      	movs	r3, #64	; 0x40
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000aaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aae:	4619      	mov	r1, r3
 8000ab0:	482c      	ldr	r0, [pc, #176]	; (8000b64 <MX_GPIO_Init+0x2b8>)
 8000ab2:	f003 fe15 	bl	80046e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ab6:	2380      	movs	r3, #128	; 0x80
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aba:	2300      	movs	r3, #0
 8000abc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ac2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4826      	ldr	r0, [pc, #152]	; (8000b64 <MX_GPIO_Init+0x2b8>)
 8000aca:	f003 fe09 	bl	80046e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 8000ace:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000ad2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000adc:	2303      	movs	r3, #3
 8000ade:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4820      	ldr	r0, [pc, #128]	; (8000b68 <MX_GPIO_Init+0x2bc>)
 8000ae8:	f003 fdfa 	bl	80046e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000aec:	2302      	movs	r3, #2
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000af0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000af4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000afa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000afe:	4619      	mov	r1, r3
 8000b00:	481c      	ldr	r0, [pc, #112]	; (8000b74 <MX_GPIO_Init+0x2c8>)
 8000b02:	f003 fded 	bl	80046e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7;
 8000b06:	2398      	movs	r3, #152	; 0x98
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b16:	4619      	mov	r1, r3
 8000b18:	4816      	ldr	r0, [pc, #88]	; (8000b74 <MX_GPIO_Init+0x2c8>)
 8000b1a:	f003 fde1 	bl	80046e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b1e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000b22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b24:	2302      	movs	r3, #2
 8000b26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b30:	230b      	movs	r3, #11
 8000b32:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b38:	4619      	mov	r1, r3
 8000b3a:	480a      	ldr	r0, [pc, #40]	; (8000b64 <MX_GPIO_Init+0x2b8>)
 8000b3c:	f003 fdd0 	bl	80046e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8000b40:	2200      	movs	r2, #0
 8000b42:	2101      	movs	r1, #1
 8000b44:	2028      	movs	r0, #40	; 0x28
 8000b46:	f003 fa14 	bl	8003f72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b4a:	2028      	movs	r0, #40	; 0x28
 8000b4c:	f003 fa2d 	bl	8003faa <HAL_NVIC_EnableIRQ>

}
 8000b50:	bf00      	nop
 8000b52:	3738      	adds	r7, #56	; 0x38
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40021000 	.word	0x40021000
 8000b60:	40020400 	.word	0x40020400
 8000b64:	40021800 	.word	0x40021800
 8000b68:	40020800 	.word	0x40020800
 8000b6c:	40020000 	.word	0x40020000
 8000b70:	40021400 	.word	0x40021400
 8000b74:	40020c00 	.word	0x40020c00

08000b78 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b7c:	f3bf 8f4f 	dsb	sy
}
 8000b80:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b82:	f3bf 8f6f 	isb	sy
}
 8000b86:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000b88:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <SCB_EnableICache+0x48>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000b90:	f3bf 8f4f 	dsb	sy
}
 8000b94:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b96:	f3bf 8f6f 	isb	sy
}
 8000b9a:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000b9c:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <SCB_EnableICache+0x48>)
 8000b9e:	695b      	ldr	r3, [r3, #20]
 8000ba0:	4a07      	ldr	r2, [pc, #28]	; (8000bc0 <SCB_EnableICache+0x48>)
 8000ba2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ba8:	f3bf 8f4f 	dsb	sy
}
 8000bac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000bae:	f3bf 8f6f 	isb	sy
}
 8000bb2:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000bca:	4b1f      	ldr	r3, [pc, #124]	; (8000c48 <SCB_EnableDCache+0x84>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000bd2:	f3bf 8f4f 	dsb	sy
}
 8000bd6:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000bd8:	4b1b      	ldr	r3, [pc, #108]	; (8000c48 <SCB_EnableDCache+0x84>)
 8000bda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000bde:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	0b5b      	lsrs	r3, r3, #13
 8000be4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000be8:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	08db      	lsrs	r3, r3, #3
 8000bee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000bf2:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	015a      	lsls	r2, r3, #5
 8000bf8:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000bfc:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000bfe:	68ba      	ldr	r2, [r7, #8]
 8000c00:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000c02:	4911      	ldr	r1, [pc, #68]	; (8000c48 <SCB_EnableDCache+0x84>)
 8000c04:	4313      	orrs	r3, r2
 8000c06:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	1e5a      	subs	r2, r3, #1
 8000c0e:	60ba      	str	r2, [r7, #8]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d1ef      	bne.n	8000bf4 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	1e5a      	subs	r2, r3, #1
 8000c18:	60fa      	str	r2, [r7, #12]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d1e5      	bne.n	8000bea <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000c1e:	f3bf 8f4f 	dsb	sy
}
 8000c22:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000c24:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <SCB_EnableDCache+0x84>)
 8000c26:	695b      	ldr	r3, [r3, #20]
 8000c28:	4a07      	ldr	r2, [pc, #28]	; (8000c48 <SCB_EnableDCache+0x84>)
 8000c2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c2e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c30:	f3bf 8f4f 	dsb	sy
}
 8000c34:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c36:	f3bf 8f6f 	isb	sy
}
 8000c3a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000c3c:	bf00      	nop
 8000c3e:	3714      	adds	r7, #20
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */
/* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000c50:	f7ff ff92 	bl	8000b78 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000c54:	f7ff ffb6 	bl	8000bc4 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c58:	f002 fca0 	bl	800359c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c5c:	f000 f862 	bl	8000d24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c60:	f7ff fe24 	bl	80008ac <MX_GPIO_Init>
  MX_DMA_Init();
 8000c64:	f7ff fe04 	bl	8000870 <MX_DMA_Init>
  MX_SPI5_Init();
 8000c68:	f001 f960 	bl	8001f2c <MX_SPI5_Init>
  MX_TIM1_Init();
 8000c6c:	f001 fb22 	bl	80022b4 <MX_TIM1_Init>
  MX_RNG_Init();
 8000c70:	f001 f914 	bl	8001e9c <MX_RNG_Init>
  MX_ADC1_Init();
 8000c74:	f7ff fcba 	bl	80005ec <MX_ADC1_Init>
  MX_TIM3_Init();
 8000c78:	f001 fb70 	bl	800235c <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8000c7c:	f001 fc82 	bl	8002584 <MX_USART3_UART_Init>
  MX_ADC2_Init();
 8000c80:	f7ff fd06 	bl	8000690 <MX_ADC2_Init>
  MX_USART2_UART_Init();
 8000c84:	f001 fc4e 	bl	8002524 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  ILI9341_Init();
 8000c88:	f002 f93c 	bl	8002f04 <ILI9341_Init>
  ILI9341_Fill_Screen(BLACK);
 8000c8c:	2000      	movs	r0, #0
 8000c8e:	f002 fae5 	bl	800325c <ILI9341_Fill_Screen>


  /*-------------------------END FLAPPY BRID----------------------------------*/

  /*-------------------------PING PONG ----------------------------------*/
    ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000c92:	2003      	movs	r0, #3
 8000c94:	f002 f8d8 	bl	8002e48 <ILI9341_Set_Rotation>


    HAL_ADC_Start(&hadc1);
 8000c98:	481c      	ldr	r0, [pc, #112]	; (8000d0c <main+0xc0>)
 8000c9a:	f002 fd4d 	bl	8003738 <HAL_ADC_Start>
    HAL_ADC_Start(&hadc2);
 8000c9e:	481c      	ldr	r0, [pc, #112]	; (8000d10 <main+0xc4>)
 8000ca0:	f002 fd4a 	bl	8003738 <HAL_ADC_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  /*-------------------------FLAPPY BRID----------------------------------*/
	  if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_7) == GPIO_PIN_RESET) {
 8000ca4:	2180      	movs	r1, #128	; 0x80
 8000ca6:	481b      	ldr	r0, [pc, #108]	; (8000d14 <main+0xc8>)
 8000ca8:	f003 fec6 	bl	8004a38 <HAL_GPIO_ReadPin>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d11e      	bne.n	8000cf0 <main+0xa4>
	      HAL_Delay(70);
 8000cb2:	2046      	movs	r0, #70	; 0x46
 8000cb4:	f002 fcd8 	bl	8003668 <HAL_Delay>


	      if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_7) == GPIO_PIN_RESET) {
 8000cb8:	2180      	movs	r1, #128	; 0x80
 8000cba:	4816      	ldr	r0, [pc, #88]	; (8000d14 <main+0xc8>)
 8000cbc:	f003 febc 	bl	8004a38 <HAL_GPIO_ReadPin>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d114      	bne.n	8000cf0 <main+0xa4>

	          if (gamestate == 0) {
 8000cc6:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <main+0xcc>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d106      	bne.n	8000cdc <main+0x90>
	            checkstartpong = 0;
 8000cce:	4b13      	ldr	r3, [pc, #76]	; (8000d1c <main+0xd0>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
	            gamestate = 1;
 8000cd4:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <main+0xcc>)
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	e009      	b.n	8000cf0 <main+0xa4>
	          } else if (gamestate == 1){
 8000cdc:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <main+0xcc>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d105      	bne.n	8000cf0 <main+0xa4>
	              checkstartflappy = 0;
 8000ce4:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <main+0xd4>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
	        	  gamestate = 0;
 8000cea:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <main+0xcc>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
	          }
	      }
	  }


	  if (gamestate == 0) {
 8000cf0:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <main+0xcc>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d101      	bne.n	8000cfc <main+0xb0>
	      Start_GameFlappy();
 8000cf8:	f000 fab0 	bl	800125c <Start_GameFlappy>
	  }
	  if (gamestate == 1) {
 8000cfc:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <main+0xcc>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d1cf      	bne.n	8000ca4 <main+0x58>
	      StartGamePingpong();
 8000d04:	f000 fc92 	bl	800162c <StartGamePingpong>
	  if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_7) == GPIO_PIN_RESET) {
 8000d08:	e7cc      	b.n	8000ca4 <main+0x58>
 8000d0a:	bf00      	nop
 8000d0c:	20000608 	.word	0x20000608
 8000d10:	20000650 	.word	0x20000650
 8000d14:	40020c00 	.word	0x40020c00
 8000d18:	200007a8 	.word	0x200007a8
 8000d1c:	200007b0 	.word	0x200007b0
 8000d20:	200007ac 	.word	0x200007ac

08000d24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b094      	sub	sp, #80	; 0x50
 8000d28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d2a:	f107 031c 	add.w	r3, r7, #28
 8000d2e:	2234      	movs	r2, #52	; 0x34
 8000d30:	2100      	movs	r1, #0
 8000d32:	4618      	mov	r0, r3
 8000d34:	f008 f907 	bl	8008f46 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d38:	f107 0308 	add.w	r3, r7, #8
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d48:	f003 feda 	bl	8004b00 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d4c:	4b2b      	ldr	r3, [pc, #172]	; (8000dfc <SystemClock_Config+0xd8>)
 8000d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d50:	4a2a      	ldr	r2, [pc, #168]	; (8000dfc <SystemClock_Config+0xd8>)
 8000d52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d56:	6413      	str	r3, [r2, #64]	; 0x40
 8000d58:	4b28      	ldr	r3, [pc, #160]	; (8000dfc <SystemClock_Config+0xd8>)
 8000d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d60:	607b      	str	r3, [r7, #4]
 8000d62:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d64:	4b26      	ldr	r3, [pc, #152]	; (8000e00 <SystemClock_Config+0xdc>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a25      	ldr	r2, [pc, #148]	; (8000e00 <SystemClock_Config+0xdc>)
 8000d6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d6e:	6013      	str	r3, [r2, #0]
 8000d70:	4b23      	ldr	r3, [pc, #140]	; (8000e00 <SystemClock_Config+0xdc>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d78:	603b      	str	r3, [r7, #0]
 8000d7a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d80:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000d84:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d86:	2302      	movs	r3, #2
 8000d88:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d8e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d90:	2304      	movs	r3, #4
 8000d92:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 200;
 8000d94:	23c8      	movs	r3, #200	; 0xc8
 8000d96:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000d9c:	2309      	movs	r3, #9
 8000d9e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000da0:	2302      	movs	r3, #2
 8000da2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000da4:	f107 031c 	add.w	r3, r7, #28
 8000da8:	4618      	mov	r0, r3
 8000daa:	f003 ff09 	bl	8004bc0 <HAL_RCC_OscConfig>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000db4:	f001 f86e 	bl	8001e94 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000db8:	f003 feb2 	bl	8004b20 <HAL_PWREx_EnableOverDrive>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000dc2:	f001 f867 	bl	8001e94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dc6:	230f      	movs	r3, #15
 8000dc8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000dd2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000dd6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000dd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ddc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000dde:	f107 0308 	add.w	r3, r7, #8
 8000de2:	2106      	movs	r1, #6
 8000de4:	4618      	mov	r0, r3
 8000de6:	f004 f999 	bl	800511c <HAL_RCC_ClockConfig>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000df0:	f001 f850 	bl	8001e94 <Error_Handler>
  }
}
 8000df4:	bf00      	nop
 8000df6:	3750      	adds	r7, #80	; 0x50
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	40007000 	.word	0x40007000

08000e04 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

/*-----------------------------Interrupt-----------------------------------------------*/

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	80fb      	strh	r3, [r7, #6]
   HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000e0e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e12:	f003 fe5d 	bl	8004ad0 <HAL_GPIO_EXTI_IRQHandler>
	if (GPIO_Pin == GPIO_PIN_13) {
 8000e16:	88fb      	ldrh	r3, [r7, #6]
 8000e18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e1c:	d101      	bne.n	8000e22 <HAL_GPIO_EXTI_Callback+0x1e>
        HAL_NVIC_SystemReset(); // Reset บอร์ด
 8000e1e:	f003 f8d2 	bl	8003fc6 <HAL_NVIC_SystemReset>
    }
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
	...

08000e2c <Init_Heigh_Pill>:

/*-----------------------------END Interrupt-------------------------------------------*/
/*------------------------------------FLAPPY BIRD--------------------------------------*/


void Init_Heigh_Pill(){
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
	int i =0;
 8000e32:	2300      	movs	r3, #0
 8000e34:	607b      	str	r3, [r7, #4]
	int value = 0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	603b      	str	r3, [r7, #0]
	for(i=0; i<15; i++){
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	607b      	str	r3, [r7, #4]
 8000e3e:	e00e      	b.n	8000e5e <Init_Heigh_Pill+0x32>
		list_heigh[i] = 150-value;
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8000e48:	b299      	uxth	r1, r3
 8000e4a:	4a0a      	ldr	r2, [pc, #40]	; (8000e74 <Init_Heigh_Pill+0x48>)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		value += 10;
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	330a      	adds	r3, #10
 8000e56:	603b      	str	r3, [r7, #0]
	for(i=0; i<15; i++){
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	607b      	str	r3, [r7, #4]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2b0e      	cmp	r3, #14
 8000e62:	dded      	ble.n	8000e40 <Init_Heigh_Pill+0x14>
	}
}
 8000e64:	bf00      	nop
 8000e66:	bf00      	nop
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	200006f8 	.word	0x200006f8

08000e78 <WelcomeFlappy>:

void WelcomeFlappy(){
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af02      	add	r7, sp, #8
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000e7e:	2003      	movs	r0, #3
 8000e80:	f001 ffe2 	bl	8002e48 <ILI9341_Set_Rotation>
	ILI9341_Fill_Screen(WHITE);
 8000e84:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000e88:	f002 f9e8 	bl	800325c <ILI9341_Fill_Screen>
	ILI9341_Draw_Text("Flappy Bird",60, 40,BLACK,3,WHITE);
 8000e8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e90:	9301      	str	r3, [sp, #4]
 8000e92:	2303      	movs	r3, #3
 8000e94:	9300      	str	r3, [sp, #0]
 8000e96:	2300      	movs	r3, #0
 8000e98:	2228      	movs	r2, #40	; 0x28
 8000e9a:	213c      	movs	r1, #60	; 0x3c
 8000e9c:	481d      	ldr	r0, [pc, #116]	; (8000f14 <WelcomeFlappy+0x9c>)
 8000e9e:	f001 fe29 	bl	8002af4 <ILI9341_Draw_Text>
//	ILI9341_Draw_Text("Press",85, 180, BLACK, 2, WHITE);
//	ILI9341_Draw_Text("RED",160, 180, RED, 2, WHITE);
//	ILI9341_Draw_Text("to change difficulty",27 , 210, BLACK, 2, WHITE);

							//	X Y
	ILI9341_Draw_Filled_Circle(80, 150, 10, YELLOW);
 8000ea2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000ea6:	220a      	movs	r2, #10
 8000ea8:	2196      	movs	r1, #150	; 0x96
 8000eaa:	2050      	movs	r0, #80	; 0x50
 8000eac:	f001 fca1 	bl	80027f2 <ILI9341_Draw_Filled_Circle>
	ILI9341_Draw_Text(":change game", 100, 140, BLACK, 2, WHITE);
 8000eb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000eb4:	9301      	str	r3, [sp, #4]
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	9300      	str	r3, [sp, #0]
 8000eba:	2300      	movs	r3, #0
 8000ebc:	228c      	movs	r2, #140	; 0x8c
 8000ebe:	2164      	movs	r1, #100	; 0x64
 8000ec0:	4815      	ldr	r0, [pc, #84]	; (8000f18 <WelcomeFlappy+0xa0>)
 8000ec2:	f001 fe17 	bl	8002af4 <ILI9341_Draw_Text>

	ILI9341_Draw_Filled_Circle(80, 180, 10, DARKGREEN);
 8000ec6:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8000eca:	220a      	movs	r2, #10
 8000ecc:	21b4      	movs	r1, #180	; 0xb4
 8000ece:	2050      	movs	r0, #80	; 0x50
 8000ed0:	f001 fc8f 	bl	80027f2 <ILI9341_Draw_Filled_Circle>
	ILI9341_Draw_Text(":start game", 100, 170, BLACK, 2, WHITE);
 8000ed4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ed8:	9301      	str	r3, [sp, #4]
 8000eda:	2302      	movs	r3, #2
 8000edc:	9300      	str	r3, [sp, #0]
 8000ede:	2300      	movs	r3, #0
 8000ee0:	22aa      	movs	r2, #170	; 0xaa
 8000ee2:	2164      	movs	r1, #100	; 0x64
 8000ee4:	480d      	ldr	r0, [pc, #52]	; (8000f1c <WelcomeFlappy+0xa4>)
 8000ee6:	f001 fe05 	bl	8002af4 <ILI9341_Draw_Text>

	ILI9341_Draw_Filled_Circle(30, 210, 10, RED);
 8000eea:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000eee:	220a      	movs	r2, #10
 8000ef0:	21d2      	movs	r1, #210	; 0xd2
 8000ef2:	201e      	movs	r0, #30
 8000ef4:	f001 fc7d 	bl	80027f2 <ILI9341_Draw_Filled_Circle>
	ILI9341_Draw_Text(":change difficulty",50 , 200, BLACK, 2, WHITE);
 8000ef8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000efc:	9301      	str	r3, [sp, #4]
 8000efe:	2302      	movs	r3, #2
 8000f00:	9300      	str	r3, [sp, #0]
 8000f02:	2300      	movs	r3, #0
 8000f04:	22c8      	movs	r2, #200	; 0xc8
 8000f06:	2132      	movs	r1, #50	; 0x32
 8000f08:	4805      	ldr	r0, [pc, #20]	; (8000f20 <WelcomeFlappy+0xa8>)
 8000f0a:	f001 fdf3 	bl	8002af4 <ILI9341_Draw_Text>

}
 8000f0e:	bf00      	nop
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	0800b048 	.word	0x0800b048
 8000f18:	0800b054 	.word	0x0800b054
 8000f1c:	0800b064 	.word	0x0800b064
 8000f20:	0800b070 	.word	0x0800b070

08000f24 <Draw_Pillar>:

void Draw_Pillar(int16_t x, uint16_t height) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	460a      	mov	r2, r1
 8000f2e:	80fb      	strh	r3, [r7, #6]
 8000f30:	4613      	mov	r3, r2
 8000f32:	80bb      	strh	r3, [r7, #4]
    if (x < 321) {
 8000f34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f38:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000f3c:	dc23      	bgt.n	8000f86 <Draw_Pillar+0x62>
       
        int16_t x1 = x + WIDTH_PILL + 1;
 8000f3e:	88fb      	ldrh	r3, [r7, #6]
 8000f40:	3329      	adds	r3, #41	; 0x29
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	81fb      	strh	r3, [r7, #14]

        ILI9341_Draw_Vertical_Line(x1, 1, height, WHITE);
 8000f46:	89f8      	ldrh	r0, [r7, #14]
 8000f48:	88ba      	ldrh	r2, [r7, #4]
 8000f4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f4e:	2101      	movs	r1, #1
 8000f50:	f002 fae0 	bl	8003514 <ILI9341_Draw_Vertical_Line>
        ILI9341_Draw_Vertical_Line(x1, 1+height+DISTANCE, HEIGH_SCREEN, WHITE);
 8000f54:	89f8      	ldrh	r0, [r7, #14]
 8000f56:	88bb      	ldrh	r3, [r7, #4]
 8000f58:	3351      	adds	r3, #81	; 0x51
 8000f5a:	b299      	uxth	r1, r3
 8000f5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f60:	22eb      	movs	r2, #235	; 0xeb
 8000f62:	f002 fad7 	bl	8003514 <ILI9341_Draw_Vertical_Line>

        ILI9341_Draw_Vertical_Line(x, 1, height, GREEN);
 8000f66:	88f8      	ldrh	r0, [r7, #6]
 8000f68:	88ba      	ldrh	r2, [r7, #4]
 8000f6a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000f6e:	2101      	movs	r1, #1
 8000f70:	f002 fad0 	bl	8003514 <ILI9341_Draw_Vertical_Line>
        ILI9341_Draw_Vertical_Line(x, 1+height+DISTANCE, HEIGH_SCREEN, GREEN);
 8000f74:	88f8      	ldrh	r0, [r7, #6]
 8000f76:	88bb      	ldrh	r3, [r7, #4]
 8000f78:	3351      	adds	r3, #81	; 0x51
 8000f7a:	b299      	uxth	r1, r3
 8000f7c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000f80:	22eb      	movs	r2, #235	; 0xeb
 8000f82:	f002 fac7 	bl	8003514 <ILI9341_Draw_Vertical_Line>
    }
}
 8000f86:	bf00      	nop
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
	...

08000f90 <Bird_Fly>:



void Bird_Fly(uint16_t y) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af02      	add	r7, sp, #8
 8000f96:	4603      	mov	r3, r0
 8000f98:	80fb      	strh	r3, [r7, #6]
    ILI9341_Fill_Color(BIRD_X, y - 3, BIRD_X + WIDTH_BIRD + 5, y + HEIGH_BIRD + 5, WHITE);
 8000f9a:	88fb      	ldrh	r3, [r7, #6]
 8000f9c:	1ed9      	subs	r1, r3, #3
 8000f9e:	88fb      	ldrh	r3, [r7, #6]
 8000fa0:	3318      	adds	r3, #24
 8000fa2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fa6:	9200      	str	r2, [sp, #0]
 8000fa8:	228d      	movs	r2, #141	; 0x8d
 8000faa:	206e      	movs	r0, #110	; 0x6e
 8000fac:	f001 fe12 	bl	8002bd4 <ILI9341_Fill_Color>
    HAL_Delay(1);
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	f002 fb59 	bl	8003668 <HAL_Delay>
    ILI9341_Write_Pic_Coor(BIRD_X, y, WIDTH_BIRD, HEIGH_BIRD, bird_image);
 8000fb6:	88f9      	ldrh	r1, [r7, #6]
 8000fb8:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <Bird_Fly+0x40>)
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	2313      	movs	r3, #19
 8000fbe:	221a      	movs	r2, #26
 8000fc0:	206e      	movs	r0, #110	; 0x6e
 8000fc2:	f001 fdc6 	bl	8002b52 <ILI9341_Write_Pic_Coor>
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000024 	.word	0x20000024

08000fd4 <Game_Over>:
        ILI9341_Draw_Text(string, x_score, Y_SCORE, RED, 2, YELLOW);
    }
}


void Game_Over() {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af02      	add	r7, sp, #8
    char score_string[3] = {0, 0, '\0'}, score_h_string[3] = {0,0,'\0'};
 8000fda:	4a6d      	ldr	r2, [pc, #436]	; (8001190 <Game_Over+0x1bc>)
 8000fdc:	1d3b      	adds	r3, r7, #4
 8000fde:	6812      	ldr	r2, [r2, #0]
 8000fe0:	4611      	mov	r1, r2
 8000fe2:	8019      	strh	r1, [r3, #0]
 8000fe4:	3302      	adds	r3, #2
 8000fe6:	0c12      	lsrs	r2, r2, #16
 8000fe8:	701a      	strb	r2, [r3, #0]
 8000fea:	4a69      	ldr	r2, [pc, #420]	; (8001190 <Game_Over+0x1bc>)
 8000fec:	463b      	mov	r3, r7
 8000fee:	6812      	ldr	r2, [r2, #0]
 8000ff0:	4611      	mov	r1, r2
 8000ff2:	8019      	strh	r1, [r3, #0]
 8000ff4:	3302      	adds	r3, #2
 8000ff6:	0c12      	lsrs	r2, r2, #16
 8000ff8:	701a      	strb	r2, [r3, #0]
    uint16_t a = 0, b = 0, c = 0, d = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	81fb      	strh	r3, [r7, #14]
 8000ffe:	2300      	movs	r3, #0
 8001000:	81bb      	strh	r3, [r7, #12]
 8001002:	2300      	movs	r3, #0
 8001004:	817b      	strh	r3, [r7, #10]
 8001006:	2300      	movs	r3, #0
 8001008:	813b      	strh	r3, [r7, #8]

      if(score > high_score){
 800100a:	4b62      	ldr	r3, [pc, #392]	; (8001194 <Game_Over+0x1c0>)
 800100c:	881a      	ldrh	r2, [r3, #0]
 800100e:	4b62      	ldr	r3, [pc, #392]	; (8001198 <Game_Over+0x1c4>)
 8001010:	881b      	ldrh	r3, [r3, #0]
 8001012:	429a      	cmp	r2, r3
 8001014:	d903      	bls.n	800101e <Game_Over+0x4a>
              high_score = score;
 8001016:	4b5f      	ldr	r3, [pc, #380]	; (8001194 <Game_Over+0x1c0>)
 8001018:	881a      	ldrh	r2, [r3, #0]
 800101a:	4b5f      	ldr	r3, [pc, #380]	; (8001198 <Game_Over+0x1c4>)
 800101c:	801a      	strh	r2, [r3, #0]
      }
    // Clear the area for game over screen
    ILI9341_Fill_Color(X_GAME_OVER - 20, Y_GAME_OVER - 10, X_GAME_OVER + 130, Y_GAME_OVER + 110, RED);
 800101e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	2396      	movs	r3, #150	; 0x96
 8001026:	22e6      	movs	r2, #230	; 0xe6
 8001028:	211e      	movs	r1, #30
 800102a:	2050      	movs	r0, #80	; 0x50
 800102c:	f001 fdd2 	bl	8002bd4 <ILI9341_Fill_Color>

    // Display "Game Over" text
    ILI9341_Draw_Text("Game Over", X_GAME_OVER, Y_GAME_OVER, YELLOW, 2, RED);
 8001030:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001034:	9301      	str	r3, [sp, #4]
 8001036:	2302      	movs	r3, #2
 8001038:	9300      	str	r3, [sp, #0]
 800103a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800103e:	2228      	movs	r2, #40	; 0x28
 8001040:	2164      	movs	r1, #100	; 0x64
 8001042:	4856      	ldr	r0, [pc, #344]	; (800119c <Game_Over+0x1c8>)
 8001044:	f001 fd56 	bl	8002af4 <ILI9341_Draw_Text>

    ILI9341_Draw_Text("High Score:", X_GAME_H_SCORE, Y_GAME_H_SCORE, YELLOW, 2,RED);
 8001048:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800104c:	9301      	str	r3, [sp, #4]
 800104e:	2302      	movs	r3, #2
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001056:	2246      	movs	r2, #70	; 0x46
 8001058:	2155      	movs	r1, #85	; 0x55
 800105a:	4851      	ldr	r0, [pc, #324]	; (80011a0 <Game_Over+0x1cc>)
 800105c:	f001 fd4a 	bl	8002af4 <ILI9341_Draw_Text>
    if (high_score < 10) {
 8001060:	4b4d      	ldr	r3, [pc, #308]	; (8001198 <Game_Over+0x1c4>)
 8001062:	881b      	ldrh	r3, [r3, #0]
 8001064:	2b09      	cmp	r3, #9
 8001066:	d80f      	bhi.n	8001088 <Game_Over+0xb4>
        // Display single-digit score
        ILI9341_Draw_Char((high_score + 48), X_SCORE_H_END, Y_GAME_H_SCORE, BLUE, 2, RED);
 8001068:	4b4b      	ldr	r3, [pc, #300]	; (8001198 <Game_Over+0x1c4>)
 800106a:	881b      	ldrh	r3, [r3, #0]
 800106c:	b2db      	uxtb	r3, r3
 800106e:	3330      	adds	r3, #48	; 0x30
 8001070:	b2d8      	uxtb	r0, r3
 8001072:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001076:	9301      	str	r3, [sp, #4]
 8001078:	2302      	movs	r3, #2
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	231f      	movs	r3, #31
 800107e:	2246      	movs	r2, #70	; 0x46
 8001080:	21d7      	movs	r1, #215	; 0xd7
 8001082:	f001 fc9d 	bl	80029c0 <ILI9341_Draw_Char>
 8001086:	e027      	b.n	80010d8 <Game_Over+0x104>
    } else {
        // Display multi-digit score
        a = high_score % 10 + 48;    // Units
 8001088:	4b43      	ldr	r3, [pc, #268]	; (8001198 <Game_Over+0x1c4>)
 800108a:	881a      	ldrh	r2, [r3, #0]
 800108c:	4b45      	ldr	r3, [pc, #276]	; (80011a4 <Game_Over+0x1d0>)
 800108e:	fba3 1302 	umull	r1, r3, r3, r2
 8001092:	08d9      	lsrs	r1, r3, #3
 8001094:	460b      	mov	r3, r1
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	440b      	add	r3, r1
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	b29b      	uxth	r3, r3
 80010a0:	3330      	adds	r3, #48	; 0x30
 80010a2:	81fb      	strh	r3, [r7, #14]
        b = high_score / 10 + 48;    // Tens
 80010a4:	4b3c      	ldr	r3, [pc, #240]	; (8001198 <Game_Over+0x1c4>)
 80010a6:	881b      	ldrh	r3, [r3, #0]
 80010a8:	4a3e      	ldr	r2, [pc, #248]	; (80011a4 <Game_Over+0x1d0>)
 80010aa:	fba2 2303 	umull	r2, r3, r2, r3
 80010ae:	08db      	lsrs	r3, r3, #3
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	3330      	adds	r3, #48	; 0x30
 80010b4:	81bb      	strh	r3, [r7, #12]
        score_h_string[0] = b;
 80010b6:	89bb      	ldrh	r3, [r7, #12]
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	703b      	strb	r3, [r7, #0]
        score_h_string[1] = a;
 80010bc:	89fb      	ldrh	r3, [r7, #14]
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	707b      	strb	r3, [r7, #1]
        ILI9341_Draw_Text(score_h_string, X_SCORE_H_END, Y_GAME_H_SCORE, BLUE, 2, RED);
 80010c2:	4638      	mov	r0, r7
 80010c4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80010c8:	9301      	str	r3, [sp, #4]
 80010ca:	2302      	movs	r3, #2
 80010cc:	9300      	str	r3, [sp, #0]
 80010ce:	231f      	movs	r3, #31
 80010d0:	2246      	movs	r2, #70	; 0x46
 80010d2:	21d7      	movs	r1, #215	; 0xd7
 80010d4:	f001 fd0e 	bl	8002af4 <ILI9341_Draw_Text>
    }
    // Display "Score: " text

    ILI9341_Draw_Text("Score: ", X_GAME_SCORE, Y_GAME_SCORE, YELLOW, 2, RED);
 80010d8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80010dc:	9301      	str	r3, [sp, #4]
 80010de:	2302      	movs	r3, #2
 80010e0:	9300      	str	r3, [sp, #0]
 80010e2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80010e6:	2264      	movs	r2, #100	; 0x64
 80010e8:	2173      	movs	r1, #115	; 0x73
 80010ea:	482f      	ldr	r0, [pc, #188]	; (80011a8 <Game_Over+0x1d4>)
 80010ec:	f001 fd02 	bl	8002af4 <ILI9341_Draw_Text>

    if (score < 10) {
 80010f0:	4b28      	ldr	r3, [pc, #160]	; (8001194 <Game_Over+0x1c0>)
 80010f2:	881b      	ldrh	r3, [r3, #0]
 80010f4:	2b09      	cmp	r3, #9
 80010f6:	d80f      	bhi.n	8001118 <Game_Over+0x144>
        // Display single-digit score
        ILI9341_Draw_Char((score + 48), X_SOCRE_END, Y_GAME_SCORE, BLUE, 2, RED);
 80010f8:	4b26      	ldr	r3, [pc, #152]	; (8001194 <Game_Over+0x1c0>)
 80010fa:	881b      	ldrh	r3, [r3, #0]
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	3330      	adds	r3, #48	; 0x30
 8001100:	b2d8      	uxtb	r0, r3
 8001102:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001106:	9301      	str	r3, [sp, #4]
 8001108:	2302      	movs	r3, #2
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	231f      	movs	r3, #31
 800110e:	2264      	movs	r2, #100	; 0x64
 8001110:	21b9      	movs	r1, #185	; 0xb9
 8001112:	f001 fc55 	bl	80029c0 <ILI9341_Draw_Char>
 8001116:	e027      	b.n	8001168 <Game_Over+0x194>
    } else {
        // Display multi-digit score
        a = score % 10 + 48;    // Units
 8001118:	4b1e      	ldr	r3, [pc, #120]	; (8001194 <Game_Over+0x1c0>)
 800111a:	881a      	ldrh	r2, [r3, #0]
 800111c:	4b21      	ldr	r3, [pc, #132]	; (80011a4 <Game_Over+0x1d0>)
 800111e:	fba3 1302 	umull	r1, r3, r3, r2
 8001122:	08d9      	lsrs	r1, r3, #3
 8001124:	460b      	mov	r3, r1
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	440b      	add	r3, r1
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	b29b      	uxth	r3, r3
 8001130:	3330      	adds	r3, #48	; 0x30
 8001132:	81fb      	strh	r3, [r7, #14]
        b = score / 10 + 48;    // Tens
 8001134:	4b17      	ldr	r3, [pc, #92]	; (8001194 <Game_Over+0x1c0>)
 8001136:	881b      	ldrh	r3, [r3, #0]
 8001138:	4a1a      	ldr	r2, [pc, #104]	; (80011a4 <Game_Over+0x1d0>)
 800113a:	fba2 2303 	umull	r2, r3, r2, r3
 800113e:	08db      	lsrs	r3, r3, #3
 8001140:	b29b      	uxth	r3, r3
 8001142:	3330      	adds	r3, #48	; 0x30
 8001144:	81bb      	strh	r3, [r7, #12]
        score_string[0] = b;
 8001146:	89bb      	ldrh	r3, [r7, #12]
 8001148:	b2db      	uxtb	r3, r3
 800114a:	713b      	strb	r3, [r7, #4]
        score_string[1] = a;
 800114c:	89fb      	ldrh	r3, [r7, #14]
 800114e:	b2db      	uxtb	r3, r3
 8001150:	717b      	strb	r3, [r7, #5]
        ILI9341_Draw_Text(score_string, X_SOCRE_END, Y_GAME_SCORE, BLUE, 2, RED);
 8001152:	1d38      	adds	r0, r7, #4
 8001154:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001158:	9301      	str	r3, [sp, #4]
 800115a:	2302      	movs	r3, #2
 800115c:	9300      	str	r3, [sp, #0]
 800115e:	231f      	movs	r3, #31
 8001160:	2264      	movs	r2, #100	; 0x64
 8001162:	21b9      	movs	r1, #185	; 0xb9
 8001164:	f001 fcc6 	bl	8002af4 <ILI9341_Draw_Text>
    }

    HAL_Delay(1500);
 8001168:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800116c:	f002 fa7c 	bl	8003668 <HAL_Delay>

    // Display text play again
    ILI9341_Draw_Text("Play Again?", X_BUT, Y_BUT, WHITE, 2, BLACK);
 8001170:	2300      	movs	r3, #0
 8001172:	9301      	str	r3, [sp, #4]
 8001174:	2302      	movs	r3, #2
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800117c:	2282      	movs	r2, #130	; 0x82
 800117e:	215a      	movs	r1, #90	; 0x5a
 8001180:	480a      	ldr	r0, [pc, #40]	; (80011ac <Game_Over+0x1d8>)
 8001182:	f001 fcb7 	bl	8002af4 <ILI9341_Draw_Text>

    // You may need additional code to handle the delay and button press logic
}
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	0800b084 	.word	0x0800b084
 8001194:	20000796 	.word	0x20000796
 8001198:	20000798 	.word	0x20000798
 800119c:	0800b088 	.word	0x0800b088
 80011a0:	0800b094 	.word	0x0800b094
 80011a4:	cccccccd 	.word	0xcccccccd
 80011a8:	0800b0a0 	.word	0x0800b0a0
 80011ac:	0800b0a8 	.word	0x0800b0a8

080011b0 <Init_Game>:

void Init_Game() {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af02      	add	r7, sp, #8
    Init_Heigh_Pill();
 80011b6:	f7ff fe39 	bl	8000e2c <Init_Heigh_Pill>
    score = 0;
 80011ba:	4b1d      	ldr	r3, [pc, #116]	; (8001230 <Init_Game+0x80>)
 80011bc:	2200      	movs	r2, #0
 80011be:	801a      	strh	r2, [r3, #0]
    x1 = 320;
 80011c0:	4b1c      	ldr	r3, [pc, #112]	; (8001234 <Init_Game+0x84>)
 80011c2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80011c6:	801a      	strh	r2, [r3, #0]
    x2 = 600;
 80011c8:	4b1b      	ldr	r3, [pc, #108]	; (8001238 <Init_Game+0x88>)
 80011ca:	f44f 7216 	mov.w	r2, #600	; 0x258
 80011ce:	801a      	strh	r2, [r3, #0]
    heigh_pill1 = list_heigh[rand() % 15];
 80011d0:	f007 f91c 	bl	800840c <rand>
 80011d4:	4602      	mov	r2, r0
 80011d6:	4b19      	ldr	r3, [pc, #100]	; (800123c <Init_Game+0x8c>)
 80011d8:	fb83 1302 	smull	r1, r3, r3, r2
 80011dc:	4413      	add	r3, r2
 80011de:	10d9      	asrs	r1, r3, #3
 80011e0:	17d3      	asrs	r3, r2, #31
 80011e2:	1ac9      	subs	r1, r1, r3
 80011e4:	460b      	mov	r3, r1
 80011e6:	011b      	lsls	r3, r3, #4
 80011e8:	1a5b      	subs	r3, r3, r1
 80011ea:	1ad1      	subs	r1, r2, r3
 80011ec:	4b14      	ldr	r3, [pc, #80]	; (8001240 <Init_Game+0x90>)
 80011ee:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 80011f2:	4b14      	ldr	r3, [pc, #80]	; (8001244 <Init_Game+0x94>)
 80011f4:	801a      	strh	r2, [r3, #0]
    heigh_pill2 = 80;
 80011f6:	4b14      	ldr	r3, [pc, #80]	; (8001248 <Init_Game+0x98>)
 80011f8:	2250      	movs	r2, #80	; 0x50
 80011fa:	801a      	strh	r2, [r3, #0]
    y_bird = BIRD_Y;
 80011fc:	4b13      	ldr	r3, [pc, #76]	; (800124c <Init_Game+0x9c>)
 80011fe:	2264      	movs	r2, #100	; 0x64
 8001200:	801a      	strh	r2, [r3, #0]
    x_com = 320;
 8001202:	4b13      	ldr	r3, [pc, #76]	; (8001250 <Init_Game+0xa0>)
 8001204:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001208:	801a      	strh	r2, [r3, #0]
    h_com = heigh_pill1;
 800120a:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <Init_Game+0x94>)
 800120c:	881a      	ldrh	r2, [r3, #0]
 800120e:	4b11      	ldr	r3, [pc, #68]	; (8001254 <Init_Game+0xa4>)
 8001210:	801a      	strh	r2, [r3, #0]

    // Clear the screen
    ILI9341_Fill_Screen(WHITE);
 8001212:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001216:	f002 f821 	bl	800325c <ILI9341_Fill_Screen>

    // Draw the bird image
    ILI9341_Write_Pic_Coor(BIRD_X, BIRD_Y, WIDTH_BIRD, HEIGH_BIRD, bird_image);
 800121a:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <Init_Game+0xa8>)
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	2313      	movs	r3, #19
 8001220:	221a      	movs	r2, #26
 8001222:	2164      	movs	r1, #100	; 0x64
 8001224:	206e      	movs	r0, #110	; 0x6e
 8001226:	f001 fc94 	bl	8002b52 <ILI9341_Write_Pic_Coor>

}
 800122a:	bf00      	nop
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000796 	.word	0x20000796
 8001234:	2000079a 	.word	0x2000079a
 8001238:	2000079c 	.word	0x2000079c
 800123c:	88888889 	.word	0x88888889
 8001240:	200006f8 	.word	0x200006f8
 8001244:	2000079e 	.word	0x2000079e
 8001248:	200007a0 	.word	0x200007a0
 800124c:	200007a2 	.word	0x200007a2
 8001250:	200007a4 	.word	0x200007a4
 8001254:	200007a6 	.word	0x200007a6
 8001258:	20000024 	.word	0x20000024

0800125c <Start_GameFlappy>:

void Start_GameFlappy(){
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
	  int c = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
	  int score_old = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	60bb      	str	r3, [r7, #8]
	  int game_over=NO;
 800126a:	2300      	movs	r3, #0
 800126c:	607b      	str	r3, [r7, #4]

	  if (checkstartflappy == 0){
 800126e:	4b82      	ldr	r3, [pc, #520]	; (8001478 <Start_GameFlappy+0x21c>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d104      	bne.n	8001280 <Start_GameFlappy+0x24>
		  WelcomeFlappy();
 8001276:	f7ff fdff 	bl	8000e78 <WelcomeFlappy>
		  checkstartflappy = 1;
 800127a:	4b7f      	ldr	r3, [pc, #508]	; (8001478 <Start_GameFlappy+0x21c>)
 800127c:	2201      	movs	r2, #1
 800127e:	601a      	str	r2, [r3, #0]
      }

	if(!Read_IRQ()){
 8001280:	f001 fa7e 	bl	8002780 <Read_IRQ>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	f040 8175 	bne.w	8001576 <Start_GameFlappy+0x31a>

			  if((game_over==NO) || HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1)== RESET){
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d007      	beq.n	80012a2 <Start_GameFlappy+0x46>
 8001292:	2102      	movs	r1, #2
 8001294:	4879      	ldr	r0, [pc, #484]	; (800147c <Start_GameFlappy+0x220>)
 8001296:	f003 fbcf 	bl	8004a38 <HAL_GPIO_ReadPin>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	f040 816a 	bne.w	8001576 <Start_GameFlappy+0x31a>
			  	  score_old = score;
 80012a2:	4b77      	ldr	r3, [pc, #476]	; (8001480 <Start_GameFlappy+0x224>)
 80012a4:	881b      	ldrh	r3, [r3, #0]
 80012a6:	60bb      	str	r3, [r7, #8]
			  	  c = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	60fb      	str	r3, [r7, #12]
				  if(score_old > high_score){
 80012ac:	4b75      	ldr	r3, [pc, #468]	; (8001484 <Start_GameFlappy+0x228>)
 80012ae:	881b      	ldrh	r3, [r3, #0]
 80012b0:	461a      	mov	r2, r3
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	4293      	cmp	r3, r2
 80012b6:	dd03      	ble.n	80012c0 <Start_GameFlappy+0x64>
				  		high_score = score_old;
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	b29a      	uxth	r2, r3
 80012bc:	4b71      	ldr	r3, [pc, #452]	; (8001484 <Start_GameFlappy+0x228>)
 80012be:	801a      	strh	r2, [r3, #0]
				  }
				  Init_Game();
 80012c0:	f7ff ff76 	bl	80011b0 <Init_Game>
				  while(1){
						  if(x1 == 70){
 80012c4:	4b70      	ldr	r3, [pc, #448]	; (8001488 <Start_GameFlappy+0x22c>)
 80012c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ca:	2b46      	cmp	r3, #70	; 0x46
 80012cc:	d116      	bne.n	80012fc <Start_GameFlappy+0xa0>
							  x2 = 320;
 80012ce:	4b6f      	ldr	r3, [pc, #444]	; (800148c <Start_GameFlappy+0x230>)
 80012d0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80012d4:	801a      	strh	r2, [r3, #0]
							  heigh_pill2 = list_heigh[rand()%15];
 80012d6:	f007 f899 	bl	800840c <rand>
 80012da:	4602      	mov	r2, r0
 80012dc:	4b6c      	ldr	r3, [pc, #432]	; (8001490 <Start_GameFlappy+0x234>)
 80012de:	fb83 1302 	smull	r1, r3, r3, r2
 80012e2:	4413      	add	r3, r2
 80012e4:	10d9      	asrs	r1, r3, #3
 80012e6:	17d3      	asrs	r3, r2, #31
 80012e8:	1ac9      	subs	r1, r1, r3
 80012ea:	460b      	mov	r3, r1
 80012ec:	011b      	lsls	r3, r3, #4
 80012ee:	1a5b      	subs	r3, r3, r1
 80012f0:	1ad1      	subs	r1, r2, r3
 80012f2:	4b68      	ldr	r3, [pc, #416]	; (8001494 <Start_GameFlappy+0x238>)
 80012f4:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 80012f8:	4b67      	ldr	r3, [pc, #412]	; (8001498 <Start_GameFlappy+0x23c>)
 80012fa:	801a      	strh	r2, [r3, #0]
						  }
						  if(x2 == 70){
 80012fc:	4b63      	ldr	r3, [pc, #396]	; (800148c <Start_GameFlappy+0x230>)
 80012fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001302:	2b46      	cmp	r3, #70	; 0x46
 8001304:	d116      	bne.n	8001334 <Start_GameFlappy+0xd8>
							  x1 = 320;
 8001306:	4b60      	ldr	r3, [pc, #384]	; (8001488 <Start_GameFlappy+0x22c>)
 8001308:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800130c:	801a      	strh	r2, [r3, #0]
							  heigh_pill1 = list_heigh[rand()%15];
 800130e:	f007 f87d 	bl	800840c <rand>
 8001312:	4602      	mov	r2, r0
 8001314:	4b5e      	ldr	r3, [pc, #376]	; (8001490 <Start_GameFlappy+0x234>)
 8001316:	fb83 1302 	smull	r1, r3, r3, r2
 800131a:	4413      	add	r3, r2
 800131c:	10d9      	asrs	r1, r3, #3
 800131e:	17d3      	asrs	r3, r2, #31
 8001320:	1ac9      	subs	r1, r1, r3
 8001322:	460b      	mov	r3, r1
 8001324:	011b      	lsls	r3, r3, #4
 8001326:	1a5b      	subs	r3, r3, r1
 8001328:	1ad1      	subs	r1, r2, r3
 800132a:	4b5a      	ldr	r3, [pc, #360]	; (8001494 <Start_GameFlappy+0x238>)
 800132c:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 8001330:	4b5a      	ldr	r3, [pc, #360]	; (800149c <Start_GameFlappy+0x240>)
 8001332:	801a      	strh	r2, [r3, #0]
						  }

						  Draw_Pillar(x1, heigh_pill1);
 8001334:	4b54      	ldr	r3, [pc, #336]	; (8001488 <Start_GameFlappy+0x22c>)
 8001336:	f9b3 3000 	ldrsh.w	r3, [r3]
 800133a:	4a58      	ldr	r2, [pc, #352]	; (800149c <Start_GameFlappy+0x240>)
 800133c:	8812      	ldrh	r2, [r2, #0]
 800133e:	4611      	mov	r1, r2
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff fdef 	bl	8000f24 <Draw_Pillar>
						  Draw_Pillar(x2, heigh_pill2);
 8001346:	4b51      	ldr	r3, [pc, #324]	; (800148c <Start_GameFlappy+0x230>)
 8001348:	f9b3 3000 	ldrsh.w	r3, [r3]
 800134c:	4a52      	ldr	r2, [pc, #328]	; (8001498 <Start_GameFlappy+0x23c>)
 800134e:	8812      	ldrh	r2, [r2, #0]
 8001350:	4611      	mov	r1, r2
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff fde6 	bl	8000f24 <Draw_Pillar>

						  if(!Read_IRQ()){
 8001358:	f001 fa12 	bl	8002780 <Read_IRQ>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d10b      	bne.n	800137a <Start_GameFlappy+0x11e>
							  y_bird -= 5;
 8001362:	4b4f      	ldr	r3, [pc, #316]	; (80014a0 <Start_GameFlappy+0x244>)
 8001364:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001368:	b29b      	uxth	r3, r3
 800136a:	3b05      	subs	r3, #5
 800136c:	b29b      	uxth	r3, r3
 800136e:	b21a      	sxth	r2, r3
 8001370:	4b4b      	ldr	r3, [pc, #300]	; (80014a0 <Start_GameFlappy+0x244>)
 8001372:	801a      	strh	r2, [r3, #0]
							  c = 1;
 8001374:	2301      	movs	r3, #1
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	e00b      	b.n	8001392 <Start_GameFlappy+0x136>
						  }
						  else if(c){
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d008      	beq.n	8001392 <Start_GameFlappy+0x136>
							  y_bird += 2;
 8001380:	4b47      	ldr	r3, [pc, #284]	; (80014a0 <Start_GameFlappy+0x244>)
 8001382:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001386:	b29b      	uxth	r3, r3
 8001388:	3302      	adds	r3, #2
 800138a:	b29b      	uxth	r3, r3
 800138c:	b21a      	sxth	r2, r3
 800138e:	4b44      	ldr	r3, [pc, #272]	; (80014a0 <Start_GameFlappy+0x244>)
 8001390:	801a      	strh	r2, [r3, #0]
						  }

						  if(x1 > 70){
 8001392:	4b3d      	ldr	r3, [pc, #244]	; (8001488 <Start_GameFlappy+0x22c>)
 8001394:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001398:	2b46      	cmp	r3, #70	; 0x46
 800139a:	dd0c      	ble.n	80013b6 <Start_GameFlappy+0x15a>
							  x_com = x1;
 800139c:	4b3a      	ldr	r3, [pc, #232]	; (8001488 <Start_GameFlappy+0x22c>)
 800139e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	4b3f      	ldr	r3, [pc, #252]	; (80014a4 <Start_GameFlappy+0x248>)
 80013a6:	801a      	strh	r2, [r3, #0]
							  h_com = heigh_pill1-1;
 80013a8:	4b3c      	ldr	r3, [pc, #240]	; (800149c <Start_GameFlappy+0x240>)
 80013aa:	881b      	ldrh	r3, [r3, #0]
 80013ac:	3b01      	subs	r3, #1
 80013ae:	b29a      	uxth	r2, r3
 80013b0:	4b3d      	ldr	r3, [pc, #244]	; (80014a8 <Start_GameFlappy+0x24c>)
 80013b2:	801a      	strh	r2, [r3, #0]
 80013b4:	e00b      	b.n	80013ce <Start_GameFlappy+0x172>
						  }
						  else{
							  x_com = x2;
 80013b6:	4b35      	ldr	r3, [pc, #212]	; (800148c <Start_GameFlappy+0x230>)
 80013b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013bc:	b29a      	uxth	r2, r3
 80013be:	4b39      	ldr	r3, [pc, #228]	; (80014a4 <Start_GameFlappy+0x248>)
 80013c0:	801a      	strh	r2, [r3, #0]
							  h_com = heigh_pill2-1;
 80013c2:	4b35      	ldr	r3, [pc, #212]	; (8001498 <Start_GameFlappy+0x23c>)
 80013c4:	881b      	ldrh	r3, [r3, #0]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	b29a      	uxth	r2, r3
 80013ca:	4b37      	ldr	r3, [pc, #220]	; (80014a8 <Start_GameFlappy+0x24c>)
 80013cc:	801a      	strh	r2, [r3, #0]
						  }
						  if(((x_com==X_COM)&&((y_bird<=h_com)||(y_bird+HEIGH_BIRD>=(h_com+DISTANCE))))||
 80013ce:	4b35      	ldr	r3, [pc, #212]	; (80014a4 <Start_GameFlappy+0x248>)
 80013d0:	881b      	ldrh	r3, [r3, #0]
 80013d2:	2b88      	cmp	r3, #136	; 0x88
 80013d4:	d10f      	bne.n	80013f6 <Start_GameFlappy+0x19a>
 80013d6:	4b32      	ldr	r3, [pc, #200]	; (80014a0 <Start_GameFlappy+0x244>)
 80013d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013dc:	461a      	mov	r2, r3
 80013de:	4b32      	ldr	r3, [pc, #200]	; (80014a8 <Start_GameFlappy+0x24c>)
 80013e0:	881b      	ldrh	r3, [r3, #0]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	dd42      	ble.n	800146c <Start_GameFlappy+0x210>
 80013e6:	4b30      	ldr	r3, [pc, #192]	; (80014a8 <Start_GameFlappy+0x24c>)
 80013e8:	881b      	ldrh	r3, [r3, #0]
 80013ea:	333c      	adds	r3, #60	; 0x3c
 80013ec:	4a2c      	ldr	r2, [pc, #176]	; (80014a0 <Start_GameFlappy+0x244>)
 80013ee:	f9b2 2000 	ldrsh.w	r2, [r2]
 80013f2:	4293      	cmp	r3, r2
 80013f4:	db3a      	blt.n	800146c <Start_GameFlappy+0x210>
							((y_bird<=h_com+1)&&( ((X_COM>=x_com)&&
 80013f6:	4b2a      	ldr	r3, [pc, #168]	; (80014a0 <Start_GameFlappy+0x244>)
 80013f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013fc:	461a      	mov	r2, r3
 80013fe:	4b2a      	ldr	r3, [pc, #168]	; (80014a8 <Start_GameFlappy+0x24c>)
 8001400:	881b      	ldrh	r3, [r3, #0]
 8001402:	3301      	adds	r3, #1
						  if(((x_com==X_COM)&&((y_bird<=h_com)||(y_bird+HEIGH_BIRD>=(h_com+DISTANCE))))||
 8001404:	429a      	cmp	r2, r3
 8001406:	dc0f      	bgt.n	8001428 <Start_GameFlappy+0x1cc>
							((y_bird<=h_com+1)&&( ((X_COM>=x_com)&&
 8001408:	4b26      	ldr	r3, [pc, #152]	; (80014a4 <Start_GameFlappy+0x248>)
 800140a:	881b      	ldrh	r3, [r3, #0]
 800140c:	2b88      	cmp	r3, #136	; 0x88
 800140e:	d803      	bhi.n	8001418 <Start_GameFlappy+0x1bc>
							(X_COM <= (x_com+WIDTH_PILL)))||((BIRD_X>=x_com)&&(BIRD_X<=(x_com+WIDTH_PILL)))))||
 8001410:	4b24      	ldr	r3, [pc, #144]	; (80014a4 <Start_GameFlappy+0x248>)
 8001412:	881b      	ldrh	r3, [r3, #0]
							((y_bird<=h_com+1)&&( ((X_COM>=x_com)&&
 8001414:	2b5f      	cmp	r3, #95	; 0x5f
 8001416:	d829      	bhi.n	800146c <Start_GameFlappy+0x210>
							(X_COM <= (x_com+WIDTH_PILL)))||((BIRD_X>=x_com)&&(BIRD_X<=(x_com+WIDTH_PILL)))))||
 8001418:	4b22      	ldr	r3, [pc, #136]	; (80014a4 <Start_GameFlappy+0x248>)
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	2b6e      	cmp	r3, #110	; 0x6e
 800141e:	d803      	bhi.n	8001428 <Start_GameFlappy+0x1cc>
 8001420:	4b20      	ldr	r3, [pc, #128]	; (80014a4 <Start_GameFlappy+0x248>)
 8001422:	881b      	ldrh	r3, [r3, #0]
 8001424:	2b45      	cmp	r3, #69	; 0x45
 8001426:	d821      	bhi.n	800146c <Start_GameFlappy+0x210>
							(((y_bird+HEIGH_BIRD)>=(h_com+DISTANCE))&&
 8001428:	4b1f      	ldr	r3, [pc, #124]	; (80014a8 <Start_GameFlappy+0x24c>)
 800142a:	881b      	ldrh	r3, [r3, #0]
 800142c:	333c      	adds	r3, #60	; 0x3c
 800142e:	4a1c      	ldr	r2, [pc, #112]	; (80014a0 <Start_GameFlappy+0x244>)
 8001430:	f9b2 2000 	ldrsh.w	r2, [r2]
							(X_COM <= (x_com+WIDTH_PILL)))||((BIRD_X>=x_com)&&(BIRD_X<=(x_com+WIDTH_PILL)))))||
 8001434:	4293      	cmp	r3, r2
 8001436:	da0f      	bge.n	8001458 <Start_GameFlappy+0x1fc>
							(((X_COM>=x_com)&&(X_COM <= (x_com+WIDTH_PILL)))||((BIRD_X>=x_com)&&
 8001438:	4b1a      	ldr	r3, [pc, #104]	; (80014a4 <Start_GameFlappy+0x248>)
 800143a:	881b      	ldrh	r3, [r3, #0]
							(((y_bird+HEIGH_BIRD)>=(h_com+DISTANCE))&&
 800143c:	2b88      	cmp	r3, #136	; 0x88
 800143e:	d803      	bhi.n	8001448 <Start_GameFlappy+0x1ec>
							(((X_COM>=x_com)&&(X_COM <= (x_com+WIDTH_PILL)))||((BIRD_X>=x_com)&&
 8001440:	4b18      	ldr	r3, [pc, #96]	; (80014a4 <Start_GameFlappy+0x248>)
 8001442:	881b      	ldrh	r3, [r3, #0]
 8001444:	2b5f      	cmp	r3, #95	; 0x5f
 8001446:	d811      	bhi.n	800146c <Start_GameFlappy+0x210>
 8001448:	4b16      	ldr	r3, [pc, #88]	; (80014a4 <Start_GameFlappy+0x248>)
 800144a:	881b      	ldrh	r3, [r3, #0]
 800144c:	2b6e      	cmp	r3, #110	; 0x6e
 800144e:	d803      	bhi.n	8001458 <Start_GameFlappy+0x1fc>
							(BIRD_X<=(x_com+WIDTH_PILL)))))||
 8001450:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <Start_GameFlappy+0x248>)
 8001452:	881b      	ldrh	r3, [r3, #0]
							(((X_COM>=x_com)&&(X_COM <= (x_com+WIDTH_PILL)))||((BIRD_X>=x_com)&&
 8001454:	2b45      	cmp	r3, #69	; 0x45
 8001456:	d809      	bhi.n	800146c <Start_GameFlappy+0x210>
							  ((y_bird+HEIGH_BIRD)>=HEIGH_SCREEN) || ((y_bird+HEIGH_BIRD)<=21)){
 8001458:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <Start_GameFlappy+0x244>)
 800145a:	f9b3 3000 	ldrsh.w	r3, [r3]
							(BIRD_X<=(x_com+WIDTH_PILL)))))||
 800145e:	2bd7      	cmp	r3, #215	; 0xd7
 8001460:	dc04      	bgt.n	800146c <Start_GameFlappy+0x210>
							  ((y_bird+HEIGH_BIRD)>=HEIGH_SCREEN) || ((y_bird+HEIGH_BIRD)<=21)){
 8001462:	4b0f      	ldr	r3, [pc, #60]	; (80014a0 <Start_GameFlappy+0x244>)
 8001464:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001468:	2b02      	cmp	r3, #2
 800146a:	dc1f      	bgt.n	80014ac <Start_GameFlappy+0x250>

							  game_over = YES;
 800146c:	2301      	movs	r3, #1
 800146e:	607b      	str	r3, [r7, #4]
							  Game_Over();
 8001470:	f7ff fdb0 	bl	8000fd4 <Game_Over>
							  break;
 8001474:	bf00      	nop

				  }
		  	  }
			}

}
 8001476:	e07e      	b.n	8001576 <Start_GameFlappy+0x31a>
 8001478:	200007ac 	.word	0x200007ac
 800147c:	40020c00 	.word	0x40020c00
 8001480:	20000796 	.word	0x20000796
 8001484:	20000798 	.word	0x20000798
 8001488:	2000079a 	.word	0x2000079a
 800148c:	2000079c 	.word	0x2000079c
 8001490:	88888889 	.word	0x88888889
 8001494:	200006f8 	.word	0x200006f8
 8001498:	200007a0 	.word	0x200007a0
 800149c:	2000079e 	.word	0x2000079e
 80014a0:	200007a2 	.word	0x200007a2
 80014a4:	200007a4 	.word	0x200007a4
 80014a8:	200007a6 	.word	0x200007a6
						  if(x1 == SCORED || x2 == SCORED){
 80014ac:	4b34      	ldr	r3, [pc, #208]	; (8001580 <Start_GameFlappy+0x324>)
 80014ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014b2:	2b45      	cmp	r3, #69	; 0x45
 80014b4:	d004      	beq.n	80014c0 <Start_GameFlappy+0x264>
 80014b6:	4b33      	ldr	r3, [pc, #204]	; (8001584 <Start_GameFlappy+0x328>)
 80014b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014bc:	2b45      	cmp	r3, #69	; 0x45
 80014be:	d105      	bne.n	80014cc <Start_GameFlappy+0x270>
							  score += 1;
 80014c0:	4b31      	ldr	r3, [pc, #196]	; (8001588 <Start_GameFlappy+0x32c>)
 80014c2:	881b      	ldrh	r3, [r3, #0]
 80014c4:	3301      	adds	r3, #1
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	4b2f      	ldr	r3, [pc, #188]	; (8001588 <Start_GameFlappy+0x32c>)
 80014ca:	801a      	strh	r2, [r3, #0]
						  if(c){
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d018      	beq.n	8001504 <Start_GameFlappy+0x2a8>
							  Bird_Fly(y_bird);
 80014d2:	4b2e      	ldr	r3, [pc, #184]	; (800158c <Start_GameFlappy+0x330>)
 80014d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014d8:	b29b      	uxth	r3, r3
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff fd58 	bl	8000f90 <Bird_Fly>
							  x1--;
 80014e0:	4b27      	ldr	r3, [pc, #156]	; (8001580 <Start_GameFlappy+0x324>)
 80014e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	3b01      	subs	r3, #1
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	b21a      	sxth	r2, r3
 80014ee:	4b24      	ldr	r3, [pc, #144]	; (8001580 <Start_GameFlappy+0x324>)
 80014f0:	801a      	strh	r2, [r3, #0]
							  x2--;
 80014f2:	4b24      	ldr	r3, [pc, #144]	; (8001584 <Start_GameFlappy+0x328>)
 80014f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	3b01      	subs	r3, #1
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	b21a      	sxth	r2, r3
 8001500:	4b20      	ldr	r3, [pc, #128]	; (8001584 <Start_GameFlappy+0x328>)
 8001502:	801a      	strh	r2, [r3, #0]
						  if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9) == GPIO_PIN_RESET) {
 8001504:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001508:	4821      	ldr	r0, [pc, #132]	; (8001590 <Start_GameFlappy+0x334>)
 800150a:	f003 fa95 	bl	8004a38 <HAL_GPIO_ReadPin>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d127      	bne.n	8001564 <Start_GameFlappy+0x308>
							  HAL_Delay(100); // รอสั�?ครู่เพื่อป้อง�?ัน�?าร�?ดซ้ำ
 8001514:	2064      	movs	r0, #100	; 0x64
 8001516:	f002 f8a7 	bl	8003668 <HAL_Delay>
							  if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9) == GPIO_PIN_RESET) {
 800151a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800151e:	481c      	ldr	r0, [pc, #112]	; (8001590 <Start_GameFlappy+0x334>)
 8001520:	f003 fa8a 	bl	8004a38 <HAL_GPIO_ReadPin>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d11f      	bne.n	800156a <Start_GameFlappy+0x30e>
								  if (button_state == 0) {
 800152a:	4b1a      	ldr	r3, [pc, #104]	; (8001594 <Start_GameFlappy+0x338>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d11b      	bne.n	800156a <Start_GameFlappy+0x30e>
									  button_state = 1;
 8001532:	4b18      	ldr	r3, [pc, #96]	; (8001594 <Start_GameFlappy+0x338>)
 8001534:	2201      	movs	r2, #1
 8001536:	601a      	str	r2, [r3, #0]
									  current_delay = delay_levels[delay_index];
 8001538:	4b17      	ldr	r3, [pc, #92]	; (8001598 <Start_GameFlappy+0x33c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a17      	ldr	r2, [pc, #92]	; (800159c <Start_GameFlappy+0x340>)
 800153e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001542:	4a17      	ldr	r2, [pc, #92]	; (80015a0 <Start_GameFlappy+0x344>)
 8001544:	6013      	str	r3, [r2, #0]
									  delay_index = (delay_index + 1) % 3; // วนลูประหว่าง 0, 1, 2
 8001546:	4b14      	ldr	r3, [pc, #80]	; (8001598 <Start_GameFlappy+0x33c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	1c59      	adds	r1, r3, #1
 800154c:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <Start_GameFlappy+0x348>)
 800154e:	fb83 3201 	smull	r3, r2, r3, r1
 8001552:	17cb      	asrs	r3, r1, #31
 8001554:	1ad2      	subs	r2, r2, r3
 8001556:	4613      	mov	r3, r2
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	4413      	add	r3, r2
 800155c:	1aca      	subs	r2, r1, r3
 800155e:	4b0e      	ldr	r3, [pc, #56]	; (8001598 <Start_GameFlappy+0x33c>)
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	e002      	b.n	800156a <Start_GameFlappy+0x30e>
							  button_state = 0;
 8001564:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <Start_GameFlappy+0x338>)
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
						  HAL_Delay(current_delay); // ใช้ค่า delay ที่ถู�?เปลี่ยน�?ปลง
 800156a:	4b0d      	ldr	r3, [pc, #52]	; (80015a0 <Start_GameFlappy+0x344>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f002 f87a 	bl	8003668 <HAL_Delay>
						  if(x1 == 70){
 8001574:	e6a6      	b.n	80012c4 <Start_GameFlappy+0x68>
}
 8001576:	bf00      	nop
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	2000079a 	.word	0x2000079a
 8001584:	2000079c 	.word	0x2000079c
 8001588:	20000796 	.word	0x20000796
 800158c:	200007a2 	.word	0x200007a2
 8001590:	40021000 	.word	0x40021000
 8001594:	200007b4 	.word	0x200007b4
 8001598:	20000410 	.word	0x20000410
 800159c:	20000404 	.word	0x20000404
 80015a0:	20000400 	.word	0x20000400
 80015a4:	55555556 	.word	0x55555556

080015a8 <WelcomePingpong>:

/*-----------------------------------END FLAPPY BIRD-----------------------------------------------------------*/

/*------------------------------------PINGPONG-----------------------------------------------------------------*/

void WelcomePingpong(){
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af02      	add	r7, sp, #8
	 ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 80015ae:	2003      	movs	r0, #3
 80015b0:	f001 fc4a 	bl	8002e48 <ILI9341_Set_Rotation>
	 ILI9341_Fill_Screen(WHITE);
 80015b4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80015b8:	f001 fe50 	bl	800325c <ILI9341_Fill_Screen>
	 ILI9341_Draw_Text("PingPong Game",38, 40,BLACK,3,WHITE);
 80015bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015c0:	9301      	str	r3, [sp, #4]
 80015c2:	2303      	movs	r3, #3
 80015c4:	9300      	str	r3, [sp, #0]
 80015c6:	2300      	movs	r3, #0
 80015c8:	2228      	movs	r2, #40	; 0x28
 80015ca:	2126      	movs	r1, #38	; 0x26
 80015cc:	4814      	ldr	r0, [pc, #80]	; (8001620 <WelcomePingpong+0x78>)
 80015ce:	f001 fa91 	bl	8002af4 <ILI9341_Draw_Text>
//	 ILI9341_Draw_Text("Press Yellow",95, 140,BLACK,2,WHITE);
//	 ILI9341_Draw_Text("to start!",110, 170, BLACK, 2, WHITE);

	 ILI9341_Draw_Filled_Circle(80, 180, 10, YELLOW);
 80015d2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80015d6:	220a      	movs	r2, #10
 80015d8:	21b4      	movs	r1, #180	; 0xb4
 80015da:	2050      	movs	r0, #80	; 0x50
 80015dc:	f001 f909 	bl	80027f2 <ILI9341_Draw_Filled_Circle>
	ILI9341_Draw_Text(":start game", 100, 170, BLACK, 2, WHITE);
 80015e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015e4:	9301      	str	r3, [sp, #4]
 80015e6:	2302      	movs	r3, #2
 80015e8:	9300      	str	r3, [sp, #0]
 80015ea:	2300      	movs	r3, #0
 80015ec:	22aa      	movs	r2, #170	; 0xaa
 80015ee:	2164      	movs	r1, #100	; 0x64
 80015f0:	480c      	ldr	r0, [pc, #48]	; (8001624 <WelcomePingpong+0x7c>)
 80015f2:	f001 fa7f 	bl	8002af4 <ILI9341_Draw_Text>

	ILI9341_Draw_Filled_Circle(80, 210, 10, DARKGREEN);
 80015f6:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 80015fa:	220a      	movs	r2, #10
 80015fc:	21d2      	movs	r1, #210	; 0xd2
 80015fe:	2050      	movs	r0, #80	; 0x50
 8001600:	f001 f8f7 	bl	80027f2 <ILI9341_Draw_Filled_Circle>
	ILI9341_Draw_Text(":pause game", 100, 200, BLACK, 2, WHITE);
 8001604:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001608:	9301      	str	r3, [sp, #4]
 800160a:	2302      	movs	r3, #2
 800160c:	9300      	str	r3, [sp, #0]
 800160e:	2300      	movs	r3, #0
 8001610:	22c8      	movs	r2, #200	; 0xc8
 8001612:	2164      	movs	r1, #100	; 0x64
 8001614:	4804      	ldr	r0, [pc, #16]	; (8001628 <WelcomePingpong+0x80>)
 8001616:	f001 fa6d 	bl	8002af4 <ILI9341_Draw_Text>
}
 800161a:	bf00      	nop
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	0800b0b4 	.word	0x0800b0b4
 8001624:	0800b064 	.word	0x0800b064
 8001628:	0800b0c4 	.word	0x0800b0c4

0800162c <StartGamePingpong>:

void StartGamePingpong(){
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
	if (checkstartpong == 0){
 8001630:	4b41      	ldr	r3, [pc, #260]	; (8001738 <StartGamePingpong+0x10c>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d104      	bne.n	8001642 <StartGamePingpong+0x16>
		WelcomePingpong();
 8001638:	f7ff ffb6 	bl	80015a8 <WelcomePingpong>
		checkstartpong = 1;
 800163c:	4b3e      	ldr	r3, [pc, #248]	; (8001738 <StartGamePingpong+0x10c>)
 800163e:	2201      	movs	r2, #1
 8001640:	601a      	str	r2, [r3, #0]
	}

	if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4) == GPIO_PIN_RESET){
 8001642:	2110      	movs	r1, #16
 8001644:	483d      	ldr	r0, [pc, #244]	; (800173c <StartGamePingpong+0x110>)
 8001646:	f003 f9f7 	bl	8004a38 <HAL_GPIO_ReadPin>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d14d      	bne.n	80016ec <StartGamePingpong+0xc0>


		ILI9341_Fill_Screen(WHITE);
 8001650:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001654:	f001 fe02 	bl	800325c <ILI9341_Fill_Screen>
		reset_game = !reset_game;
 8001658:	4b39      	ldr	r3, [pc, #228]	; (8001740 <StartGamePingpong+0x114>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	bf14      	ite	ne
 8001660:	2301      	movne	r3, #1
 8001662:	2300      	moveq	r3, #0
 8001664:	b2db      	uxtb	r3, r3
 8001666:	f083 0301 	eor.w	r3, r3, #1
 800166a:	b2db      	uxtb	r3, r3
 800166c:	f003 0301 	and.w	r3, r3, #1
 8001670:	b2da      	uxtb	r2, r3
 8001672:	4b33      	ldr	r3, [pc, #204]	; (8001740 <StartGamePingpong+0x114>)
 8001674:	701a      	strb	r2, [r3, #0]

		player_1_score = 0;
 8001676:	4b33      	ldr	r3, [pc, #204]	; (8001744 <StartGamePingpong+0x118>)
 8001678:	2200      	movs	r2, #0
 800167a:	701a      	strb	r2, [r3, #0]
		player_2_score = 0;
 800167c:	4b32      	ldr	r3, [pc, #200]	; (8001748 <StartGamePingpong+0x11c>)
 800167e:	2200      	movs	r2, #0
 8001680:	701a      	strb	r2, [r3, #0]

		paddle_1_x1 = 60 ;
 8001682:	4b32      	ldr	r3, [pc, #200]	; (800174c <StartGamePingpong+0x120>)
 8001684:	223c      	movs	r2, #60	; 0x3c
 8001686:	701a      	strb	r2, [r3, #0]
		paddle_1_x2 = 65 ;
 8001688:	4b31      	ldr	r3, [pc, #196]	; (8001750 <StartGamePingpong+0x124>)
 800168a:	2241      	movs	r2, #65	; 0x41
 800168c:	701a      	strb	r2, [r3, #0]
		paddle_1_y1 = 78 ;
 800168e:	4b31      	ldr	r3, [pc, #196]	; (8001754 <StartGamePingpong+0x128>)
 8001690:	224e      	movs	r2, #78	; 0x4e
 8001692:	701a      	strb	r2, [r3, #0]
		paddle_1_y2 = 133;
 8001694:	4b30      	ldr	r3, [pc, #192]	; (8001758 <StartGamePingpong+0x12c>)
 8001696:	2285      	movs	r2, #133	; 0x85
 8001698:	701a      	strb	r2, [r3, #0]

		paddle_2_x1 = 240;
 800169a:	4b30      	ldr	r3, [pc, #192]	; (800175c <StartGamePingpong+0x130>)
 800169c:	22f0      	movs	r2, #240	; 0xf0
 800169e:	701a      	strb	r2, [r3, #0]
		paddle_2_x2 = 245;
 80016a0:	4b2f      	ldr	r3, [pc, #188]	; (8001760 <StartGamePingpong+0x134>)
 80016a2:	22f5      	movs	r2, #245	; 0xf5
 80016a4:	701a      	strb	r2, [r3, #0]
		paddle_2_y1 = 78 ;
 80016a6:	4b2f      	ldr	r3, [pc, #188]	; (8001764 <StartGamePingpong+0x138>)
 80016a8:	224e      	movs	r2, #78	; 0x4e
 80016aa:	701a      	strb	r2, [r3, #0]
		paddle_2_y2 = 133;
 80016ac:	4b2e      	ldr	r3, [pc, #184]	; (8001768 <StartGamePingpong+0x13c>)
 80016ae:	2285      	movs	r2, #133	; 0x85
 80016b0:	701a      	strb	r2, [r3, #0]

		ball_x = 150;
 80016b2:	4b2e      	ldr	r3, [pc, #184]	; (800176c <StartGamePingpong+0x140>)
 80016b4:	2296      	movs	r2, #150	; 0x96
 80016b6:	701a      	strb	r2, [r3, #0]
		ball_y = 100;
 80016b8:	4b2d      	ldr	r3, [pc, #180]	; (8001770 <StartGamePingpong+0x144>)
 80016ba:	2264      	movs	r2, #100	; 0x64
 80016bc:	701a      	strb	r2, [r3, #0]

		  // Toggle game_running
		  game_running = !game_running;
 80016be:	4b2d      	ldr	r3, [pc, #180]	; (8001774 <StartGamePingpong+0x148>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	bf14      	ite	ne
 80016c6:	2301      	movne	r3, #1
 80016c8:	2300      	moveq	r3, #0
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	f083 0301 	eor.w	r3, r3, #1
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	4b26      	ldr	r3, [pc, #152]	; (8001774 <StartGamePingpong+0x148>)
 80016da:	701a      	strb	r2, [r3, #0]
		  // Wait for button release
		  while (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_3) == GPIO_PIN_RESET) {}
 80016dc:	bf00      	nop
 80016de:	2108      	movs	r1, #8
 80016e0:	4816      	ldr	r0, [pc, #88]	; (800173c <StartGamePingpong+0x110>)
 80016e2:	f003 f9a9 	bl	8004a38 <HAL_GPIO_ReadPin>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d0f8      	beq.n	80016de <StartGamePingpong+0xb2>
	  }
		// Check if button is pressed
		if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_3) == GPIO_PIN_RESET) {
 80016ec:	2108      	movs	r1, #8
 80016ee:	4813      	ldr	r0, [pc, #76]	; (800173c <StartGamePingpong+0x110>)
 80016f0:	f003 f9a2 	bl	8004a38 <HAL_GPIO_ReadPin>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d116      	bne.n	8001728 <StartGamePingpong+0xfc>
			// Toggle game_running
			game_running = !game_running;
 80016fa:	4b1e      	ldr	r3, [pc, #120]	; (8001774 <StartGamePingpong+0x148>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	bf14      	ite	ne
 8001702:	2301      	movne	r3, #1
 8001704:	2300      	moveq	r3, #0
 8001706:	b2db      	uxtb	r3, r3
 8001708:	f083 0301 	eor.w	r3, r3, #1
 800170c:	b2db      	uxtb	r3, r3
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	b2da      	uxtb	r2, r3
 8001714:	4b17      	ldr	r3, [pc, #92]	; (8001774 <StartGamePingpong+0x148>)
 8001716:	701a      	strb	r2, [r3, #0]
			// Wait for button release
		while (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_3) == GPIO_PIN_RESET) {}
 8001718:	bf00      	nop
 800171a:	2108      	movs	r1, #8
 800171c:	4807      	ldr	r0, [pc, #28]	; (800173c <StartGamePingpong+0x110>)
 800171e:	f003 f98b 	bl	8004a38 <HAL_GPIO_ReadPin>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d0f8      	beq.n	800171a <StartGamePingpong+0xee>
		}

		// If game is running, call game function
		if (game_running) {
 8001728:	4b12      	ldr	r3, [pc, #72]	; (8001774 <StartGamePingpong+0x148>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <StartGamePingpong+0x108>
			PingPongGame();
 8001730:	f000 f822 	bl	8001778 <PingPongGame>
		}
}
 8001734:	bf00      	nop
 8001736:	bd80      	pop	{r7, pc}
 8001738:	200007b0 	.word	0x200007b0
 800173c:	40020c00 	.word	0x40020c00
 8001740:	20000721 	.word	0x20000721
 8001744:	20000788 	.word	0x20000788
 8001748:	20000789 	.word	0x20000789
 800174c:	2000000f 	.word	0x2000000f
 8001750:	20000010 	.word	0x20000010
 8001754:	20000011 	.word	0x20000011
 8001758:	20000012 	.word	0x20000012
 800175c:	20000013 	.word	0x20000013
 8001760:	20000014 	.word	0x20000014
 8001764:	20000015 	.word	0x20000015
 8001768:	20000016 	.word	0x20000016
 800176c:	20000017 	.word	0x20000017
 8001770:	20000018 	.word	0x20000018
 8001774:	20000720 	.word	0x20000720

08001778 <PingPongGame>:
void PingPongGame(){
 8001778:	b590      	push	{r4, r7, lr}
 800177a:	b083      	sub	sp, #12
 800177c:	af02      	add	r7, sp, #8
	  //DEBUG TERMINAL
	  adc_value = HAL_ADC_GetValue(&hadc1);
 800177e:	484d      	ldr	r0, [pc, #308]	; (80018b4 <PingPongGame+0x13c>)
 8001780:	f002 f8a8 	bl	80038d4 <HAL_ADC_GetValue>
 8001784:	4603      	mov	r3, r0
 8001786:	461a      	mov	r2, r3
 8001788:	4b4b      	ldr	r3, [pc, #300]	; (80018b8 <PingPongGame+0x140>)
 800178a:	601a      	str	r2, [r3, #0]
	  adc_value_2 = HAL_ADC_GetValue(&hadc2);
 800178c:	484b      	ldr	r0, [pc, #300]	; (80018bc <PingPongGame+0x144>)
 800178e:	f002 f8a1 	bl	80038d4 <HAL_ADC_GetValue>
 8001792:	4603      	mov	r3, r0
 8001794:	461a      	mov	r2, r3
 8001796:	4b4a      	ldr	r3, [pc, #296]	; (80018c0 <PingPongGame+0x148>)
 8001798:	601a      	str	r2, [r3, #0]
	  display(adc_value, adc_value_2);
 800179a:	4b47      	ldr	r3, [pc, #284]	; (80018b8 <PingPongGame+0x140>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a48      	ldr	r2, [pc, #288]	; (80018c0 <PingPongGame+0x148>)
 80017a0:	6812      	ldr	r2, [r2, #0]
 80017a2:	4611      	mov	r1, r2
 80017a4:	4618      	mov	r0, r3
 80017a6:	f000 fae5 	bl	8001d74 <display>
//	  HAL_UART_Transmit(&huart3, (uint32_t*)&str, sizeof(str), 100);
//	  HAL_UART_Transmit(&huart3, (uint8_t*)str1, strlen(str1), 1000);
	  HAL_UART_Transmit(&huart3, (uint32_t*)str3, strlen(str3), 100);
 80017aa:	4846      	ldr	r0, [pc, #280]	; (80018c4 <PingPongGame+0x14c>)
 80017ac:	f7fe fd98 	bl	80002e0 <strlen>
 80017b0:	4603      	mov	r3, r0
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	2364      	movs	r3, #100	; 0x64
 80017b6:	4943      	ldr	r1, [pc, #268]	; (80018c4 <PingPongGame+0x14c>)
 80017b8:	4843      	ldr	r0, [pc, #268]	; (80018c8 <PingPongGame+0x150>)
 80017ba:	f005 fdd3 	bl	8007364 <HAL_UART_Transmit>




		//check edge for paddle
		if(paddle_1_y1 <= 1){
 80017be:	4b43      	ldr	r3, [pc, #268]	; (80018cc <PingPongGame+0x154>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d806      	bhi.n	80017d4 <PingPongGame+0x5c>
			paddle_1_y1 = 1;
 80017c6:	4b41      	ldr	r3, [pc, #260]	; (80018cc <PingPongGame+0x154>)
 80017c8:	2201      	movs	r2, #1
 80017ca:	701a      	strb	r2, [r3, #0]
			paddle_1_y2 = 56;
 80017cc:	4b40      	ldr	r3, [pc, #256]	; (80018d0 <PingPongGame+0x158>)
 80017ce:	2238      	movs	r2, #56	; 0x38
 80017d0:	701a      	strb	r2, [r3, #0]
 80017d2:	e009      	b.n	80017e8 <PingPongGame+0x70>
		}else if (paddle_1_y2 >= 240){
 80017d4:	4b3e      	ldr	r3, [pc, #248]	; (80018d0 <PingPongGame+0x158>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2bef      	cmp	r3, #239	; 0xef
 80017da:	d905      	bls.n	80017e8 <PingPongGame+0x70>
			paddle_1_y1 = 185;
 80017dc:	4b3b      	ldr	r3, [pc, #236]	; (80018cc <PingPongGame+0x154>)
 80017de:	22b9      	movs	r2, #185	; 0xb9
 80017e0:	701a      	strb	r2, [r3, #0]
			paddle_1_y2 = 240;
 80017e2:	4b3b      	ldr	r3, [pc, #236]	; (80018d0 <PingPongGame+0x158>)
 80017e4:	22f0      	movs	r2, #240	; 0xf0
 80017e6:	701a      	strb	r2, [r3, #0]
		}if(paddle_2_y1 <= 1){
 80017e8:	4b3a      	ldr	r3, [pc, #232]	; (80018d4 <PingPongGame+0x15c>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d806      	bhi.n	80017fe <PingPongGame+0x86>
			paddle_2_y1 = 1;
 80017f0:	4b38      	ldr	r3, [pc, #224]	; (80018d4 <PingPongGame+0x15c>)
 80017f2:	2201      	movs	r2, #1
 80017f4:	701a      	strb	r2, [r3, #0]
			paddle_2_y2 = 56;
 80017f6:	4b38      	ldr	r3, [pc, #224]	; (80018d8 <PingPongGame+0x160>)
 80017f8:	2238      	movs	r2, #56	; 0x38
 80017fa:	701a      	strb	r2, [r3, #0]
 80017fc:	e009      	b.n	8001812 <PingPongGame+0x9a>
		}else if(paddle_2_y2 >= 240){
 80017fe:	4b36      	ldr	r3, [pc, #216]	; (80018d8 <PingPongGame+0x160>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	2bef      	cmp	r3, #239	; 0xef
 8001804:	d905      	bls.n	8001812 <PingPongGame+0x9a>
			paddle_2_y1 = 185;
 8001806:	4b33      	ldr	r3, [pc, #204]	; (80018d4 <PingPongGame+0x15c>)
 8001808:	22b9      	movs	r2, #185	; 0xb9
 800180a:	701a      	strb	r2, [r3, #0]
			paddle_2_y2 = 240;
 800180c:	4b32      	ldr	r3, [pc, #200]	; (80018d8 <PingPongGame+0x160>)
 800180e:	22f0      	movs	r2, #240	; 0xf0
 8001810:	701a      	strb	r2, [r3, #0]
		}
	  	//Move Paddle
		if ( adc_value >= 0 && adc_value <= 2000) {
 8001812:	4b29      	ldr	r3, [pc, #164]	; (80018b8 <PingPongGame+0x140>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	db15      	blt.n	8001846 <PingPongGame+0xce>
 800181a:	4b27      	ldr	r3, [pc, #156]	; (80018b8 <PingPongGame+0x140>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001822:	dc10      	bgt.n	8001846 <PingPongGame+0xce>
			if (paddle_1_y1 > 0) {
 8001824:	4b29      	ldr	r3, [pc, #164]	; (80018cc <PingPongGame+0x154>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d027      	beq.n	800187c <PingPongGame+0x104>
				paddle_1_y1--;
 800182c:	4b27      	ldr	r3, [pc, #156]	; (80018cc <PingPongGame+0x154>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	3b01      	subs	r3, #1
 8001832:	b2da      	uxtb	r2, r3
 8001834:	4b25      	ldr	r3, [pc, #148]	; (80018cc <PingPongGame+0x154>)
 8001836:	701a      	strb	r2, [r3, #0]
				paddle_1_y2--;
 8001838:	4b25      	ldr	r3, [pc, #148]	; (80018d0 <PingPongGame+0x158>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	3b01      	subs	r3, #1
 800183e:	b2da      	uxtb	r2, r3
 8001840:	4b23      	ldr	r3, [pc, #140]	; (80018d0 <PingPongGame+0x158>)
 8001842:	701a      	strb	r2, [r3, #0]
			if (paddle_1_y1 > 0) {
 8001844:	e01a      	b.n	800187c <PingPongGame+0x104>
			}
		} else if (adc_value >= 2800 && adc_value <= 2890) {
 8001846:	4b1c      	ldr	r3, [pc, #112]	; (80018b8 <PingPongGame+0x140>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 800184e:	db15      	blt.n	800187c <PingPongGame+0x104>
 8001850:	4b19      	ldr	r3, [pc, #100]	; (80018b8 <PingPongGame+0x140>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f640 324a 	movw	r2, #2890	; 0xb4a
 8001858:	4293      	cmp	r3, r2
 800185a:	dc0f      	bgt.n	800187c <PingPongGame+0x104>
			if (paddle_1_y2 < 240) {
 800185c:	4b1c      	ldr	r3, [pc, #112]	; (80018d0 <PingPongGame+0x158>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2bef      	cmp	r3, #239	; 0xef
 8001862:	d80b      	bhi.n	800187c <PingPongGame+0x104>
				paddle_1_y1++;
 8001864:	4b19      	ldr	r3, [pc, #100]	; (80018cc <PingPongGame+0x154>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	3301      	adds	r3, #1
 800186a:	b2da      	uxtb	r2, r3
 800186c:	4b17      	ldr	r3, [pc, #92]	; (80018cc <PingPongGame+0x154>)
 800186e:	701a      	strb	r2, [r3, #0]
				paddle_1_y2++;
 8001870:	4b17      	ldr	r3, [pc, #92]	; (80018d0 <PingPongGame+0x158>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	3301      	adds	r3, #1
 8001876:	b2da      	uxtb	r2, r3
 8001878:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <PingPongGame+0x158>)
 800187a:	701a      	strb	r2, [r3, #0]
			}
		}

		if (adc_value_2 >= 2800 && adc_value_2 <= 2890) {
 800187c:	4b10      	ldr	r3, [pc, #64]	; (80018c0 <PingPongGame+0x148>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 8001884:	db2a      	blt.n	80018dc <PingPongGame+0x164>
 8001886:	4b0e      	ldr	r3, [pc, #56]	; (80018c0 <PingPongGame+0x148>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f640 324a 	movw	r2, #2890	; 0xb4a
 800188e:	4293      	cmp	r3, r2
 8001890:	dc24      	bgt.n	80018dc <PingPongGame+0x164>
			if (paddle_2_y1 > 0) {
 8001892:	4b10      	ldr	r3, [pc, #64]	; (80018d4 <PingPongGame+0x15c>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d039      	beq.n	800190e <PingPongGame+0x196>
				paddle_2_y1--;
 800189a:	4b0e      	ldr	r3, [pc, #56]	; (80018d4 <PingPongGame+0x15c>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	3b01      	subs	r3, #1
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <PingPongGame+0x15c>)
 80018a4:	701a      	strb	r2, [r3, #0]
				paddle_2_y2--;
 80018a6:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <PingPongGame+0x160>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	3b01      	subs	r3, #1
 80018ac:	b2da      	uxtb	r2, r3
 80018ae:	4b0a      	ldr	r3, [pc, #40]	; (80018d8 <PingPongGame+0x160>)
 80018b0:	701a      	strb	r2, [r3, #0]
			if (paddle_2_y1 > 0) {
 80018b2:	e02c      	b.n	800190e <PingPongGame+0x196>
 80018b4:	20000608 	.word	0x20000608
 80018b8:	20000718 	.word	0x20000718
 80018bc:	20000650 	.word	0x20000650
 80018c0:	2000071c 	.word	0x2000071c
 80018c4:	20000000 	.word	0x20000000
 80018c8:	20000950 	.word	0x20000950
 80018cc:	20000011 	.word	0x20000011
 80018d0:	20000012 	.word	0x20000012
 80018d4:	20000015 	.word	0x20000015
 80018d8:	20000016 	.word	0x20000016
			}
		} else if (adc_value_2 >= 0 && adc_value_2 <= 2000) {
 80018dc:	4b53      	ldr	r3, [pc, #332]	; (8001a2c <PingPongGame+0x2b4>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	db14      	blt.n	800190e <PingPongGame+0x196>
 80018e4:	4b51      	ldr	r3, [pc, #324]	; (8001a2c <PingPongGame+0x2b4>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80018ec:	dc0f      	bgt.n	800190e <PingPongGame+0x196>
			if (paddle_2_y2 < 240) {
 80018ee:	4b50      	ldr	r3, [pc, #320]	; (8001a30 <PingPongGame+0x2b8>)
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	2bef      	cmp	r3, #239	; 0xef
 80018f4:	d80b      	bhi.n	800190e <PingPongGame+0x196>
				paddle_2_y1++;
 80018f6:	4b4f      	ldr	r3, [pc, #316]	; (8001a34 <PingPongGame+0x2bc>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	3301      	adds	r3, #1
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	4b4d      	ldr	r3, [pc, #308]	; (8001a34 <PingPongGame+0x2bc>)
 8001900:	701a      	strb	r2, [r3, #0]
				paddle_2_y2++;
 8001902:	4b4b      	ldr	r3, [pc, #300]	; (8001a30 <PingPongGame+0x2b8>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	3301      	adds	r3, #1
 8001908:	b2da      	uxtb	r2, r3
 800190a:	4b49      	ldr	r3, [pc, #292]	; (8001a30 <PingPongGame+0x2b8>)
 800190c:	701a      	strb	r2, [r3, #0]
//			}
//		}



		ILI9341_Draw_Filled_Rectangle_Coord(paddle_1_x1, paddle_1_y1, paddle_1_x2, paddle_1_y2, RED);
 800190e:	4b4a      	ldr	r3, [pc, #296]	; (8001a38 <PingPongGame+0x2c0>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	b298      	uxth	r0, r3
 8001914:	4b49      	ldr	r3, [pc, #292]	; (8001a3c <PingPongGame+0x2c4>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	b299      	uxth	r1, r3
 800191a:	4b49      	ldr	r3, [pc, #292]	; (8001a40 <PingPongGame+0x2c8>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	b29a      	uxth	r2, r3
 8001920:	4b48      	ldr	r3, [pc, #288]	; (8001a44 <PingPongGame+0x2cc>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	b29b      	uxth	r3, r3
 8001926:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 800192a:	9400      	str	r4, [sp, #0]
 800192c:	f000 ffe9 	bl	8002902 <ILI9341_Draw_Filled_Rectangle_Coord>
		ILI9341_Draw_Filled_Rectangle_Coord(oldpaddle_1_x1, oldpaddle_1_y1, oldpaddle_1_x2, oldpaddle_1_y2, WHITE);
 8001930:	4b45      	ldr	r3, [pc, #276]	; (8001a48 <PingPongGame+0x2d0>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	b298      	uxth	r0, r3
 8001936:	4b45      	ldr	r3, [pc, #276]	; (8001a4c <PingPongGame+0x2d4>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	b299      	uxth	r1, r3
 800193c:	4b44      	ldr	r3, [pc, #272]	; (8001a50 <PingPongGame+0x2d8>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	b29a      	uxth	r2, r3
 8001942:	4b44      	ldr	r3, [pc, #272]	; (8001a54 <PingPongGame+0x2dc>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	b29b      	uxth	r3, r3
 8001948:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800194c:	9400      	str	r4, [sp, #0]
 800194e:	f000 ffd8 	bl	8002902 <ILI9341_Draw_Filled_Rectangle_Coord>
		ILI9341_Draw_Filled_Rectangle_Coord(paddle_1_x1, paddle_1_y1, paddle_1_x2, paddle_1_y2, RED);
 8001952:	4b39      	ldr	r3, [pc, #228]	; (8001a38 <PingPongGame+0x2c0>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	b298      	uxth	r0, r3
 8001958:	4b38      	ldr	r3, [pc, #224]	; (8001a3c <PingPongGame+0x2c4>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	b299      	uxth	r1, r3
 800195e:	4b38      	ldr	r3, [pc, #224]	; (8001a40 <PingPongGame+0x2c8>)
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	b29a      	uxth	r2, r3
 8001964:	4b37      	ldr	r3, [pc, #220]	; (8001a44 <PingPongGame+0x2cc>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	b29b      	uxth	r3, r3
 800196a:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 800196e:	9400      	str	r4, [sp, #0]
 8001970:	f000 ffc7 	bl	8002902 <ILI9341_Draw_Filled_Rectangle_Coord>

		oldpaddle_1_x1 = paddle_1_x1;
 8001974:	4b30      	ldr	r3, [pc, #192]	; (8001a38 <PingPongGame+0x2c0>)
 8001976:	781a      	ldrb	r2, [r3, #0]
 8001978:	4b33      	ldr	r3, [pc, #204]	; (8001a48 <PingPongGame+0x2d0>)
 800197a:	701a      	strb	r2, [r3, #0]
		oldpaddle_1_y1 = paddle_1_y1;
 800197c:	4b2f      	ldr	r3, [pc, #188]	; (8001a3c <PingPongGame+0x2c4>)
 800197e:	781a      	ldrb	r2, [r3, #0]
 8001980:	4b32      	ldr	r3, [pc, #200]	; (8001a4c <PingPongGame+0x2d4>)
 8001982:	701a      	strb	r2, [r3, #0]
		oldpaddle_1_x2 = paddle_1_x2;
 8001984:	4b2e      	ldr	r3, [pc, #184]	; (8001a40 <PingPongGame+0x2c8>)
 8001986:	781a      	ldrb	r2, [r3, #0]
 8001988:	4b31      	ldr	r3, [pc, #196]	; (8001a50 <PingPongGame+0x2d8>)
 800198a:	701a      	strb	r2, [r3, #0]
		oldpaddle_1_y2 = paddle_1_y2;
 800198c:	4b2d      	ldr	r3, [pc, #180]	; (8001a44 <PingPongGame+0x2cc>)
 800198e:	781a      	ldrb	r2, [r3, #0]
 8001990:	4b30      	ldr	r3, [pc, #192]	; (8001a54 <PingPongGame+0x2dc>)
 8001992:	701a      	strb	r2, [r3, #0]

		//DRAW
		ILI9341_Draw_Filled_Rectangle_Coord(paddle_2_x1, paddle_2_y1, paddle_2_x2, paddle_2_y2, BLUE);
 8001994:	4b30      	ldr	r3, [pc, #192]	; (8001a58 <PingPongGame+0x2e0>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	b298      	uxth	r0, r3
 800199a:	4b26      	ldr	r3, [pc, #152]	; (8001a34 <PingPongGame+0x2bc>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	b299      	uxth	r1, r3
 80019a0:	4b2e      	ldr	r3, [pc, #184]	; (8001a5c <PingPongGame+0x2e4>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	4b22      	ldr	r3, [pc, #136]	; (8001a30 <PingPongGame+0x2b8>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	241f      	movs	r4, #31
 80019ae:	9400      	str	r4, [sp, #0]
 80019b0:	f000 ffa7 	bl	8002902 <ILI9341_Draw_Filled_Rectangle_Coord>
		ILI9341_Draw_Filled_Rectangle_Coord(oldpaddle_2_x1, oldpaddle_2_y1, oldpaddle_2_x2, oldpaddle_2_y2, WHITE);
 80019b4:	4b2a      	ldr	r3, [pc, #168]	; (8001a60 <PingPongGame+0x2e8>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	b298      	uxth	r0, r3
 80019ba:	4b2a      	ldr	r3, [pc, #168]	; (8001a64 <PingPongGame+0x2ec>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	b299      	uxth	r1, r3
 80019c0:	4b29      	ldr	r3, [pc, #164]	; (8001a68 <PingPongGame+0x2f0>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	b29a      	uxth	r2, r3
 80019c6:	4b29      	ldr	r3, [pc, #164]	; (8001a6c <PingPongGame+0x2f4>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80019d0:	9400      	str	r4, [sp, #0]
 80019d2:	f000 ff96 	bl	8002902 <ILI9341_Draw_Filled_Rectangle_Coord>
		ILI9341_Draw_Filled_Rectangle_Coord(paddle_2_x1, paddle_2_y1, paddle_2_x2, paddle_2_y2, BLUE);
 80019d6:	4b20      	ldr	r3, [pc, #128]	; (8001a58 <PingPongGame+0x2e0>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	b298      	uxth	r0, r3
 80019dc:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <PingPongGame+0x2bc>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	b299      	uxth	r1, r3
 80019e2:	4b1e      	ldr	r3, [pc, #120]	; (8001a5c <PingPongGame+0x2e4>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <PingPongGame+0x2b8>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	241f      	movs	r4, #31
 80019f0:	9400      	str	r4, [sp, #0]
 80019f2:	f000 ff86 	bl	8002902 <ILI9341_Draw_Filled_Rectangle_Coord>

		oldpaddle_2_x1 = paddle_2_x1;
 80019f6:	4b18      	ldr	r3, [pc, #96]	; (8001a58 <PingPongGame+0x2e0>)
 80019f8:	781a      	ldrb	r2, [r3, #0]
 80019fa:	4b19      	ldr	r3, [pc, #100]	; (8001a60 <PingPongGame+0x2e8>)
 80019fc:	701a      	strb	r2, [r3, #0]
		oldpaddle_2_y1 = paddle_2_y1;
 80019fe:	4b0d      	ldr	r3, [pc, #52]	; (8001a34 <PingPongGame+0x2bc>)
 8001a00:	781a      	ldrb	r2, [r3, #0]
 8001a02:	4b18      	ldr	r3, [pc, #96]	; (8001a64 <PingPongGame+0x2ec>)
 8001a04:	701a      	strb	r2, [r3, #0]
		oldpaddle_2_x2 = paddle_2_x2;
 8001a06:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <PingPongGame+0x2e4>)
 8001a08:	781a      	ldrb	r2, [r3, #0]
 8001a0a:	4b17      	ldr	r3, [pc, #92]	; (8001a68 <PingPongGame+0x2f0>)
 8001a0c:	701a      	strb	r2, [r3, #0]
		oldpaddle_2_y2 = paddle_2_y2;
 8001a0e:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <PingPongGame+0x2b8>)
 8001a10:	781a      	ldrb	r2, [r3, #0]
 8001a12:	4b16      	ldr	r3, [pc, #88]	; (8001a6c <PingPongGame+0x2f4>)
 8001a14:	701a      	strb	r2, [r3, #0]

		 //UPDATE THE BALL
		if(game_running){
 8001a16:	4b16      	ldr	r3, [pc, #88]	; (8001a70 <PingPongGame+0x2f8>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <PingPongGame+0x2aa>
			move_ball();
 8001a1e:	f000 f84b 	bl	8001ab8 <move_ball>
		}



}
 8001a22:	bf00      	nop
 8001a24:	3704      	adds	r7, #4
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd90      	pop	{r4, r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	2000071c 	.word	0x2000071c
 8001a30:	20000016 	.word	0x20000016
 8001a34:	20000015 	.word	0x20000015
 8001a38:	2000000f 	.word	0x2000000f
 8001a3c:	20000011 	.word	0x20000011
 8001a40:	20000010 	.word	0x20000010
 8001a44:	20000012 	.word	0x20000012
 8001a48:	2000078c 	.word	0x2000078c
 8001a4c:	2000078e 	.word	0x2000078e
 8001a50:	2000078d 	.word	0x2000078d
 8001a54:	2000078f 	.word	0x2000078f
 8001a58:	20000013 	.word	0x20000013
 8001a5c:	20000014 	.word	0x20000014
 8001a60:	20000790 	.word	0x20000790
 8001a64:	20000792 	.word	0x20000792
 8001a68:	20000791 	.word	0x20000791
 8001a6c:	20000793 	.word	0x20000793
 8001a70:	20000720 	.word	0x20000720

08001a74 <inPaddle>:



bool inPaddle(int x, int y, int rectX, int rectY, int rectWidth, int rectHeight) {
 8001a74:	b480      	push	{r7}
 8001a76:	b087      	sub	sp, #28
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
 8001a80:	603b      	str	r3, [r7, #0]
  bool  result = false;
 8001a82:	2300      	movs	r3, #0
 8001a84:	75fb      	strb	r3, [r7, #23]
  if ((x >= rectX && x <= rectWidth) &&
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	db0d      	blt.n	8001aaa <inPaddle+0x36>
 8001a8e:	68fa      	ldr	r2, [r7, #12]
 8001a90:	6a3b      	ldr	r3, [r7, #32]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	dc09      	bgt.n	8001aaa <inPaddle+0x36>
 8001a96:	68ba      	ldr	r2, [r7, #8]
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	db05      	blt.n	8001aaa <inPaddle+0x36>
    (y >= rectY && y <= rectHeight)) {
 8001a9e:	68ba      	ldr	r2, [r7, #8]
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	dc01      	bgt.n	8001aaa <inPaddle+0x36>
    result = true;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	75fb      	strb	r3, [r7, #23]
  }
  return result;
 8001aaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	371c      	adds	r7, #28
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <move_ball>:

void move_ball(){
 8001ab8:	b5b0      	push	{r4, r5, r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af02      	add	r7, sp, #8

	if(ball_x+2 == screen_hight || ball_x == 55){
 8001abe:	4b69      	ldr	r3, [pc, #420]	; (8001c64 <move_ball+0x1ac>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	3302      	adds	r3, #2
 8001ac4:	4a68      	ldr	r2, [pc, #416]	; (8001c68 <move_ball+0x1b0>)
 8001ac6:	6812      	ldr	r2, [r2, #0]
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d003      	beq.n	8001ad4 <move_ball+0x1c>
 8001acc:	4b65      	ldr	r3, [pc, #404]	; (8001c64 <move_ball+0x1ac>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b37      	cmp	r3, #55	; 0x37
 8001ad2:	d136      	bne.n	8001b42 <move_ball+0x8a>
		if(ball_x+2 == screen_hight){
 8001ad4:	4b63      	ldr	r3, [pc, #396]	; (8001c64 <move_ball+0x1ac>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	3302      	adds	r3, #2
 8001ada:	4a63      	ldr	r2, [pc, #396]	; (8001c68 <move_ball+0x1b0>)
 8001adc:	6812      	ldr	r2, [r2, #0]
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d10b      	bne.n	8001afa <move_ball+0x42>
			player_1_score += 1 ;
 8001ae2:	4b62      	ldr	r3, [pc, #392]	; (8001c6c <move_ball+0x1b4>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	b2da      	uxtb	r2, r3
 8001aea:	4b60      	ldr	r3, [pc, #384]	; (8001c6c <move_ball+0x1b4>)
 8001aec:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_11);
 8001aee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001af2:	485f      	ldr	r0, [pc, #380]	; (8001c70 <move_ball+0x1b8>)
 8001af4:	f002 ffd1 	bl	8004a9a <HAL_GPIO_TogglePin>
 8001af8:	e00e      	b.n	8001b18 <move_ball+0x60>

		}else if(ball_x == 55){
 8001afa:	4b5a      	ldr	r3, [pc, #360]	; (8001c64 <move_ball+0x1ac>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	2b37      	cmp	r3, #55	; 0x37
 8001b00:	d10a      	bne.n	8001b18 <move_ball+0x60>
			player_2_score += 1;
 8001b02:	4b5c      	ldr	r3, [pc, #368]	; (8001c74 <move_ball+0x1bc>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	3301      	adds	r3, #1
 8001b08:	b2da      	uxtb	r2, r3
 8001b0a:	4b5a      	ldr	r3, [pc, #360]	; (8001c74 <move_ball+0x1bc>)
 8001b0c:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);
 8001b0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b12:	4857      	ldr	r0, [pc, #348]	; (8001c70 <move_ball+0x1b8>)
 8001b14:	f002 ffc1 	bl	8004a9a <HAL_GPIO_TogglePin>

		}
		//SEND BALL BACK TO SPAWN BALL AREA
		ball_x = 150;
 8001b18:	4b52      	ldr	r3, [pc, #328]	; (8001c64 <move_ball+0x1ac>)
 8001b1a:	2296      	movs	r2, #150	; 0x96
 8001b1c:	701a      	strb	r2, [r3, #0]
		ball_y = 100;
 8001b1e:	4b56      	ldr	r3, [pc, #344]	; (8001c78 <move_ball+0x1c0>)
 8001b20:	2264      	movs	r2, #100	; 0x64
 8001b22:	701a      	strb	r2, [r3, #0]
		ball_color = BLACK;
 8001b24:	4b55      	ldr	r3, [pc, #340]	; (8001c7c <move_ball+0x1c4>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	801a      	strh	r2, [r3, #0]

		//MAKE IT MOVE DIFFERNT SIDE
		ballDirectionX = -ballDirectionX;
 8001b2a:	4b55      	ldr	r3, [pc, #340]	; (8001c80 <move_ball+0x1c8>)
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	425b      	negs	r3, r3
 8001b30:	b2da      	uxtb	r2, r3
 8001b32:	4b53      	ldr	r3, [pc, #332]	; (8001c80 <move_ball+0x1c8>)
 8001b34:	701a      	strb	r2, [r3, #0]
		ballDirectionY = -ballDirectionY;
 8001b36:	4b53      	ldr	r3, [pc, #332]	; (8001c84 <move_ball+0x1cc>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	425b      	negs	r3, r3
 8001b3c:	b2da      	uxtb	r2, r3
 8001b3e:	4b51      	ldr	r3, [pc, #324]	; (8001c84 <move_ball+0x1cc>)
 8001b40:	701a      	strb	r2, [r3, #0]

//	if (ball_y > screen_width || ball_y < 30) {
//	    ballDirectionY = -ballDirectionY;
//	}

	if (ball_y > screen_width || ball_y < 0) {
 8001b42:	4b4d      	ldr	r3, [pc, #308]	; (8001c78 <move_ball+0x1c0>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	461a      	mov	r2, r3
 8001b48:	4b4f      	ldr	r3, [pc, #316]	; (8001c88 <move_ball+0x1d0>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d905      	bls.n	8001b5c <move_ball+0xa4>
		    ballDirectionY = -ballDirectionY;
 8001b50:	4b4c      	ldr	r3, [pc, #304]	; (8001c84 <move_ball+0x1cc>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	425b      	negs	r3, r3
 8001b56:	b2da      	uxtb	r2, r3
 8001b58:	4b4a      	ldr	r3, [pc, #296]	; (8001c84 <move_ball+0x1cc>)
 8001b5a:	701a      	strb	r2, [r3, #0]
		}

	if (inPaddle(ball_x, ball_y, paddle_1_x1, paddle_1_y1, paddle_1_x2, paddle_1_y2)) {
 8001b5c:	4b41      	ldr	r3, [pc, #260]	; (8001c64 <move_ball+0x1ac>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	4618      	mov	r0, r3
 8001b62:	4b45      	ldr	r3, [pc, #276]	; (8001c78 <move_ball+0x1c0>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	4619      	mov	r1, r3
 8001b68:	4b48      	ldr	r3, [pc, #288]	; (8001c8c <move_ball+0x1d4>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	461c      	mov	r4, r3
 8001b6e:	4b48      	ldr	r3, [pc, #288]	; (8001c90 <move_ball+0x1d8>)
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	461d      	mov	r5, r3
 8001b74:	4b47      	ldr	r3, [pc, #284]	; (8001c94 <move_ball+0x1dc>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	4b47      	ldr	r3, [pc, #284]	; (8001c98 <move_ball+0x1e0>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	9301      	str	r3, [sp, #4]
 8001b80:	9200      	str	r2, [sp, #0]
 8001b82:	462b      	mov	r3, r5
 8001b84:	4622      	mov	r2, r4
 8001b86:	f7ff ff75 	bl	8001a74 <inPaddle>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d00a      	beq.n	8001ba6 <move_ball+0xee>
		ballDirectionX = -ballDirectionX;
 8001b90:	4b3b      	ldr	r3, [pc, #236]	; (8001c80 <move_ball+0x1c8>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	425b      	negs	r3, r3
 8001b96:	b2da      	uxtb	r2, r3
 8001b98:	4b39      	ldr	r3, [pc, #228]	; (8001c80 <move_ball+0x1c8>)
 8001b9a:	701a      	strb	r2, [r3, #0]

		ball_color = RED;
 8001b9c:	4b37      	ldr	r3, [pc, #220]	; (8001c7c <move_ball+0x1c4>)
 8001b9e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001ba2:	801a      	strh	r2, [r3, #0]
 8001ba4:	e022      	b.n	8001bec <move_ball+0x134>


	}else if (inPaddle(ball_x, ball_y, paddle_2_x1, paddle_2_y1, paddle_2_x2, paddle_2_y2)){
 8001ba6:	4b2f      	ldr	r3, [pc, #188]	; (8001c64 <move_ball+0x1ac>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	4b32      	ldr	r3, [pc, #200]	; (8001c78 <move_ball+0x1c0>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4b3a      	ldr	r3, [pc, #232]	; (8001c9c <move_ball+0x1e4>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	461c      	mov	r4, r3
 8001bb8:	4b39      	ldr	r3, [pc, #228]	; (8001ca0 <move_ball+0x1e8>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	461d      	mov	r5, r3
 8001bbe:	4b39      	ldr	r3, [pc, #228]	; (8001ca4 <move_ball+0x1ec>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	4b38      	ldr	r3, [pc, #224]	; (8001ca8 <move_ball+0x1f0>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	9301      	str	r3, [sp, #4]
 8001bca:	9200      	str	r2, [sp, #0]
 8001bcc:	462b      	mov	r3, r5
 8001bce:	4622      	mov	r2, r4
 8001bd0:	f7ff ff50 	bl	8001a74 <inPaddle>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d008      	beq.n	8001bec <move_ball+0x134>
		ballDirectionX = -ballDirectionX;
 8001bda:	4b29      	ldr	r3, [pc, #164]	; (8001c80 <move_ball+0x1c8>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	425b      	negs	r3, r3
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	4b27      	ldr	r3, [pc, #156]	; (8001c80 <move_ball+0x1c8>)
 8001be4:	701a      	strb	r2, [r3, #0]
		ball_color = BLUE;
 8001be6:	4b25      	ldr	r3, [pc, #148]	; (8001c7c <move_ball+0x1c4>)
 8001be8:	221f      	movs	r2, #31
 8001bea:	801a      	strh	r2, [r3, #0]
	}
		  ball_x += ballDirectionX;
 8001bec:	4b1d      	ldr	r3, [pc, #116]	; (8001c64 <move_ball+0x1ac>)
 8001bee:	781a      	ldrb	r2, [r3, #0]
 8001bf0:	4b23      	ldr	r3, [pc, #140]	; (8001c80 <move_ball+0x1c8>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	b2da      	uxtb	r2, r3
 8001bf8:	4b1a      	ldr	r3, [pc, #104]	; (8001c64 <move_ball+0x1ac>)
 8001bfa:	701a      	strb	r2, [r3, #0]
		  ball_y += ballDirectionY;
 8001bfc:	4b1e      	ldr	r3, [pc, #120]	; (8001c78 <move_ball+0x1c0>)
 8001bfe:	781a      	ldrb	r2, [r3, #0]
 8001c00:	4b20      	ldr	r3, [pc, #128]	; (8001c84 <move_ball+0x1cc>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	4413      	add	r3, r2
 8001c06:	b2da      	uxtb	r2, r3
 8001c08:	4b1b      	ldr	r3, [pc, #108]	; (8001c78 <move_ball+0x1c0>)
 8001c0a:	701a      	strb	r2, [r3, #0]
		  ILI9341_Draw_Filled_Circle(ball_x, ball_y, 3, ball_color);
 8001c0c:	4b15      	ldr	r3, [pc, #84]	; (8001c64 <move_ball+0x1ac>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	b298      	uxth	r0, r3
 8001c12:	4b19      	ldr	r3, [pc, #100]	; (8001c78 <move_ball+0x1c0>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	b299      	uxth	r1, r3
 8001c18:	4b18      	ldr	r3, [pc, #96]	; (8001c7c <move_ball+0x1c4>)
 8001c1a:	881b      	ldrh	r3, [r3, #0]
 8001c1c:	2203      	movs	r2, #3
 8001c1e:	f000 fde8 	bl	80027f2 <ILI9341_Draw_Filled_Circle>
		  ILI9341_Draw_Filled_Circle(oldball_x, oldball_y, 3, WHITE);
 8001c22:	4b22      	ldr	r3, [pc, #136]	; (8001cac <move_ball+0x1f4>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	b298      	uxth	r0, r3
 8001c28:	4b21      	ldr	r3, [pc, #132]	; (8001cb0 <move_ball+0x1f8>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	b299      	uxth	r1, r3
 8001c2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c32:	2203      	movs	r2, #3
 8001c34:	f000 fddd 	bl	80027f2 <ILI9341_Draw_Filled_Circle>
		  ILI9341_Draw_Filled_Circle(ball_x, ball_y, 3, ball_color);
 8001c38:	4b0a      	ldr	r3, [pc, #40]	; (8001c64 <move_ball+0x1ac>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	b298      	uxth	r0, r3
 8001c3e:	4b0e      	ldr	r3, [pc, #56]	; (8001c78 <move_ball+0x1c0>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	b299      	uxth	r1, r3
 8001c44:	4b0d      	ldr	r3, [pc, #52]	; (8001c7c <move_ball+0x1c4>)
 8001c46:	881b      	ldrh	r3, [r3, #0]
 8001c48:	2203      	movs	r2, #3
 8001c4a:	f000 fdd2 	bl	80027f2 <ILI9341_Draw_Filled_Circle>

		  oldball_x = ball_x;
 8001c4e:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <move_ball+0x1ac>)
 8001c50:	781a      	ldrb	r2, [r3, #0]
 8001c52:	4b16      	ldr	r3, [pc, #88]	; (8001cac <move_ball+0x1f4>)
 8001c54:	701a      	strb	r2, [r3, #0]
		  oldball_y = ball_y;
 8001c56:	4b08      	ldr	r3, [pc, #32]	; (8001c78 <move_ball+0x1c0>)
 8001c58:	781a      	ldrb	r2, [r3, #0]
 8001c5a:	4b15      	ldr	r3, [pc, #84]	; (8001cb0 <move_ball+0x1f8>)
 8001c5c:	701a      	strb	r2, [r3, #0]
}
 8001c5e:	bf00      	nop
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bdb0      	pop	{r4, r5, r7, pc}
 8001c64:	20000017 	.word	0x20000017
 8001c68:	2000001c 	.word	0x2000001c
 8001c6c:	20000788 	.word	0x20000788
 8001c70:	40020400 	.word	0x40020400
 8001c74:	20000789 	.word	0x20000789
 8001c78:	20000018 	.word	0x20000018
 8001c7c:	2000078a 	.word	0x2000078a
 8001c80:	20000019 	.word	0x20000019
 8001c84:	2000001a 	.word	0x2000001a
 8001c88:	20000020 	.word	0x20000020
 8001c8c:	2000000f 	.word	0x2000000f
 8001c90:	20000011 	.word	0x20000011
 8001c94:	20000010 	.word	0x20000010
 8001c98:	20000012 	.word	0x20000012
 8001c9c:	20000013 	.word	0x20000013
 8001ca0:	20000015 	.word	0x20000015
 8001ca4:	20000014 	.word	0x20000014
 8001ca8:	20000016 	.word	0x20000016
 8001cac:	20000794 	.word	0x20000794
 8001cb0:	20000795 	.word	0x20000795

08001cb4 <delPaddle>:

/*-----------------------------------------END PINGPONG-----------------------------------------*/

void delPaddle(){
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
	paddle_1_x1 = 0 ;
 8001cb8:	4b1e      	ldr	r3, [pc, #120]	; (8001d34 <delPaddle+0x80>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	701a      	strb	r2, [r3, #0]
	paddle_1_x2 = 0 ;
 8001cbe:	4b1e      	ldr	r3, [pc, #120]	; (8001d38 <delPaddle+0x84>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	701a      	strb	r2, [r3, #0]
	paddle_1_y1 = 0 ;
 8001cc4:	4b1d      	ldr	r3, [pc, #116]	; (8001d3c <delPaddle+0x88>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	701a      	strb	r2, [r3, #0]
	paddle_1_y2 = 0;
 8001cca:	4b1d      	ldr	r3, [pc, #116]	; (8001d40 <delPaddle+0x8c>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	701a      	strb	r2, [r3, #0]

	paddle_2_x1 = 0;
 8001cd0:	4b1c      	ldr	r3, [pc, #112]	; (8001d44 <delPaddle+0x90>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	701a      	strb	r2, [r3, #0]
	paddle_2_x2 = 0;
 8001cd6:	4b1c      	ldr	r3, [pc, #112]	; (8001d48 <delPaddle+0x94>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	701a      	strb	r2, [r3, #0]
	paddle_2_y1 = 0 ;
 8001cdc:	4b1b      	ldr	r3, [pc, #108]	; (8001d4c <delPaddle+0x98>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	701a      	strb	r2, [r3, #0]
	paddle_2_y2 = 0;
 8001ce2:	4b1b      	ldr	r3, [pc, #108]	; (8001d50 <delPaddle+0x9c>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	701a      	strb	r2, [r3, #0]

	oldpaddle_1_x1 = paddle_1_x1;
 8001ce8:	4b12      	ldr	r3, [pc, #72]	; (8001d34 <delPaddle+0x80>)
 8001cea:	781a      	ldrb	r2, [r3, #0]
 8001cec:	4b19      	ldr	r3, [pc, #100]	; (8001d54 <delPaddle+0xa0>)
 8001cee:	701a      	strb	r2, [r3, #0]
	oldpaddle_1_y1 = paddle_1_y1;
 8001cf0:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <delPaddle+0x88>)
 8001cf2:	781a      	ldrb	r2, [r3, #0]
 8001cf4:	4b18      	ldr	r3, [pc, #96]	; (8001d58 <delPaddle+0xa4>)
 8001cf6:	701a      	strb	r2, [r3, #0]
	oldpaddle_1_x2 = paddle_1_x2;
 8001cf8:	4b0f      	ldr	r3, [pc, #60]	; (8001d38 <delPaddle+0x84>)
 8001cfa:	781a      	ldrb	r2, [r3, #0]
 8001cfc:	4b17      	ldr	r3, [pc, #92]	; (8001d5c <delPaddle+0xa8>)
 8001cfe:	701a      	strb	r2, [r3, #0]
	oldpaddle_1_y2 = paddle_1_y2;
 8001d00:	4b0f      	ldr	r3, [pc, #60]	; (8001d40 <delPaddle+0x8c>)
 8001d02:	781a      	ldrb	r2, [r3, #0]
 8001d04:	4b16      	ldr	r3, [pc, #88]	; (8001d60 <delPaddle+0xac>)
 8001d06:	701a      	strb	r2, [r3, #0]

	oldpaddle_2_x1 = paddle_2_x1;
 8001d08:	4b0e      	ldr	r3, [pc, #56]	; (8001d44 <delPaddle+0x90>)
 8001d0a:	781a      	ldrb	r2, [r3, #0]
 8001d0c:	4b15      	ldr	r3, [pc, #84]	; (8001d64 <delPaddle+0xb0>)
 8001d0e:	701a      	strb	r2, [r3, #0]
	oldpaddle_2_y1 = paddle_2_y1;
 8001d10:	4b0e      	ldr	r3, [pc, #56]	; (8001d4c <delPaddle+0x98>)
 8001d12:	781a      	ldrb	r2, [r3, #0]
 8001d14:	4b14      	ldr	r3, [pc, #80]	; (8001d68 <delPaddle+0xb4>)
 8001d16:	701a      	strb	r2, [r3, #0]
	oldpaddle_2_x2 = paddle_2_x2;
 8001d18:	4b0b      	ldr	r3, [pc, #44]	; (8001d48 <delPaddle+0x94>)
 8001d1a:	781a      	ldrb	r2, [r3, #0]
 8001d1c:	4b13      	ldr	r3, [pc, #76]	; (8001d6c <delPaddle+0xb8>)
 8001d1e:	701a      	strb	r2, [r3, #0]
	oldpaddle_2_y2 = paddle_2_y2;
 8001d20:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <delPaddle+0x9c>)
 8001d22:	781a      	ldrb	r2, [r3, #0]
 8001d24:	4b12      	ldr	r3, [pc, #72]	; (8001d70 <delPaddle+0xbc>)
 8001d26:	701a      	strb	r2, [r3, #0]
}
 8001d28:	bf00      	nop
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	2000000f 	.word	0x2000000f
 8001d38:	20000010 	.word	0x20000010
 8001d3c:	20000011 	.word	0x20000011
 8001d40:	20000012 	.word	0x20000012
 8001d44:	20000013 	.word	0x20000013
 8001d48:	20000014 	.word	0x20000014
 8001d4c:	20000015 	.word	0x20000015
 8001d50:	20000016 	.word	0x20000016
 8001d54:	2000078c 	.word	0x2000078c
 8001d58:	2000078e 	.word	0x2000078e
 8001d5c:	2000078d 	.word	0x2000078d
 8001d60:	2000078f 	.word	0x2000078f
 8001d64:	20000790 	.word	0x20000790
 8001d68:	20000792 	.word	0x20000792
 8001d6c:	20000791 	.word	0x20000791
 8001d70:	20000793 	.word	0x20000793

08001d74 <display>:
//DISPLAY FUNCTION FOR DEBUG ON TERMINAL
void display(int val_1, int val_2){
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af02      	add	r7, sp, #8
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]

	if(player_1_score == 5){
 8001d7e:	4b3d      	ldr	r3, [pc, #244]	; (8001e74 <display+0x100>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	2b05      	cmp	r3, #5
 8001d84:	d137      	bne.n	8001df6 <display+0x82>

		game_running = false;
 8001d86:	4b3c      	ldr	r3, [pc, #240]	; (8001e78 <display+0x104>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	701a      	strb	r2, [r3, #0]
		delPaddle();
 8001d8c:	f7ff ff92 	bl	8001cb4 <delPaddle>

		ILI9341_Fill_Screen(BLACK);
 8001d90:	2000      	movs	r0, #0
 8001d92:	f001 fa63 	bl	800325c <ILI9341_Fill_Screen>
		sprintf(str, "Player Score 1 : %d", player_1_score);
 8001d96:	4b37      	ldr	r3, [pc, #220]	; (8001e74 <display+0x100>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	4937      	ldr	r1, [pc, #220]	; (8001e7c <display+0x108>)
 8001d9e:	4838      	ldr	r0, [pc, #224]	; (8001e80 <display+0x10c>)
 8001da0:	f007 f86e 	bl	8008e80 <siprintf>
		ILI9341_Draw_Text(str, 30, 40, WHITE, 2,BLACK );
 8001da4:	2300      	movs	r3, #0
 8001da6:	9301      	str	r3, [sp, #4]
 8001da8:	2302      	movs	r3, #2
 8001daa:	9300      	str	r3, [sp, #0]
 8001dac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001db0:	2228      	movs	r2, #40	; 0x28
 8001db2:	211e      	movs	r1, #30
 8001db4:	4832      	ldr	r0, [pc, #200]	; (8001e80 <display+0x10c>)
 8001db6:	f000 fe9d 	bl	8002af4 <ILI9341_Draw_Text>

		sprintf(str, "Player Score 2 : %d", player_2_score);
 8001dba:	4b32      	ldr	r3, [pc, #200]	; (8001e84 <display+0x110>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	4931      	ldr	r1, [pc, #196]	; (8001e88 <display+0x114>)
 8001dc2:	482f      	ldr	r0, [pc, #188]	; (8001e80 <display+0x10c>)
 8001dc4:	f007 f85c 	bl	8008e80 <siprintf>
		ILI9341_Draw_Text(str, 30, 80, WHITE, 2,BLACK );
 8001dc8:	2300      	movs	r3, #0
 8001dca:	9301      	str	r3, [sp, #4]
 8001dcc:	2302      	movs	r3, #2
 8001dce:	9300      	str	r3, [sp, #0]
 8001dd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dd4:	2250      	movs	r2, #80	; 0x50
 8001dd6:	211e      	movs	r1, #30
 8001dd8:	4829      	ldr	r0, [pc, #164]	; (8001e80 <display+0x10c>)
 8001dda:	f000 fe8b 	bl	8002af4 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("Player 1 Wins!", 75, 130, WHITE, 2, BLACK);
 8001dde:	2300      	movs	r3, #0
 8001de0:	9301      	str	r3, [sp, #4]
 8001de2:	2302      	movs	r3, #2
 8001de4:	9300      	str	r3, [sp, #0]
 8001de6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dea:	2282      	movs	r2, #130	; 0x82
 8001dec:	214b      	movs	r1, #75	; 0x4b
 8001dee:	4827      	ldr	r0, [pc, #156]	; (8001e8c <display+0x118>)
 8001df0:	f000 fe80 	bl	8002af4 <ILI9341_Draw_Text>
//	else{
//		sprintf(str, "Player Score 1 : %d Player Score 2 : %d", player_1_score, player_2_score);
//		ILI9341_Draw_Text(str, 20, 10, BLACK, 1, WHITE);
//	}

}
 8001df4:	e03a      	b.n	8001e6c <display+0xf8>
	else if(player_2_score == 5){
 8001df6:	4b23      	ldr	r3, [pc, #140]	; (8001e84 <display+0x110>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	2b05      	cmp	r3, #5
 8001dfc:	d136      	bne.n	8001e6c <display+0xf8>
		game_running = false;
 8001dfe:	4b1e      	ldr	r3, [pc, #120]	; (8001e78 <display+0x104>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	701a      	strb	r2, [r3, #0]
		delPaddle();
 8001e04:	f7ff ff56 	bl	8001cb4 <delPaddle>
		ILI9341_Fill_Screen(BLACK);
 8001e08:	2000      	movs	r0, #0
 8001e0a:	f001 fa27 	bl	800325c <ILI9341_Fill_Screen>
		sprintf(str, "Player Score 1 : %d", player_1_score);
 8001e0e:	4b19      	ldr	r3, [pc, #100]	; (8001e74 <display+0x100>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	461a      	mov	r2, r3
 8001e14:	4919      	ldr	r1, [pc, #100]	; (8001e7c <display+0x108>)
 8001e16:	481a      	ldr	r0, [pc, #104]	; (8001e80 <display+0x10c>)
 8001e18:	f007 f832 	bl	8008e80 <siprintf>
		ILI9341_Draw_Text(str, 30, 40, WHITE, 2,BLACK );
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	9301      	str	r3, [sp, #4]
 8001e20:	2302      	movs	r3, #2
 8001e22:	9300      	str	r3, [sp, #0]
 8001e24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e28:	2228      	movs	r2, #40	; 0x28
 8001e2a:	211e      	movs	r1, #30
 8001e2c:	4814      	ldr	r0, [pc, #80]	; (8001e80 <display+0x10c>)
 8001e2e:	f000 fe61 	bl	8002af4 <ILI9341_Draw_Text>
		sprintf(str, "Player Score 2 : %d", player_2_score);
 8001e32:	4b14      	ldr	r3, [pc, #80]	; (8001e84 <display+0x110>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	461a      	mov	r2, r3
 8001e38:	4913      	ldr	r1, [pc, #76]	; (8001e88 <display+0x114>)
 8001e3a:	4811      	ldr	r0, [pc, #68]	; (8001e80 <display+0x10c>)
 8001e3c:	f007 f820 	bl	8008e80 <siprintf>
		ILI9341_Draw_Text(str, 30, 80, WHITE, 2,BLACK );
 8001e40:	2300      	movs	r3, #0
 8001e42:	9301      	str	r3, [sp, #4]
 8001e44:	2302      	movs	r3, #2
 8001e46:	9300      	str	r3, [sp, #0]
 8001e48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e4c:	2250      	movs	r2, #80	; 0x50
 8001e4e:	211e      	movs	r1, #30
 8001e50:	480b      	ldr	r0, [pc, #44]	; (8001e80 <display+0x10c>)
 8001e52:	f000 fe4f 	bl	8002af4 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("Player 2 Wins!", 75, 130, WHITE, 2, BLACK);
 8001e56:	2300      	movs	r3, #0
 8001e58:	9301      	str	r3, [sp, #4]
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	9300      	str	r3, [sp, #0]
 8001e5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e62:	2282      	movs	r2, #130	; 0x82
 8001e64:	214b      	movs	r1, #75	; 0x4b
 8001e66:	480a      	ldr	r0, [pc, #40]	; (8001e90 <display+0x11c>)
 8001e68:	f000 fe44 	bl	8002af4 <ILI9341_Draw_Text>
}
 8001e6c:	bf00      	nop
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	20000788 	.word	0x20000788
 8001e78:	20000720 	.word	0x20000720
 8001e7c:	0800b0d0 	.word	0x0800b0d0
 8001e80:	20000724 	.word	0x20000724
 8001e84:	20000789 	.word	0x20000789
 8001e88:	0800b0e4 	.word	0x0800b0e4
 8001e8c:	0800b0f8 	.word	0x0800b0f8
 8001e90:	0800b108 	.word	0x0800b108

08001e94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8001e98:	e7fe      	b.n	8001e98 <Error_Handler+0x4>
	...

08001e9c <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001ea0:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <MX_RNG_Init+0x20>)
 8001ea2:	4a07      	ldr	r2, [pc, #28]	; (8001ec0 <MX_RNG_Init+0x24>)
 8001ea4:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001ea6:	4805      	ldr	r0, [pc, #20]	; (8001ebc <MX_RNG_Init+0x20>)
 8001ea8:	f003 ff86 	bl	8005db8 <HAL_RNG_Init>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001eb2:	f7ff ffef 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001eb6:	bf00      	nop
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	200007b8 	.word	0x200007b8
 8001ec0:	50060800 	.word	0x50060800

08001ec4 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b0a8      	sub	sp, #160	; 0xa0
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ecc:	f107 0310 	add.w	r3, r7, #16
 8001ed0:	2290      	movs	r2, #144	; 0x90
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f007 f836 	bl	8008f46 <memset>
  if(rngHandle->Instance==RNG)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a11      	ldr	r2, [pc, #68]	; (8001f24 <HAL_RNG_MspInit+0x60>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d11b      	bne.n	8001f1c <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001ee4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001ee8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001eea:	2300      	movs	r3, #0
 8001eec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ef0:	f107 0310 	add.w	r3, r7, #16
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f003 fb37 	bl	8005568 <HAL_RCCEx_PeriphCLKConfig>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8001f00:	f7ff ffc8 	bl	8001e94 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001f04:	4b08      	ldr	r3, [pc, #32]	; (8001f28 <HAL_RNG_MspInit+0x64>)
 8001f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f08:	4a07      	ldr	r2, [pc, #28]	; (8001f28 <HAL_RNG_MspInit+0x64>)
 8001f0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f0e:	6353      	str	r3, [r2, #52]	; 0x34
 8001f10:	4b05      	ldr	r3, [pc, #20]	; (8001f28 <HAL_RNG_MspInit+0x64>)
 8001f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f18:	60fb      	str	r3, [r7, #12]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8001f1c:	bf00      	nop
 8001f1e:	37a0      	adds	r7, #160	; 0xa0
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	50060800 	.word	0x50060800
 8001f28:	40023800 	.word	0x40023800

08001f2c <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8001f30:	4b1b      	ldr	r3, [pc, #108]	; (8001fa0 <MX_SPI5_Init+0x74>)
 8001f32:	4a1c      	ldr	r2, [pc, #112]	; (8001fa4 <MX_SPI5_Init+0x78>)
 8001f34:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001f36:	4b1a      	ldr	r3, [pc, #104]	; (8001fa0 <MX_SPI5_Init+0x74>)
 8001f38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f3c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001f3e:	4b18      	ldr	r3, [pc, #96]	; (8001fa0 <MX_SPI5_Init+0x74>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f44:	4b16      	ldr	r3, [pc, #88]	; (8001fa0 <MX_SPI5_Init+0x74>)
 8001f46:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001f4a:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f4c:	4b14      	ldr	r3, [pc, #80]	; (8001fa0 <MX_SPI5_Init+0x74>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f52:	4b13      	ldr	r3, [pc, #76]	; (8001fa0 <MX_SPI5_Init+0x74>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001f58:	4b11      	ldr	r3, [pc, #68]	; (8001fa0 <MX_SPI5_Init+0x74>)
 8001f5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f5e:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f60:	4b0f      	ldr	r3, [pc, #60]	; (8001fa0 <MX_SPI5_Init+0x74>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f66:	4b0e      	ldr	r3, [pc, #56]	; (8001fa0 <MX_SPI5_Init+0x74>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f6c:	4b0c      	ldr	r3, [pc, #48]	; (8001fa0 <MX_SPI5_Init+0x74>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f72:	4b0b      	ldr	r3, [pc, #44]	; (8001fa0 <MX_SPI5_Init+0x74>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8001f78:	4b09      	ldr	r3, [pc, #36]	; (8001fa0 <MX_SPI5_Init+0x74>)
 8001f7a:	2207      	movs	r2, #7
 8001f7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001f7e:	4b08      	ldr	r3, [pc, #32]	; (8001fa0 <MX_SPI5_Init+0x74>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001f84:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <MX_SPI5_Init+0x74>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001f8a:	4805      	ldr	r0, [pc, #20]	; (8001fa0 <MX_SPI5_Init+0x74>)
 8001f8c:	f003 ff3e 	bl	8005e0c <HAL_SPI_Init>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8001f96:	f7ff ff7d 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	200007c8 	.word	0x200007c8
 8001fa4:	40015000 	.word	0x40015000

08001fa8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08a      	sub	sp, #40	; 0x28
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb0:	f107 0314 	add.w	r3, r7, #20
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	609a      	str	r2, [r3, #8]
 8001fbc:	60da      	str	r2, [r3, #12]
 8001fbe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a17      	ldr	r2, [pc, #92]	; (8002024 <HAL_SPI_MspInit+0x7c>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d128      	bne.n	800201c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001fca:	4b17      	ldr	r3, [pc, #92]	; (8002028 <HAL_SPI_MspInit+0x80>)
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fce:	4a16      	ldr	r2, [pc, #88]	; (8002028 <HAL_SPI_MspInit+0x80>)
 8001fd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fd6:	4b14      	ldr	r3, [pc, #80]	; (8002028 <HAL_SPI_MspInit+0x80>)
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fde:	613b      	str	r3, [r7, #16]
 8001fe0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fe2:	4b11      	ldr	r3, [pc, #68]	; (8002028 <HAL_SPI_MspInit+0x80>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	4a10      	ldr	r2, [pc, #64]	; (8002028 <HAL_SPI_MspInit+0x80>)
 8001fe8:	f043 0320 	orr.w	r3, r3, #32
 8001fec:	6313      	str	r3, [r2, #48]	; 0x30
 8001fee:	4b0e      	ldr	r3, [pc, #56]	; (8002028 <HAL_SPI_MspInit+0x80>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	f003 0320 	and.w	r3, r3, #32
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001ffa:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001ffe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002000:	2302      	movs	r3, #2
 8002002:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002004:	2300      	movs	r3, #0
 8002006:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002008:	2303      	movs	r3, #3
 800200a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800200c:	2305      	movs	r3, #5
 800200e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002010:	f107 0314 	add.w	r3, r7, #20
 8002014:	4619      	mov	r1, r3
 8002016:	4805      	ldr	r0, [pc, #20]	; (800202c <HAL_SPI_MspInit+0x84>)
 8002018:	f002 fb62 	bl	80046e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 800201c:	bf00      	nop
 800201e:	3728      	adds	r7, #40	; 0x28
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40015000 	.word	0x40015000
 8002028:	40023800 	.word	0x40023800
 800202c:	40021400 	.word	0x40021400

08002030 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002036:	4b0f      	ldr	r3, [pc, #60]	; (8002074 <HAL_MspInit+0x44>)
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	4a0e      	ldr	r2, [pc, #56]	; (8002074 <HAL_MspInit+0x44>)
 800203c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002040:	6413      	str	r3, [r2, #64]	; 0x40
 8002042:	4b0c      	ldr	r3, [pc, #48]	; (8002074 <HAL_MspInit+0x44>)
 8002044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800204a:	607b      	str	r3, [r7, #4]
 800204c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800204e:	4b09      	ldr	r3, [pc, #36]	; (8002074 <HAL_MspInit+0x44>)
 8002050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002052:	4a08      	ldr	r2, [pc, #32]	; (8002074 <HAL_MspInit+0x44>)
 8002054:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002058:	6453      	str	r3, [r2, #68]	; 0x44
 800205a:	4b06      	ldr	r3, [pc, #24]	; (8002074 <HAL_MspInit+0x44>)
 800205c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002062:	603b      	str	r3, [r7, #0]
 8002064:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002066:	bf00      	nop
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	40023800 	.word	0x40023800

08002078 <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800207c:	f001 fad4 	bl	8003628 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002080:	bf00      	nop
 8002082:	bd80      	pop	{r7, pc}

08002084 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002088:	4802      	ldr	r0, [pc, #8]	; (8002094 <USART2_IRQHandler+0x10>)
 800208a:	f005 f9ef 	bl	800746c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	200008c8 	.word	0x200008c8

08002098 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800209c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80020a0:	f002 fd16 	bl	8004ad0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80020a4:	bf00      	nop
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80020ac:	4802      	ldr	r0, [pc, #8]	; (80020b8 <DMA2_Stream0_IRQHandler+0x10>)
 80020ae:	f002 f8db 	bl	8004268 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	20000698 	.word	0x20000698

080020bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
	return 1;
 80020c0:	2301      	movs	r3, #1
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <_kill>:

int _kill(int pid, int sig)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80020d6:	f006 ff89 	bl	8008fec <__errno>
 80020da:	4603      	mov	r3, r0
 80020dc:	2216      	movs	r2, #22
 80020de:	601a      	str	r2, [r3, #0]
	return -1;
 80020e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <_exit>:

void _exit (int status)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80020f4:	f04f 31ff 	mov.w	r1, #4294967295
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f7ff ffe7 	bl	80020cc <_kill>
	while (1) {}		/* Make sure we hang here */
 80020fe:	e7fe      	b.n	80020fe <_exit+0x12>

08002100 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800210c:	2300      	movs	r3, #0
 800210e:	617b      	str	r3, [r7, #20]
 8002110:	e00a      	b.n	8002128 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002112:	f3af 8000 	nop.w
 8002116:	4601      	mov	r1, r0
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	1c5a      	adds	r2, r3, #1
 800211c:	60ba      	str	r2, [r7, #8]
 800211e:	b2ca      	uxtb	r2, r1
 8002120:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	3301      	adds	r3, #1
 8002126:	617b      	str	r3, [r7, #20]
 8002128:	697a      	ldr	r2, [r7, #20]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	429a      	cmp	r2, r3
 800212e:	dbf0      	blt.n	8002112 <_read+0x12>
	}

return len;
 8002130:	687b      	ldr	r3, [r7, #4]
}
 8002132:	4618      	mov	r0, r3
 8002134:	3718      	adds	r7, #24
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b086      	sub	sp, #24
 800213e:	af00      	add	r7, sp, #0
 8002140:	60f8      	str	r0, [r7, #12]
 8002142:	60b9      	str	r1, [r7, #8]
 8002144:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002146:	2300      	movs	r3, #0
 8002148:	617b      	str	r3, [r7, #20]
 800214a:	e009      	b.n	8002160 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	1c5a      	adds	r2, r3, #1
 8002150:	60ba      	str	r2, [r7, #8]
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	4618      	mov	r0, r3
 8002156:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	3301      	adds	r3, #1
 800215e:	617b      	str	r3, [r7, #20]
 8002160:	697a      	ldr	r2, [r7, #20]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	429a      	cmp	r2, r3
 8002166:	dbf1      	blt.n	800214c <_write+0x12>
	}
	return len;
 8002168:	687b      	ldr	r3, [r7, #4]
}
 800216a:	4618      	mov	r0, r3
 800216c:	3718      	adds	r7, #24
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <_close>:

int _close(int file)
{
 8002172:	b480      	push	{r7}
 8002174:	b083      	sub	sp, #12
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
	return -1;
 800217a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800217e:	4618      	mov	r0, r3
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr

0800218a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800218a:	b480      	push	{r7}
 800218c:	b083      	sub	sp, #12
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
 8002192:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800219a:	605a      	str	r2, [r3, #4]
	return 0;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <_isatty>:

int _isatty(int file)
{
 80021aa:	b480      	push	{r7}
 80021ac:	b083      	sub	sp, #12
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
	return 1;
 80021b2:	2301      	movs	r3, #1
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
	return 0;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3714      	adds	r7, #20
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
	...

080021dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021e4:	4a14      	ldr	r2, [pc, #80]	; (8002238 <_sbrk+0x5c>)
 80021e6:	4b15      	ldr	r3, [pc, #84]	; (800223c <_sbrk+0x60>)
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021f0:	4b13      	ldr	r3, [pc, #76]	; (8002240 <_sbrk+0x64>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d102      	bne.n	80021fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021f8:	4b11      	ldr	r3, [pc, #68]	; (8002240 <_sbrk+0x64>)
 80021fa:	4a12      	ldr	r2, [pc, #72]	; (8002244 <_sbrk+0x68>)
 80021fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021fe:	4b10      	ldr	r3, [pc, #64]	; (8002240 <_sbrk+0x64>)
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4413      	add	r3, r2
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	429a      	cmp	r2, r3
 800220a:	d207      	bcs.n	800221c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800220c:	f006 feee 	bl	8008fec <__errno>
 8002210:	4603      	mov	r3, r0
 8002212:	220c      	movs	r2, #12
 8002214:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002216:	f04f 33ff 	mov.w	r3, #4294967295
 800221a:	e009      	b.n	8002230 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800221c:	4b08      	ldr	r3, [pc, #32]	; (8002240 <_sbrk+0x64>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002222:	4b07      	ldr	r3, [pc, #28]	; (8002240 <_sbrk+0x64>)
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4413      	add	r3, r2
 800222a:	4a05      	ldr	r2, [pc, #20]	; (8002240 <_sbrk+0x64>)
 800222c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800222e:	68fb      	ldr	r3, [r7, #12]
}
 8002230:	4618      	mov	r0, r3
 8002232:	3718      	adds	r7, #24
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	20080000 	.word	0x20080000
 800223c:	00000400 	.word	0x00000400
 8002240:	2000082c 	.word	0x2000082c
 8002244:	20000b28 	.word	0x20000b28

08002248 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800224c:	4b15      	ldr	r3, [pc, #84]	; (80022a4 <SystemInit+0x5c>)
 800224e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002252:	4a14      	ldr	r2, [pc, #80]	; (80022a4 <SystemInit+0x5c>)
 8002254:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002258:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800225c:	4b12      	ldr	r3, [pc, #72]	; (80022a8 <SystemInit+0x60>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a11      	ldr	r2, [pc, #68]	; (80022a8 <SystemInit+0x60>)
 8002262:	f043 0301 	orr.w	r3, r3, #1
 8002266:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002268:	4b0f      	ldr	r3, [pc, #60]	; (80022a8 <SystemInit+0x60>)
 800226a:	2200      	movs	r2, #0
 800226c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800226e:	4b0e      	ldr	r3, [pc, #56]	; (80022a8 <SystemInit+0x60>)
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	490d      	ldr	r1, [pc, #52]	; (80022a8 <SystemInit+0x60>)
 8002274:	4b0d      	ldr	r3, [pc, #52]	; (80022ac <SystemInit+0x64>)
 8002276:	4013      	ands	r3, r2
 8002278:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800227a:	4b0b      	ldr	r3, [pc, #44]	; (80022a8 <SystemInit+0x60>)
 800227c:	4a0c      	ldr	r2, [pc, #48]	; (80022b0 <SystemInit+0x68>)
 800227e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002280:	4b09      	ldr	r3, [pc, #36]	; (80022a8 <SystemInit+0x60>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a08      	ldr	r2, [pc, #32]	; (80022a8 <SystemInit+0x60>)
 8002286:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800228a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800228c:	4b06      	ldr	r3, [pc, #24]	; (80022a8 <SystemInit+0x60>)
 800228e:	2200      	movs	r2, #0
 8002290:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002292:	4b04      	ldr	r3, [pc, #16]	; (80022a4 <SystemInit+0x5c>)
 8002294:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002298:	609a      	str	r2, [r3, #8]
#endif
}
 800229a:	bf00      	nop
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	e000ed00 	.word	0xe000ed00
 80022a8:	40023800 	.word	0x40023800
 80022ac:	fef6ffff 	.word	0xfef6ffff
 80022b0:	24003010 	.word	0x24003010

080022b4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b088      	sub	sp, #32
 80022b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022ba:	f107 0310 	add.w	r3, r7, #16
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	605a      	str	r2, [r3, #4]
 80022c4:	609a      	str	r2, [r3, #8]
 80022c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022c8:	1d3b      	adds	r3, r7, #4
 80022ca:	2200      	movs	r2, #0
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	605a      	str	r2, [r3, #4]
 80022d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80022d2:	4b20      	ldr	r3, [pc, #128]	; (8002354 <MX_TIM1_Init+0xa0>)
 80022d4:	4a20      	ldr	r2, [pc, #128]	; (8002358 <MX_TIM1_Init+0xa4>)
 80022d6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10000-1;
 80022d8:	4b1e      	ldr	r3, [pc, #120]	; (8002354 <MX_TIM1_Init+0xa0>)
 80022da:	f242 720f 	movw	r2, #9999	; 0x270f
 80022de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022e0:	4b1c      	ldr	r3, [pc, #112]	; (8002354 <MX_TIM1_Init+0xa0>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 80022e6:	4b1b      	ldr	r3, [pc, #108]	; (8002354 <MX_TIM1_Init+0xa0>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80022ec:	4b19      	ldr	r3, [pc, #100]	; (8002354 <MX_TIM1_Init+0xa0>)
 80022ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022f2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80022f4:	4b17      	ldr	r3, [pc, #92]	; (8002354 <MX_TIM1_Init+0xa0>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022fa:	4b16      	ldr	r3, [pc, #88]	; (8002354 <MX_TIM1_Init+0xa0>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002300:	4814      	ldr	r0, [pc, #80]	; (8002354 <MX_TIM1_Init+0xa0>)
 8002302:	f004 f925 	bl	8006550 <HAL_TIM_Base_Init>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 800230c:	f7ff fdc2 	bl	8001e94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002310:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002314:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002316:	f107 0310 	add.w	r3, r7, #16
 800231a:	4619      	mov	r1, r3
 800231c:	480d      	ldr	r0, [pc, #52]	; (8002354 <MX_TIM1_Init+0xa0>)
 800231e:	f004 fae3 	bl	80068e8 <HAL_TIM_ConfigClockSource>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8002328:	f7ff fdb4 	bl	8001e94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800232c:	2300      	movs	r3, #0
 800232e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002330:	2300      	movs	r3, #0
 8002332:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002334:	2300      	movs	r3, #0
 8002336:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002338:	1d3b      	adds	r3, r7, #4
 800233a:	4619      	mov	r1, r3
 800233c:	4805      	ldr	r0, [pc, #20]	; (8002354 <MX_TIM1_Init+0xa0>)
 800233e:	f004 ff35 	bl	80071ac <HAL_TIMEx_MasterConfigSynchronization>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002348:	f7ff fda4 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800234c:	bf00      	nop
 800234e:	3720      	adds	r7, #32
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	20000830 	.word	0x20000830
 8002358:	40010000 	.word	0x40010000

0800235c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b08e      	sub	sp, #56	; 0x38
 8002360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002362:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002366:	2200      	movs	r2, #0
 8002368:	601a      	str	r2, [r3, #0]
 800236a:	605a      	str	r2, [r3, #4]
 800236c:	609a      	str	r2, [r3, #8]
 800236e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002370:	f107 031c 	add.w	r3, r7, #28
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	605a      	str	r2, [r3, #4]
 800237a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800237c:	463b      	mov	r3, r7
 800237e:	2200      	movs	r2, #0
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	605a      	str	r2, [r3, #4]
 8002384:	609a      	str	r2, [r3, #8]
 8002386:	60da      	str	r2, [r3, #12]
 8002388:	611a      	str	r2, [r3, #16]
 800238a:	615a      	str	r2, [r3, #20]
 800238c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800238e:	4b2d      	ldr	r3, [pc, #180]	; (8002444 <MX_TIM3_Init+0xe8>)
 8002390:	4a2d      	ldr	r2, [pc, #180]	; (8002448 <MX_TIM3_Init+0xec>)
 8002392:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 8002394:	4b2b      	ldr	r3, [pc, #172]	; (8002444 <MX_TIM3_Init+0xe8>)
 8002396:	220f      	movs	r2, #15
 8002398:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800239a:	4b2a      	ldr	r3, [pc, #168]	; (8002444 <MX_TIM3_Init+0xe8>)
 800239c:	2200      	movs	r2, #0
 800239e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80023a0:	4b28      	ldr	r3, [pc, #160]	; (8002444 <MX_TIM3_Init+0xe8>)
 80023a2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80023a6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023a8:	4b26      	ldr	r3, [pc, #152]	; (8002444 <MX_TIM3_Init+0xe8>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023ae:	4b25      	ldr	r3, [pc, #148]	; (8002444 <MX_TIM3_Init+0xe8>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80023b4:	4823      	ldr	r0, [pc, #140]	; (8002444 <MX_TIM3_Init+0xe8>)
 80023b6:	f004 f8cb 	bl	8006550 <HAL_TIM_Base_Init>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80023c0:	f7ff fd68 	bl	8001e94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023c8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80023ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023ce:	4619      	mov	r1, r3
 80023d0:	481c      	ldr	r0, [pc, #112]	; (8002444 <MX_TIM3_Init+0xe8>)
 80023d2:	f004 fa89 	bl	80068e8 <HAL_TIM_ConfigClockSource>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80023dc:	f7ff fd5a 	bl	8001e94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80023e0:	4818      	ldr	r0, [pc, #96]	; (8002444 <MX_TIM3_Init+0xe8>)
 80023e2:	f004 f90c 	bl	80065fe <HAL_TIM_PWM_Init>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80023ec:	f7ff fd52 	bl	8001e94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023f0:	2300      	movs	r3, #0
 80023f2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023f4:	2300      	movs	r3, #0
 80023f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023f8:	f107 031c 	add.w	r3, r7, #28
 80023fc:	4619      	mov	r1, r3
 80023fe:	4811      	ldr	r0, [pc, #68]	; (8002444 <MX_TIM3_Init+0xe8>)
 8002400:	f004 fed4 	bl	80071ac <HAL_TIMEx_MasterConfigSynchronization>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800240a:	f7ff fd43 	bl	8001e94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800240e:	2360      	movs	r3, #96	; 0x60
 8002410:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10000/4-1;
 8002412:	f640 13c3 	movw	r3, #2499	; 0x9c3
 8002416:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002418:	2300      	movs	r3, #0
 800241a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800241c:	2300      	movs	r3, #0
 800241e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002420:	463b      	mov	r3, r7
 8002422:	2208      	movs	r2, #8
 8002424:	4619      	mov	r1, r3
 8002426:	4807      	ldr	r0, [pc, #28]	; (8002444 <MX_TIM3_Init+0xe8>)
 8002428:	f004 f94a 	bl	80066c0 <HAL_TIM_PWM_ConfigChannel>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8002432:	f7ff fd2f 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002436:	4803      	ldr	r0, [pc, #12]	; (8002444 <MX_TIM3_Init+0xe8>)
 8002438:	f000 f83c 	bl	80024b4 <HAL_TIM_MspPostInit>

}
 800243c:	bf00      	nop
 800243e:	3738      	adds	r7, #56	; 0x38
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	2000087c 	.word	0x2000087c
 8002448:	40000400 	.word	0x40000400

0800244c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a13      	ldr	r2, [pc, #76]	; (80024a8 <HAL_TIM_Base_MspInit+0x5c>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d10c      	bne.n	8002478 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800245e:	4b13      	ldr	r3, [pc, #76]	; (80024ac <HAL_TIM_Base_MspInit+0x60>)
 8002460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002462:	4a12      	ldr	r2, [pc, #72]	; (80024ac <HAL_TIM_Base_MspInit+0x60>)
 8002464:	f043 0301 	orr.w	r3, r3, #1
 8002468:	6453      	str	r3, [r2, #68]	; 0x44
 800246a:	4b10      	ldr	r3, [pc, #64]	; (80024ac <HAL_TIM_Base_MspInit+0x60>)
 800246c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002476:	e010      	b.n	800249a <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM3)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a0c      	ldr	r2, [pc, #48]	; (80024b0 <HAL_TIM_Base_MspInit+0x64>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d10b      	bne.n	800249a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002482:	4b0a      	ldr	r3, [pc, #40]	; (80024ac <HAL_TIM_Base_MspInit+0x60>)
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	4a09      	ldr	r2, [pc, #36]	; (80024ac <HAL_TIM_Base_MspInit+0x60>)
 8002488:	f043 0302 	orr.w	r3, r3, #2
 800248c:	6413      	str	r3, [r2, #64]	; 0x40
 800248e:	4b07      	ldr	r3, [pc, #28]	; (80024ac <HAL_TIM_Base_MspInit+0x60>)
 8002490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	60bb      	str	r3, [r7, #8]
 8002498:	68bb      	ldr	r3, [r7, #8]
}
 800249a:	bf00      	nop
 800249c:	3714      	adds	r7, #20
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	40010000 	.word	0x40010000
 80024ac:	40023800 	.word	0x40023800
 80024b0:	40000400 	.word	0x40000400

080024b4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b088      	sub	sp, #32
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024bc:	f107 030c 	add.w	r3, r7, #12
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	605a      	str	r2, [r3, #4]
 80024c6:	609a      	str	r2, [r3, #8]
 80024c8:	60da      	str	r2, [r3, #12]
 80024ca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a11      	ldr	r2, [pc, #68]	; (8002518 <HAL_TIM_MspPostInit+0x64>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d11b      	bne.n	800250e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024d6:	4b11      	ldr	r3, [pc, #68]	; (800251c <HAL_TIM_MspPostInit+0x68>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024da:	4a10      	ldr	r2, [pc, #64]	; (800251c <HAL_TIM_MspPostInit+0x68>)
 80024dc:	f043 0302 	orr.w	r3, r3, #2
 80024e0:	6313      	str	r3, [r2, #48]	; 0x30
 80024e2:	4b0e      	ldr	r3, [pc, #56]	; (800251c <HAL_TIM_MspPostInit+0x68>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	60bb      	str	r3, [r7, #8]
 80024ec:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80024ee:	2301      	movs	r3, #1
 80024f0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f2:	2302      	movs	r3, #2
 80024f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f6:	2300      	movs	r3, #0
 80024f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024fa:	2303      	movs	r3, #3
 80024fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80024fe:	2302      	movs	r3, #2
 8002500:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002502:	f107 030c 	add.w	r3, r7, #12
 8002506:	4619      	mov	r1, r3
 8002508:	4805      	ldr	r0, [pc, #20]	; (8002520 <HAL_TIM_MspPostInit+0x6c>)
 800250a:	f002 f8e9 	bl	80046e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800250e:	bf00      	nop
 8002510:	3720      	adds	r7, #32
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	40000400 	.word	0x40000400
 800251c:	40023800 	.word	0x40023800
 8002520:	40020400 	.word	0x40020400

08002524 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002528:	4b14      	ldr	r3, [pc, #80]	; (800257c <MX_USART2_UART_Init+0x58>)
 800252a:	4a15      	ldr	r2, [pc, #84]	; (8002580 <MX_USART2_UART_Init+0x5c>)
 800252c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800252e:	4b13      	ldr	r3, [pc, #76]	; (800257c <MX_USART2_UART_Init+0x58>)
 8002530:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002534:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002536:	4b11      	ldr	r3, [pc, #68]	; (800257c <MX_USART2_UART_Init+0x58>)
 8002538:	2200      	movs	r2, #0
 800253a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800253c:	4b0f      	ldr	r3, [pc, #60]	; (800257c <MX_USART2_UART_Init+0x58>)
 800253e:	2200      	movs	r2, #0
 8002540:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002542:	4b0e      	ldr	r3, [pc, #56]	; (800257c <MX_USART2_UART_Init+0x58>)
 8002544:	2200      	movs	r2, #0
 8002546:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002548:	4b0c      	ldr	r3, [pc, #48]	; (800257c <MX_USART2_UART_Init+0x58>)
 800254a:	220c      	movs	r2, #12
 800254c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800254e:	4b0b      	ldr	r3, [pc, #44]	; (800257c <MX_USART2_UART_Init+0x58>)
 8002550:	2200      	movs	r2, #0
 8002552:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002554:	4b09      	ldr	r3, [pc, #36]	; (800257c <MX_USART2_UART_Init+0x58>)
 8002556:	2200      	movs	r2, #0
 8002558:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800255a:	4b08      	ldr	r3, [pc, #32]	; (800257c <MX_USART2_UART_Init+0x58>)
 800255c:	2200      	movs	r2, #0
 800255e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002560:	4b06      	ldr	r3, [pc, #24]	; (800257c <MX_USART2_UART_Init+0x58>)
 8002562:	2200      	movs	r2, #0
 8002564:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002566:	4805      	ldr	r0, [pc, #20]	; (800257c <MX_USART2_UART_Init+0x58>)
 8002568:	f004 feae 	bl	80072c8 <HAL_UART_Init>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002572:	f7ff fc8f 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002576:	bf00      	nop
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	200008c8 	.word	0x200008c8
 8002580:	40004400 	.word	0x40004400

08002584 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002588:	4b14      	ldr	r3, [pc, #80]	; (80025dc <MX_USART3_UART_Init+0x58>)
 800258a:	4a15      	ldr	r2, [pc, #84]	; (80025e0 <MX_USART3_UART_Init+0x5c>)
 800258c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800258e:	4b13      	ldr	r3, [pc, #76]	; (80025dc <MX_USART3_UART_Init+0x58>)
 8002590:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002594:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002596:	4b11      	ldr	r3, [pc, #68]	; (80025dc <MX_USART3_UART_Init+0x58>)
 8002598:	2200      	movs	r2, #0
 800259a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800259c:	4b0f      	ldr	r3, [pc, #60]	; (80025dc <MX_USART3_UART_Init+0x58>)
 800259e:	2200      	movs	r2, #0
 80025a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80025a2:	4b0e      	ldr	r3, [pc, #56]	; (80025dc <MX_USART3_UART_Init+0x58>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80025a8:	4b0c      	ldr	r3, [pc, #48]	; (80025dc <MX_USART3_UART_Init+0x58>)
 80025aa:	220c      	movs	r2, #12
 80025ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025ae:	4b0b      	ldr	r3, [pc, #44]	; (80025dc <MX_USART3_UART_Init+0x58>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80025b4:	4b09      	ldr	r3, [pc, #36]	; (80025dc <MX_USART3_UART_Init+0x58>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025ba:	4b08      	ldr	r3, [pc, #32]	; (80025dc <MX_USART3_UART_Init+0x58>)
 80025bc:	2200      	movs	r2, #0
 80025be:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025c0:	4b06      	ldr	r3, [pc, #24]	; (80025dc <MX_USART3_UART_Init+0x58>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80025c6:	4805      	ldr	r0, [pc, #20]	; (80025dc <MX_USART3_UART_Init+0x58>)
 80025c8:	f004 fe7e 	bl	80072c8 <HAL_UART_Init>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80025d2:	f7ff fc5f 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80025d6:	bf00      	nop
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	20000950 	.word	0x20000950
 80025e0:	40004800 	.word	0x40004800

080025e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b0b0      	sub	sp, #192	; 0xc0
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ec:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	605a      	str	r2, [r3, #4]
 80025f6:	609a      	str	r2, [r3, #8]
 80025f8:	60da      	str	r2, [r3, #12]
 80025fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025fc:	f107 031c 	add.w	r3, r7, #28
 8002600:	2290      	movs	r2, #144	; 0x90
 8002602:	2100      	movs	r1, #0
 8002604:	4618      	mov	r0, r3
 8002606:	f006 fc9e 	bl	8008f46 <memset>
  if(uartHandle->Instance==USART2)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a57      	ldr	r2, [pc, #348]	; (800276c <HAL_UART_MspInit+0x188>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d164      	bne.n	80026de <HAL_UART_MspInit+0xfa>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002614:	2380      	movs	r3, #128	; 0x80
 8002616:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002618:	2300      	movs	r3, #0
 800261a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800261c:	f107 031c 	add.w	r3, r7, #28
 8002620:	4618      	mov	r0, r3
 8002622:	f002 ffa1 	bl	8005568 <HAL_RCCEx_PeriphCLKConfig>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800262c:	f7ff fc32 	bl	8001e94 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002630:	4b4f      	ldr	r3, [pc, #316]	; (8002770 <HAL_UART_MspInit+0x18c>)
 8002632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002634:	4a4e      	ldr	r2, [pc, #312]	; (8002770 <HAL_UART_MspInit+0x18c>)
 8002636:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800263a:	6413      	str	r3, [r2, #64]	; 0x40
 800263c:	4b4c      	ldr	r3, [pc, #304]	; (8002770 <HAL_UART_MspInit+0x18c>)
 800263e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002644:	61bb      	str	r3, [r7, #24]
 8002646:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002648:	4b49      	ldr	r3, [pc, #292]	; (8002770 <HAL_UART_MspInit+0x18c>)
 800264a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264c:	4a48      	ldr	r2, [pc, #288]	; (8002770 <HAL_UART_MspInit+0x18c>)
 800264e:	f043 0301 	orr.w	r3, r3, #1
 8002652:	6313      	str	r3, [r2, #48]	; 0x30
 8002654:	4b46      	ldr	r3, [pc, #280]	; (8002770 <HAL_UART_MspInit+0x18c>)
 8002656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002658:	f003 0301 	and.w	r3, r3, #1
 800265c:	617b      	str	r3, [r7, #20]
 800265e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002660:	4b43      	ldr	r3, [pc, #268]	; (8002770 <HAL_UART_MspInit+0x18c>)
 8002662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002664:	4a42      	ldr	r2, [pc, #264]	; (8002770 <HAL_UART_MspInit+0x18c>)
 8002666:	f043 0308 	orr.w	r3, r3, #8
 800266a:	6313      	str	r3, [r2, #48]	; 0x30
 800266c:	4b40      	ldr	r3, [pc, #256]	; (8002770 <HAL_UART_MspInit+0x18c>)
 800266e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002670:	f003 0308 	and.w	r3, r3, #8
 8002674:	613b      	str	r3, [r7, #16]
 8002676:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002678:	2308      	movs	r3, #8
 800267a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267e:	2302      	movs	r3, #2
 8002680:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002684:	2300      	movs	r3, #0
 8002686:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800268a:	2303      	movs	r3, #3
 800268c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002690:	2307      	movs	r3, #7
 8002692:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002696:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800269a:	4619      	mov	r1, r3
 800269c:	4835      	ldr	r0, [pc, #212]	; (8002774 <HAL_UART_MspInit+0x190>)
 800269e:	f002 f81f 	bl	80046e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80026a2:	2320      	movs	r3, #32
 80026a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a8:	2302      	movs	r3, #2
 80026aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ae:	2300      	movs	r3, #0
 80026b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026b4:	2303      	movs	r3, #3
 80026b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026ba:	2307      	movs	r3, #7
 80026bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026c0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80026c4:	4619      	mov	r1, r3
 80026c6:	482c      	ldr	r0, [pc, #176]	; (8002778 <HAL_UART_MspInit+0x194>)
 80026c8:	f002 f80a 	bl	80046e0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 80026cc:	2200      	movs	r2, #0
 80026ce:	2102      	movs	r1, #2
 80026d0:	2026      	movs	r0, #38	; 0x26
 80026d2:	f001 fc4e 	bl	8003f72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80026d6:	2026      	movs	r0, #38	; 0x26
 80026d8:	f001 fc67 	bl	8003faa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80026dc:	e041      	b.n	8002762 <HAL_UART_MspInit+0x17e>
  else if(uartHandle->Instance==USART3)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a26      	ldr	r2, [pc, #152]	; (800277c <HAL_UART_MspInit+0x198>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d13c      	bne.n	8002762 <HAL_UART_MspInit+0x17e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80026e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026ec:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80026ee:	2300      	movs	r3, #0
 80026f0:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026f2:	f107 031c 	add.w	r3, r7, #28
 80026f6:	4618      	mov	r0, r3
 80026f8:	f002 ff36 	bl	8005568 <HAL_RCCEx_PeriphCLKConfig>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <HAL_UART_MspInit+0x122>
      Error_Handler();
 8002702:	f7ff fbc7 	bl	8001e94 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002706:	4b1a      	ldr	r3, [pc, #104]	; (8002770 <HAL_UART_MspInit+0x18c>)
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	4a19      	ldr	r2, [pc, #100]	; (8002770 <HAL_UART_MspInit+0x18c>)
 800270c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002710:	6413      	str	r3, [r2, #64]	; 0x40
 8002712:	4b17      	ldr	r3, [pc, #92]	; (8002770 <HAL_UART_MspInit+0x18c>)
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800271a:	60fb      	str	r3, [r7, #12]
 800271c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800271e:	4b14      	ldr	r3, [pc, #80]	; (8002770 <HAL_UART_MspInit+0x18c>)
 8002720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002722:	4a13      	ldr	r2, [pc, #76]	; (8002770 <HAL_UART_MspInit+0x18c>)
 8002724:	f043 0308 	orr.w	r3, r3, #8
 8002728:	6313      	str	r3, [r2, #48]	; 0x30
 800272a:	4b11      	ldr	r3, [pc, #68]	; (8002770 <HAL_UART_MspInit+0x18c>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272e:	f003 0308 	and.w	r3, r3, #8
 8002732:	60bb      	str	r3, [r7, #8]
 8002734:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002736:	f44f 7340 	mov.w	r3, #768	; 0x300
 800273a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273e:	2302      	movs	r3, #2
 8002740:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002744:	2300      	movs	r3, #0
 8002746:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800274a:	2303      	movs	r3, #3
 800274c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002750:	2307      	movs	r3, #7
 8002752:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002756:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800275a:	4619      	mov	r1, r3
 800275c:	4806      	ldr	r0, [pc, #24]	; (8002778 <HAL_UART_MspInit+0x194>)
 800275e:	f001 ffbf 	bl	80046e0 <HAL_GPIO_Init>
}
 8002762:	bf00      	nop
 8002764:	37c0      	adds	r7, #192	; 0xc0
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	40004400 	.word	0x40004400
 8002770:	40023800 	.word	0x40023800
 8002774:	40020000 	.word	0x40020000
 8002778:	40020c00 	.word	0x40020c00
 800277c:	40004800 	.word	0x40004800

08002780 <Read_IRQ>:

extern SPI_HandleTypeDef hspi3;
volatile uint8_t receive_data = 0;
volatile uint8_t send_cmd;

uint8_t Read_IRQ(){
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1) == SET;
 8002784:	2102      	movs	r1, #2
 8002786:	4805      	ldr	r0, [pc, #20]	; (800279c <Read_IRQ+0x1c>)
 8002788:	f002 f956 	bl	8004a38 <HAL_GPIO_ReadPin>
 800278c:	4603      	mov	r3, r0
 800278e:	2b01      	cmp	r3, #1
 8002790:	bf0c      	ite	eq
 8002792:	2301      	moveq	r3, #1
 8002794:	2300      	movne	r3, #0
 8002796:	b2db      	uxtb	r3, r3
}
 8002798:	4618      	mov	r0, r3
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40020c00 	.word	0x40020c00

080027a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80027a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80027a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80027a6:	e003      	b.n	80027b0 <LoopCopyDataInit>

080027a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80027a8:	4b0c      	ldr	r3, [pc, #48]	; (80027dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80027aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80027ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80027ae:	3104      	adds	r1, #4

080027b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80027b0:	480b      	ldr	r0, [pc, #44]	; (80027e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80027b2:	4b0c      	ldr	r3, [pc, #48]	; (80027e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80027b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80027b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80027b8:	d3f6      	bcc.n	80027a8 <CopyDataInit>
  ldr  r2, =_sbss
 80027ba:	4a0b      	ldr	r2, [pc, #44]	; (80027e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80027bc:	e002      	b.n	80027c4 <LoopFillZerobss>

080027be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80027be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80027c0:	f842 3b04 	str.w	r3, [r2], #4

080027c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80027c4:	4b09      	ldr	r3, [pc, #36]	; (80027ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80027c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80027c8:	d3f9      	bcc.n	80027be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80027ca:	f7ff fd3d 	bl	8002248 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027ce:	f006 fc13 	bl	8008ff8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027d2:	f7fe fa3b 	bl	8000c4c <main>
  bx  lr    
 80027d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80027d8:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80027dc:	0800b750 	.word	0x0800b750
  ldr  r0, =_sdata
 80027e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80027e4:	200005ec 	.word	0x200005ec
  ldr  r2, =_sbss
 80027e8:	200005ec 	.word	0x200005ec
  ldr  r3, = _ebss
 80027ec:	20000b28 	.word	0x20000b28

080027f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027f0:	e7fe      	b.n	80027f0 <ADC_IRQHandler>

080027f2 <ILI9341_Draw_Filled_Circle>:
    }
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 80027f2:	b590      	push	{r4, r7, lr}
 80027f4:	b08b      	sub	sp, #44	; 0x2c
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	4604      	mov	r4, r0
 80027fa:	4608      	mov	r0, r1
 80027fc:	4611      	mov	r1, r2
 80027fe:	461a      	mov	r2, r3
 8002800:	4623      	mov	r3, r4
 8002802:	80fb      	strh	r3, [r7, #6]
 8002804:	4603      	mov	r3, r0
 8002806:	80bb      	strh	r3, [r7, #4]
 8002808:	460b      	mov	r3, r1
 800280a:	807b      	strh	r3, [r7, #2]
 800280c:	4613      	mov	r3, r2
 800280e:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 8002810:	887b      	ldrh	r3, [r7, #2]
 8002812:	627b      	str	r3, [r7, #36]	; 0x24
    int y = 0;
 8002814:	2300      	movs	r3, #0
 8002816:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 8002818:	887b      	ldrh	r3, [r7, #2]
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	f1c3 0301 	rsb	r3, r3, #1
 8002820:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 8002822:	2300      	movs	r3, #0
 8002824:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 8002826:	2300      	movs	r3, #0
 8002828:	617b      	str	r3, [r7, #20]

    while (x >= y)
 800282a:	e061      	b.n	80028f0 <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 800282c:	88fa      	ldrh	r2, [r7, #6]
 800282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	613b      	str	r3, [r7, #16]
 8002834:	e018      	b.n	8002868 <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	b298      	uxth	r0, r3
 800283a:	6a3b      	ldr	r3, [r7, #32]
 800283c:	b29a      	uxth	r2, r3
 800283e:	88bb      	ldrh	r3, [r7, #4]
 8002840:	4413      	add	r3, r2
 8002842:	b29b      	uxth	r3, r3
 8002844:	883a      	ldrh	r2, [r7, #0]
 8002846:	4619      	mov	r1, r3
 8002848:	f000 fd2e 	bl	80032a8 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	b298      	uxth	r0, r3
 8002850:	6a3b      	ldr	r3, [r7, #32]
 8002852:	b29b      	uxth	r3, r3
 8002854:	88ba      	ldrh	r2, [r7, #4]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	b29b      	uxth	r3, r3
 800285a:	883a      	ldrh	r2, [r7, #0]
 800285c:	4619      	mov	r1, r3
 800285e:	f000 fd23 	bl	80032a8 <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	3301      	adds	r3, #1
 8002866:	613b      	str	r3, [r7, #16]
 8002868:	88fa      	ldrh	r2, [r7, #6]
 800286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286c:	4413      	add	r3, r2
 800286e:	693a      	ldr	r2, [r7, #16]
 8002870:	429a      	cmp	r2, r3
 8002872:	dde0      	ble.n	8002836 <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 8002874:	88fa      	ldrh	r2, [r7, #6]
 8002876:	6a3b      	ldr	r3, [r7, #32]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	60fb      	str	r3, [r7, #12]
 800287c:	e018      	b.n	80028b0 <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	b298      	uxth	r0, r3
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	b29a      	uxth	r2, r3
 8002886:	88bb      	ldrh	r3, [r7, #4]
 8002888:	4413      	add	r3, r2
 800288a:	b29b      	uxth	r3, r3
 800288c:	883a      	ldrh	r2, [r7, #0]
 800288e:	4619      	mov	r1, r3
 8002890:	f000 fd0a 	bl	80032a8 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	b298      	uxth	r0, r3
 8002898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289a:	b29b      	uxth	r3, r3
 800289c:	88ba      	ldrh	r2, [r7, #4]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	883a      	ldrh	r2, [r7, #0]
 80028a4:	4619      	mov	r1, r3
 80028a6:	f000 fcff 	bl	80032a8 <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	3301      	adds	r3, #1
 80028ae:	60fb      	str	r3, [r7, #12]
 80028b0:	88fa      	ldrh	r2, [r7, #6]
 80028b2:	6a3b      	ldr	r3, [r7, #32]
 80028b4:	4413      	add	r3, r2
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	dde0      	ble.n	800287e <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 80028bc:	6a3b      	ldr	r3, [r7, #32]
 80028be:	3301      	adds	r3, #1
 80028c0:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	4413      	add	r3, r2
 80028c8:	617b      	str	r3, [r7, #20]
        yChange += 2;
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	3302      	adds	r3, #2
 80028ce:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	005a      	lsls	r2, r3, #1
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	4413      	add	r3, r2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	dd09      	ble.n	80028f0 <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 80028dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028de:	3b01      	subs	r3, #1
 80028e0:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 80028e2:	697a      	ldr	r2, [r7, #20]
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	4413      	add	r3, r2
 80028e8:	617b      	str	r3, [r7, #20]
            xChange += 2;
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	3302      	adds	r3, #2
 80028ee:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 80028f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028f2:	6a3b      	ldr	r3, [r7, #32]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	da99      	bge.n	800282c <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 80028f8:	bf00      	nop
 80028fa:	bf00      	nop
 80028fc:	372c      	adds	r7, #44	; 0x2c
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd90      	pop	{r4, r7, pc}

08002902 <ILI9341_Draw_Filled_Rectangle_Coord>:
	
}

/*Draw a filled rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 8002902:	b590      	push	{r4, r7, lr}
 8002904:	b089      	sub	sp, #36	; 0x24
 8002906:	af02      	add	r7, sp, #8
 8002908:	4604      	mov	r4, r0
 800290a:	4608      	mov	r0, r1
 800290c:	4611      	mov	r1, r2
 800290e:	461a      	mov	r2, r3
 8002910:	4623      	mov	r3, r4
 8002912:	80fb      	strh	r3, [r7, #6]
 8002914:	4603      	mov	r3, r0
 8002916:	80bb      	strh	r3, [r7, #4]
 8002918:	460b      	mov	r3, r1
 800291a:	807b      	strh	r3, [r7, #2]
 800291c:	4613      	mov	r3, r2
 800291e:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 8002920:	2300      	movs	r3, #0
 8002922:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 8002924:	2300      	movs	r3, #0
 8002926:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 8002928:	2300      	movs	r3, #0
 800292a:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 800292c:	2300      	movs	r3, #0
 800292e:	74bb      	strb	r3, [r7, #18]
	int32_t 	Calc_Negative = 0;
 8002930:	2300      	movs	r3, #0
 8002932:	60bb      	str	r3, [r7, #8]
	
	uint16_t X0_true = 0;
 8002934:	2300      	movs	r3, #0
 8002936:	823b      	strh	r3, [r7, #16]
	uint16_t Y0_true = 0;
 8002938:	2300      	movs	r3, #0
 800293a:	81fb      	strh	r3, [r7, #14]
	
	Calc_Negative = X1 - X0;
 800293c:	887a      	ldrh	r2, [r7, #2]
 800293e:	88fb      	ldrh	r3, [r7, #6]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_X = 1;
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	2b00      	cmp	r3, #0
 8002948:	da01      	bge.n	800294e <ILI9341_Draw_Filled_Rectangle_Coord+0x4c>
 800294a:	2301      	movs	r3, #1
 800294c:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 800294e:	2300      	movs	r3, #0
 8002950:	60bb      	str	r3, [r7, #8]
	
	Calc_Negative = Y1 - Y0;
 8002952:	883a      	ldrh	r2, [r7, #0]
 8002954:	88bb      	ldrh	r3, [r7, #4]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_Y = 1;
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	2b00      	cmp	r3, #0
 800295e:	da01      	bge.n	8002964 <ILI9341_Draw_Filled_Rectangle_Coord+0x62>
 8002960:	2301      	movs	r3, #1
 8002962:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 8002964:	7cfb      	ldrb	r3, [r7, #19]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d106      	bne.n	8002978 <ILI9341_Draw_Filled_Rectangle_Coord+0x76>
	{
		X_length = X1 - X0;
 800296a:	887a      	ldrh	r2, [r7, #2]
 800296c:	88fb      	ldrh	r3, [r7, #6]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	82fb      	strh	r3, [r7, #22]
		X0_true = X0;
 8002972:	88fb      	ldrh	r3, [r7, #6]
 8002974:	823b      	strh	r3, [r7, #16]
 8002976:	e005      	b.n	8002984 <ILI9341_Draw_Filled_Rectangle_Coord+0x82>
	}
	else
	{
		X_length = X0 - X1;
 8002978:	88fa      	ldrh	r2, [r7, #6]
 800297a:	887b      	ldrh	r3, [r7, #2]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	82fb      	strh	r3, [r7, #22]
		X0_true = X1;
 8002980:	887b      	ldrh	r3, [r7, #2]
 8002982:	823b      	strh	r3, [r7, #16]
	}
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 8002984:	7cbb      	ldrb	r3, [r7, #18]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d106      	bne.n	8002998 <ILI9341_Draw_Filled_Rectangle_Coord+0x96>
	{
		Y_length = Y1 - Y0;
 800298a:	883a      	ldrh	r2, [r7, #0]
 800298c:	88bb      	ldrh	r3, [r7, #4]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y0;		
 8002992:	88bb      	ldrh	r3, [r7, #4]
 8002994:	81fb      	strh	r3, [r7, #14]
 8002996:	e005      	b.n	80029a4 <ILI9341_Draw_Filled_Rectangle_Coord+0xa2>
	}
	else
	{
		Y_length = Y0 - Y1;
 8002998:	88ba      	ldrh	r2, [r7, #4]
 800299a:	883b      	ldrh	r3, [r7, #0]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y1;	
 80029a0:	883b      	ldrh	r3, [r7, #0]
 80029a2:	81fb      	strh	r3, [r7, #14]
	}
	
	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);	
 80029a4:	8abc      	ldrh	r4, [r7, #20]
 80029a6:	8afa      	ldrh	r2, [r7, #22]
 80029a8:	89f9      	ldrh	r1, [r7, #14]
 80029aa:	8a38      	ldrh	r0, [r7, #16]
 80029ac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80029ae:	9300      	str	r3, [sp, #0]
 80029b0:	4623      	mov	r3, r4
 80029b2:	f000 fd53 	bl	800345c <ILI9341_Draw_Rectangle>
}
 80029b6:	bf00      	nop
 80029b8:	371c      	adds	r7, #28
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd90      	pop	{r4, r7, pc}
	...

080029c0 <ILI9341_Draw_Char>:

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 80029c0:	b590      	push	{r4, r7, lr}
 80029c2:	b089      	sub	sp, #36	; 0x24
 80029c4:	af02      	add	r7, sp, #8
 80029c6:	4604      	mov	r4, r0
 80029c8:	4608      	mov	r0, r1
 80029ca:	4611      	mov	r1, r2
 80029cc:	461a      	mov	r2, r3
 80029ce:	4623      	mov	r3, r4
 80029d0:	71fb      	strb	r3, [r7, #7]
 80029d2:	4603      	mov	r3, r0
 80029d4:	71bb      	strb	r3, [r7, #6]
 80029d6:	460b      	mov	r3, r1
 80029d8:	717b      	strb	r3, [r7, #5]
 80029da:	4613      	mov	r3, r2
 80029dc:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 80029de:	79fb      	ldrb	r3, [r7, #7]
 80029e0:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 80029e2:	7dfb      	ldrb	r3, [r7, #23]
 80029e4:	2b1f      	cmp	r3, #31
 80029e6:	d802      	bhi.n	80029ee <ILI9341_Draw_Char+0x2e>
        Character = 0;
 80029e8:	2300      	movs	r3, #0
 80029ea:	71fb      	strb	r3, [r7, #7]
 80029ec:	e002      	b.n	80029f4 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 80029ee:	7dfb      	ldrb	r3, [r7, #23]
 80029f0:	3b20      	subs	r3, #32
 80029f2:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80029f4:	2300      	movs	r3, #0
 80029f6:	753b      	strb	r3, [r7, #20]
 80029f8:	e012      	b.n	8002a20 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 80029fa:	7dfa      	ldrb	r2, [r7, #23]
 80029fc:	7d38      	ldrb	r0, [r7, #20]
 80029fe:	7d39      	ldrb	r1, [r7, #20]
 8002a00:	4c3b      	ldr	r4, [pc, #236]	; (8002af0 <ILI9341_Draw_Char+0x130>)
 8002a02:	4613      	mov	r3, r2
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	4413      	add	r3, r2
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	4423      	add	r3, r4
 8002a0c:	4403      	add	r3, r0
 8002a0e:	781a      	ldrb	r2, [r3, #0]
 8002a10:	f101 0318 	add.w	r3, r1, #24
 8002a14:	443b      	add	r3, r7
 8002a16:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8002a1a:	7d3b      	ldrb	r3, [r7, #20]
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	753b      	strb	r3, [r7, #20]
 8002a20:	7d3b      	ldrb	r3, [r7, #20]
 8002a22:	2b05      	cmp	r3, #5
 8002a24:	d9e9      	bls.n	80029fa <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8002a26:	79bb      	ldrb	r3, [r7, #6]
 8002a28:	b298      	uxth	r0, r3
 8002a2a:	797b      	ldrb	r3, [r7, #5]
 8002a2c:	b299      	uxth	r1, r3
 8002a2e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002a30:	461a      	mov	r2, r3
 8002a32:	0052      	lsls	r2, r2, #1
 8002a34:	4413      	add	r3, r2
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	b29c      	uxth	r4, r3
 8002a40:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002a42:	9300      	str	r3, [sp, #0]
 8002a44:	4623      	mov	r3, r4
 8002a46:	f000 fd09 	bl	800345c <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	757b      	strb	r3, [r7, #21]
 8002a4e:	e047      	b.n	8002ae0 <ILI9341_Draw_Char+0x120>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8002a50:	2300      	movs	r3, #0
 8002a52:	75bb      	strb	r3, [r7, #22]
 8002a54:	e03e      	b.n	8002ad4 <ILI9341_Draw_Char+0x114>
            if (temp[j] & (1<<i)) {			
 8002a56:	7d7b      	ldrb	r3, [r7, #21]
 8002a58:	3318      	adds	r3, #24
 8002a5a:	443b      	add	r3, r7
 8002a5c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002a60:	461a      	mov	r2, r3
 8002a62:	7dbb      	ldrb	r3, [r7, #22]
 8002a64:	fa42 f303 	asr.w	r3, r2, r3
 8002a68:	f003 0301 	and.w	r3, r3, #1
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d02e      	beq.n	8002ace <ILI9341_Draw_Char+0x10e>
							if(Size == 1)
 8002a70:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d110      	bne.n	8002a98 <ILI9341_Draw_Char+0xd8>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8002a76:	79bb      	ldrb	r3, [r7, #6]
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	7d7b      	ldrb	r3, [r7, #21]
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	4413      	add	r3, r2
 8002a80:	b298      	uxth	r0, r3
 8002a82:	797b      	ldrb	r3, [r7, #5]
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	7dbb      	ldrb	r3, [r7, #22]
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	4413      	add	r3, r2
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	887a      	ldrh	r2, [r7, #2]
 8002a90:	4619      	mov	r1, r3
 8002a92:	f000 fc09 	bl	80032a8 <ILI9341_Draw_Pixel>
 8002a96:	e01a      	b.n	8002ace <ILI9341_Draw_Char+0x10e>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8002a98:	79bb      	ldrb	r3, [r7, #6]
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	7d7b      	ldrb	r3, [r7, #21]
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8002aa2:	fb11 f303 	smulbb	r3, r1, r3
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	4413      	add	r3, r2
 8002aaa:	b298      	uxth	r0, r3
 8002aac:	797b      	ldrb	r3, [r7, #5]
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	7dbb      	ldrb	r3, [r7, #22]
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8002ab6:	fb11 f303 	smulbb	r3, r1, r3
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	4413      	add	r3, r2
 8002abe:	b299      	uxth	r1, r3
 8002ac0:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8002ac2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002ac4:	887b      	ldrh	r3, [r7, #2]
 8002ac6:	9300      	str	r3, [sp, #0]
 8002ac8:	4623      	mov	r3, r4
 8002aca:	f000 fcc7 	bl	800345c <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8002ace:	7dbb      	ldrb	r3, [r7, #22]
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	75bb      	strb	r3, [r7, #22]
 8002ad4:	7dbb      	ldrb	r3, [r7, #22]
 8002ad6:	2b07      	cmp	r3, #7
 8002ad8:	d9bd      	bls.n	8002a56 <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 8002ada:	7d7b      	ldrb	r3, [r7, #21]
 8002adc:	3301      	adds	r3, #1
 8002ade:	757b      	strb	r3, [r7, #21]
 8002ae0:	7d7b      	ldrb	r3, [r7, #21]
 8002ae2:	2b05      	cmp	r3, #5
 8002ae4:	d9b4      	bls.n	8002a50 <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 8002ae6:	bf00      	nop
 8002ae8:	bf00      	nop
 8002aea:	371c      	adds	r7, #28
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd90      	pop	{r4, r7, pc}
 8002af0:	0800b130 	.word	0x0800b130

08002af4 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8002af4:	b590      	push	{r4, r7, lr}
 8002af6:	b085      	sub	sp, #20
 8002af8:	af02      	add	r7, sp, #8
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	4608      	mov	r0, r1
 8002afe:	4611      	mov	r1, r2
 8002b00:	461a      	mov	r2, r3
 8002b02:	4603      	mov	r3, r0
 8002b04:	70fb      	strb	r3, [r7, #3]
 8002b06:	460b      	mov	r3, r1
 8002b08:	70bb      	strb	r3, [r7, #2]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 8002b0e:	e017      	b.n	8002b40 <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	1c5a      	adds	r2, r3, #1
 8002b14:	607a      	str	r2, [r7, #4]
 8002b16:	7818      	ldrb	r0, [r3, #0]
 8002b18:	883c      	ldrh	r4, [r7, #0]
 8002b1a:	78ba      	ldrb	r2, [r7, #2]
 8002b1c:	78f9      	ldrb	r1, [r7, #3]
 8002b1e:	8bbb      	ldrh	r3, [r7, #28]
 8002b20:	9301      	str	r3, [sp, #4]
 8002b22:	8b3b      	ldrh	r3, [r7, #24]
 8002b24:	9300      	str	r3, [sp, #0]
 8002b26:	4623      	mov	r3, r4
 8002b28:	f7ff ff4a 	bl	80029c0 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8002b2c:	8b3b      	ldrh	r3, [r7, #24]
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	461a      	mov	r2, r3
 8002b32:	0052      	lsls	r2, r2, #1
 8002b34:	4413      	add	r3, r2
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	b2da      	uxtb	r2, r3
 8002b3a:	78fb      	ldrb	r3, [r7, #3]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d1e3      	bne.n	8002b10 <ILI9341_Draw_Text+0x1c>
    }
}
 8002b48:	bf00      	nop
 8002b4a:	bf00      	nop
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd90      	pop	{r4, r7, pc}

08002b52 <ILI9341_Write_Pic_Coor>:
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
	}
}

void ILI9341_Write_Pic_Coor(uint16_t x,uint16_t y, uint16_t length, uint16_t width, uint16_t *pic)
{
 8002b52:	b590      	push	{r4, r7, lr}
 8002b54:	b085      	sub	sp, #20
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	4604      	mov	r4, r0
 8002b5a:	4608      	mov	r0, r1
 8002b5c:	4611      	mov	r1, r2
 8002b5e:	461a      	mov	r2, r3
 8002b60:	4623      	mov	r3, r4
 8002b62:	80fb      	strh	r3, [r7, #6]
 8002b64:	4603      	mov	r3, r0
 8002b66:	80bb      	strh	r3, [r7, #4]
 8002b68:	460b      	mov	r3, r1
 8002b6a:	807b      	strh	r3, [r7, #2]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	803b      	strh	r3, [r7, #0]
	uint16_t index_x = 0, index_y = 0, i = 0;
 8002b70:	2300      	movs	r3, #0
 8002b72:	81fb      	strh	r3, [r7, #14]
 8002b74:	2300      	movs	r3, #0
 8002b76:	81bb      	strh	r3, [r7, #12]
 8002b78:	2300      	movs	r3, #0
 8002b7a:	817b      	strh	r3, [r7, #10]
	for(index_y = 0; index_y < width; index_y++){
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	81bb      	strh	r3, [r7, #12]
 8002b80:	e01f      	b.n	8002bc2 <ILI9341_Write_Pic_Coor+0x70>
	        for(index_x = 0; index_x < length; index_x++){
 8002b82:	2300      	movs	r3, #0
 8002b84:	81fb      	strh	r3, [r7, #14]
 8002b86:	e015      	b.n	8002bb4 <ILI9341_Write_Pic_Coor+0x62>
	        	ILI9341_Draw_Pixel(x + index_x, y + index_y, pic[i]);
 8002b88:	88fa      	ldrh	r2, [r7, #6]
 8002b8a:	89fb      	ldrh	r3, [r7, #14]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	b298      	uxth	r0, r3
 8002b90:	88ba      	ldrh	r2, [r7, #4]
 8002b92:	89bb      	ldrh	r3, [r7, #12]
 8002b94:	4413      	add	r3, r2
 8002b96:	b299      	uxth	r1, r3
 8002b98:	897b      	ldrh	r3, [r7, #10]
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	6a3a      	ldr	r2, [r7, #32]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	881b      	ldrh	r3, [r3, #0]
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	f000 fb80 	bl	80032a8 <ILI9341_Draw_Pixel>
	            i++;
 8002ba8:	897b      	ldrh	r3, [r7, #10]
 8002baa:	3301      	adds	r3, #1
 8002bac:	817b      	strh	r3, [r7, #10]
	        for(index_x = 0; index_x < length; index_x++){
 8002bae:	89fb      	ldrh	r3, [r7, #14]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	81fb      	strh	r3, [r7, #14]
 8002bb4:	89fa      	ldrh	r2, [r7, #14]
 8002bb6:	887b      	ldrh	r3, [r7, #2]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d3e5      	bcc.n	8002b88 <ILI9341_Write_Pic_Coor+0x36>
	for(index_y = 0; index_y < width; index_y++){
 8002bbc:	89bb      	ldrh	r3, [r7, #12]
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	81bb      	strh	r3, [r7, #12]
 8002bc2:	89ba      	ldrh	r2, [r7, #12]
 8002bc4:	883b      	ldrh	r3, [r7, #0]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d3db      	bcc.n	8002b82 <ILI9341_Write_Pic_Coor+0x30>
	        }
	}
}
 8002bca:	bf00      	nop
 8002bcc:	bf00      	nop
 8002bce:	3714      	adds	r7, #20
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd90      	pop	{r4, r7, pc}

08002bd4 <ILI9341_Fill_Color>:

void ILI9341_Fill_Color(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color) {
 8002bd4:	b590      	push	{r4, r7, lr}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	4604      	mov	r4, r0
 8002bdc:	4608      	mov	r0, r1
 8002bde:	4611      	mov	r1, r2
 8002be0:	461a      	mov	r2, r3
 8002be2:	4623      	mov	r3, r4
 8002be4:	80fb      	strh	r3, [r7, #6]
 8002be6:	4603      	mov	r3, r0
 8002be8:	80bb      	strh	r3, [r7, #4]
 8002bea:	460b      	mov	r3, r1
 8002bec:	807b      	strh	r3, [r7, #2]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	803b      	strh	r3, [r7, #0]
  uint32_t total_pixels = (x2 - x1 + 1) * (y2 - y1 + 1);
 8002bf2:	887a      	ldrh	r2, [r7, #2]
 8002bf4:	88fb      	ldrh	r3, [r7, #6]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	8839      	ldrh	r1, [r7, #0]
 8002bfc:	88ba      	ldrh	r2, [r7, #4]
 8002bfe:	1a8a      	subs	r2, r1, r2
 8002c00:	3201      	adds	r2, #1
 8002c02:	fb02 f303 	mul.w	r3, r2, r3
 8002c06:	60fb      	str	r3, [r7, #12]

  // ตั้งค่าพิกัด
  ILI9341_Write_Command(0x2A);
 8002c08:	202a      	movs	r0, #42	; 0x2a
 8002c0a:	f000 f86f 	bl	8002cec <ILI9341_Write_Command>
  ILI9341_Write_Data(x1 >> 8);
 8002c0e:	88fb      	ldrh	r3, [r7, #6]
 8002c10:	0a1b      	lsrs	r3, r3, #8
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	4618      	mov	r0, r3
 8002c18:	f000 f88a 	bl	8002d30 <ILI9341_Write_Data>
  ILI9341_Write_Data(x1 & 0xFF);
 8002c1c:	88fb      	ldrh	r3, [r7, #6]
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	4618      	mov	r0, r3
 8002c22:	f000 f885 	bl	8002d30 <ILI9341_Write_Data>
  ILI9341_Write_Data(x2 >> 8);
 8002c26:	887b      	ldrh	r3, [r7, #2]
 8002c28:	0a1b      	lsrs	r3, r3, #8
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f000 f87e 	bl	8002d30 <ILI9341_Write_Data>
  ILI9341_Write_Data(x2 & 0xFF);
 8002c34:	887b      	ldrh	r3, [r7, #2]
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f000 f879 	bl	8002d30 <ILI9341_Write_Data>

  ILI9341_Write_Command(0x2B);
 8002c3e:	202b      	movs	r0, #43	; 0x2b
 8002c40:	f000 f854 	bl	8002cec <ILI9341_Write_Command>
  ILI9341_Write_Data(y1 >> 8);
 8002c44:	88bb      	ldrh	r3, [r7, #4]
 8002c46:	0a1b      	lsrs	r3, r3, #8
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f000 f86f 	bl	8002d30 <ILI9341_Write_Data>
  ILI9341_Write_Data(y1 & 0xFF);
 8002c52:	88bb      	ldrh	r3, [r7, #4]
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	4618      	mov	r0, r3
 8002c58:	f000 f86a 	bl	8002d30 <ILI9341_Write_Data>
  ILI9341_Write_Data(y2 >> 8);
 8002c5c:	883b      	ldrh	r3, [r7, #0]
 8002c5e:	0a1b      	lsrs	r3, r3, #8
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	4618      	mov	r0, r3
 8002c66:	f000 f863 	bl	8002d30 <ILI9341_Write_Data>
  ILI9341_Write_Data(y2 & 0xFF);
 8002c6a:	883b      	ldrh	r3, [r7, #0]
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f000 f85e 	bl	8002d30 <ILI9341_Write_Data>

  // เขียนข้อมูลสี
  ILI9341_Write_Command(0x2C);
 8002c74:	202c      	movs	r0, #44	; 0x2c
 8002c76:	f000 f839 	bl	8002cec <ILI9341_Write_Command>
  while (total_pixels--) {
 8002c7a:	e00b      	b.n	8002c94 <ILI9341_Fill_Color+0xc0>
    ILI9341_Write_Data(color >> 8);
 8002c7c:	8c3b      	ldrh	r3, [r7, #32]
 8002c7e:	0a1b      	lsrs	r3, r3, #8
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	4618      	mov	r0, r3
 8002c86:	f000 f853 	bl	8002d30 <ILI9341_Write_Data>
    ILI9341_Write_Data(color & 0xFF);
 8002c8a:	8c3b      	ldrh	r3, [r7, #32]
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f000 f84e 	bl	8002d30 <ILI9341_Write_Data>
  while (total_pixels--) {
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	1e5a      	subs	r2, r3, #1
 8002c98:	60fa      	str	r2, [r7, #12]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1ee      	bne.n	8002c7c <ILI9341_Fill_Color+0xa8>
  }
}
 8002c9e:	bf00      	nop
 8002ca0:	bf00      	nop
 8002ca2:	3714      	adds	r7, #20
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd90      	pop	{r4, r7, pc}

08002ca8 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
MX_SPI5_Init();																							//SPI INIT
 8002cac:	f7ff f93e 	bl	8001f2c <MX_SPI5_Init>
MX_GPIO_Init();																							//GPIO INIT
 8002cb0:	f7fd fdfc 	bl	80008ac <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002cba:	4802      	ldr	r0, [pc, #8]	; (8002cc4 <ILI9341_SPI_Init+0x1c>)
 8002cbc:	f001 fed4 	bl	8004a68 <HAL_GPIO_WritePin>
}
 8002cc0:	bf00      	nop
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	40020800 	.word	0x40020800

08002cc8 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	4603      	mov	r3, r0
 8002cd0:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8002cd2:	1df9      	adds	r1, r7, #7
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	4803      	ldr	r0, [pc, #12]	; (8002ce8 <ILI9341_SPI_Send+0x20>)
 8002cda:	f003 f942 	bl	8005f62 <HAL_SPI_Transmit>
}
 8002cde:	bf00      	nop
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	200007c8 	.word	0x200007c8

08002cec <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002cfc:	480b      	ldr	r0, [pc, #44]	; (8002d2c <ILI9341_Write_Command+0x40>)
 8002cfe:	f001 feb3 	bl	8004a68 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002d02:	2200      	movs	r2, #0
 8002d04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d08:	4808      	ldr	r0, [pc, #32]	; (8002d2c <ILI9341_Write_Command+0x40>)
 8002d0a:	f001 fead 	bl	8004a68 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8002d0e:	79fb      	ldrb	r3, [r7, #7]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7ff ffd9 	bl	8002cc8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8002d16:	2201      	movs	r2, #1
 8002d18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d1c:	4803      	ldr	r0, [pc, #12]	; (8002d2c <ILI9341_Write_Command+0x40>)
 8002d1e:	f001 fea3 	bl	8004a68 <HAL_GPIO_WritePin>
}
 8002d22:	bf00      	nop
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	40020800 	.word	0x40020800

08002d30 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	4603      	mov	r3, r0
 8002d38:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d40:	480b      	ldr	r0, [pc, #44]	; (8002d70 <ILI9341_Write_Data+0x40>)
 8002d42:	f001 fe91 	bl	8004a68 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002d46:	2200      	movs	r2, #0
 8002d48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d4c:	4808      	ldr	r0, [pc, #32]	; (8002d70 <ILI9341_Write_Data+0x40>)
 8002d4e:	f001 fe8b 	bl	8004a68 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8002d52:	79fb      	ldrb	r3, [r7, #7]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff ffb7 	bl	8002cc8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d60:	4803      	ldr	r0, [pc, #12]	; (8002d70 <ILI9341_Write_Data+0x40>)
 8002d62:	f001 fe81 	bl	8004a68 <HAL_GPIO_WritePin>
}
 8002d66:	bf00      	nop
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	40020800 	.word	0x40020800

08002d74 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8002d74:	b590      	push	{r4, r7, lr}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	4604      	mov	r4, r0
 8002d7c:	4608      	mov	r0, r1
 8002d7e:	4611      	mov	r1, r2
 8002d80:	461a      	mov	r2, r3
 8002d82:	4623      	mov	r3, r4
 8002d84:	80fb      	strh	r3, [r7, #6]
 8002d86:	4603      	mov	r3, r0
 8002d88:	80bb      	strh	r3, [r7, #4]
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	807b      	strh	r3, [r7, #2]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8002d92:	202a      	movs	r0, #42	; 0x2a
 8002d94:	f7ff ffaa 	bl	8002cec <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8002d98:	88fb      	ldrh	r3, [r7, #6]
 8002d9a:	0a1b      	lsrs	r3, r3, #8
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff ffc5 	bl	8002d30 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8002da6:	88fb      	ldrh	r3, [r7, #6]
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff ffc0 	bl	8002d30 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8002db0:	887b      	ldrh	r3, [r7, #2]
 8002db2:	0a1b      	lsrs	r3, r3, #8
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff ffb9 	bl	8002d30 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8002dbe:	887b      	ldrh	r3, [r7, #2]
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7ff ffb4 	bl	8002d30 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8002dc8:	202b      	movs	r0, #43	; 0x2b
 8002dca:	f7ff ff8f 	bl	8002cec <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8002dce:	88bb      	ldrh	r3, [r7, #4]
 8002dd0:	0a1b      	lsrs	r3, r3, #8
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7ff ffaa 	bl	8002d30 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8002ddc:	88bb      	ldrh	r3, [r7, #4]
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff ffa5 	bl	8002d30 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8002de6:	883b      	ldrh	r3, [r7, #0]
 8002de8:	0a1b      	lsrs	r3, r3, #8
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7ff ff9e 	bl	8002d30 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8002df4:	883b      	ldrh	r3, [r7, #0]
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7ff ff99 	bl	8002d30 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8002dfe:	202c      	movs	r0, #44	; 0x2c
 8002e00:	f7ff ff74 	bl	8002cec <ILI9341_Write_Command>
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd90      	pop	{r4, r7, pc}

08002e0c <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8002e10:	2201      	movs	r2, #1
 8002e12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e16:	480b      	ldr	r0, [pc, #44]	; (8002e44 <ILI9341_Reset+0x38>)
 8002e18:	f001 fe26 	bl	8004a68 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8002e1c:	20c8      	movs	r0, #200	; 0xc8
 8002e1e:	f000 fc23 	bl	8003668 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002e22:	2200      	movs	r2, #0
 8002e24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e28:	4806      	ldr	r0, [pc, #24]	; (8002e44 <ILI9341_Reset+0x38>)
 8002e2a:	f001 fe1d 	bl	8004a68 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8002e2e:	20c8      	movs	r0, #200	; 0xc8
 8002e30:	f000 fc1a 	bl	8003668 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8002e34:	2201      	movs	r2, #1
 8002e36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e3a:	4802      	ldr	r0, [pc, #8]	; (8002e44 <ILI9341_Reset+0x38>)
 8002e3c:	f001 fe14 	bl	8004a68 <HAL_GPIO_WritePin>
}
 8002e40:	bf00      	nop
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40020800 	.word	0x40020800

08002e48 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	4603      	mov	r3, r0
 8002e50:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8002e52:	79fb      	ldrb	r3, [r7, #7]
 8002e54:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8002e56:	2036      	movs	r0, #54	; 0x36
 8002e58:	f7ff ff48 	bl	8002cec <ILI9341_Write_Command>
HAL_Delay(1);
 8002e5c:	2001      	movs	r0, #1
 8002e5e:	f000 fc03 	bl	8003668 <HAL_Delay>
	
switch(screen_rotation) 
 8002e62:	7bfb      	ldrb	r3, [r7, #15]
 8002e64:	2b03      	cmp	r3, #3
 8002e66:	d837      	bhi.n	8002ed8 <ILI9341_Set_Rotation+0x90>
 8002e68:	a201      	add	r2, pc, #4	; (adr r2, 8002e70 <ILI9341_Set_Rotation+0x28>)
 8002e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e6e:	bf00      	nop
 8002e70:	08002e81 	.word	0x08002e81
 8002e74:	08002e97 	.word	0x08002e97
 8002e78:	08002ead 	.word	0x08002ead
 8002e7c:	08002ec3 	.word	0x08002ec3
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8002e80:	2048      	movs	r0, #72	; 0x48
 8002e82:	f7ff ff55 	bl	8002d30 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8002e86:	4b17      	ldr	r3, [pc, #92]	; (8002ee4 <ILI9341_Set_Rotation+0x9c>)
 8002e88:	22f0      	movs	r2, #240	; 0xf0
 8002e8a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8002e8c:	4b16      	ldr	r3, [pc, #88]	; (8002ee8 <ILI9341_Set_Rotation+0xa0>)
 8002e8e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002e92:	801a      	strh	r2, [r3, #0]
			break;
 8002e94:	e021      	b.n	8002eda <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8002e96:	2028      	movs	r0, #40	; 0x28
 8002e98:	f7ff ff4a 	bl	8002d30 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8002e9c:	4b11      	ldr	r3, [pc, #68]	; (8002ee4 <ILI9341_Set_Rotation+0x9c>)
 8002e9e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002ea2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8002ea4:	4b10      	ldr	r3, [pc, #64]	; (8002ee8 <ILI9341_Set_Rotation+0xa0>)
 8002ea6:	22f0      	movs	r2, #240	; 0xf0
 8002ea8:	801a      	strh	r2, [r3, #0]
			break;
 8002eaa:	e016      	b.n	8002eda <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8002eac:	2088      	movs	r0, #136	; 0x88
 8002eae:	f7ff ff3f 	bl	8002d30 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8002eb2:	4b0c      	ldr	r3, [pc, #48]	; (8002ee4 <ILI9341_Set_Rotation+0x9c>)
 8002eb4:	22f0      	movs	r2, #240	; 0xf0
 8002eb6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8002eb8:	4b0b      	ldr	r3, [pc, #44]	; (8002ee8 <ILI9341_Set_Rotation+0xa0>)
 8002eba:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002ebe:	801a      	strh	r2, [r3, #0]
			break;
 8002ec0:	e00b      	b.n	8002eda <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8002ec2:	20e8      	movs	r0, #232	; 0xe8
 8002ec4:	f7ff ff34 	bl	8002d30 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8002ec8:	4b06      	ldr	r3, [pc, #24]	; (8002ee4 <ILI9341_Set_Rotation+0x9c>)
 8002eca:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002ece:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8002ed0:	4b05      	ldr	r3, [pc, #20]	; (8002ee8 <ILI9341_Set_Rotation+0xa0>)
 8002ed2:	22f0      	movs	r2, #240	; 0xf0
 8002ed4:	801a      	strh	r2, [r3, #0]
			break;
 8002ed6:	e000      	b.n	8002eda <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8002ed8:	bf00      	nop
	}
}
 8002eda:	bf00      	nop
 8002edc:	3710      	adds	r7, #16
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	2000041a 	.word	0x2000041a
 8002ee8:	20000418 	.word	0x20000418

08002eec <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ef6:	4802      	ldr	r0, [pc, #8]	; (8002f00 <ILI9341_Enable+0x14>)
 8002ef8:	f001 fdb6 	bl	8004a68 <HAL_GPIO_WritePin>
}
 8002efc:	bf00      	nop
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	40020800 	.word	0x40020800

08002f04 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8002f08:	f7ff fff0 	bl	8002eec <ILI9341_Enable>
ILI9341_SPI_Init();
 8002f0c:	f7ff fecc 	bl	8002ca8 <ILI9341_SPI_Init>
ILI9341_Reset();
 8002f10:	f7ff ff7c 	bl	8002e0c <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8002f14:	2001      	movs	r0, #1
 8002f16:	f7ff fee9 	bl	8002cec <ILI9341_Write_Command>
HAL_Delay(1000);
 8002f1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002f1e:	f000 fba3 	bl	8003668 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8002f22:	20cb      	movs	r0, #203	; 0xcb
 8002f24:	f7ff fee2 	bl	8002cec <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8002f28:	2039      	movs	r0, #57	; 0x39
 8002f2a:	f7ff ff01 	bl	8002d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8002f2e:	202c      	movs	r0, #44	; 0x2c
 8002f30:	f7ff fefe 	bl	8002d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002f34:	2000      	movs	r0, #0
 8002f36:	f7ff fefb 	bl	8002d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8002f3a:	2034      	movs	r0, #52	; 0x34
 8002f3c:	f7ff fef8 	bl	8002d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8002f40:	2002      	movs	r0, #2
 8002f42:	f7ff fef5 	bl	8002d30 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8002f46:	20cf      	movs	r0, #207	; 0xcf
 8002f48:	f7ff fed0 	bl	8002cec <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002f4c:	2000      	movs	r0, #0
 8002f4e:	f7ff feef 	bl	8002d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8002f52:	20c1      	movs	r0, #193	; 0xc1
 8002f54:	f7ff feec 	bl	8002d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8002f58:	2030      	movs	r0, #48	; 0x30
 8002f5a:	f7ff fee9 	bl	8002d30 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8002f5e:	20e8      	movs	r0, #232	; 0xe8
 8002f60:	f7ff fec4 	bl	8002cec <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8002f64:	2085      	movs	r0, #133	; 0x85
 8002f66:	f7ff fee3 	bl	8002d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002f6a:	2000      	movs	r0, #0
 8002f6c:	f7ff fee0 	bl	8002d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8002f70:	2078      	movs	r0, #120	; 0x78
 8002f72:	f7ff fedd 	bl	8002d30 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8002f76:	20ea      	movs	r0, #234	; 0xea
 8002f78:	f7ff feb8 	bl	8002cec <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002f7c:	2000      	movs	r0, #0
 8002f7e:	f7ff fed7 	bl	8002d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002f82:	2000      	movs	r0, #0
 8002f84:	f7ff fed4 	bl	8002d30 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8002f88:	20ed      	movs	r0, #237	; 0xed
 8002f8a:	f7ff feaf 	bl	8002cec <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8002f8e:	2064      	movs	r0, #100	; 0x64
 8002f90:	f7ff fece 	bl	8002d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8002f94:	2003      	movs	r0, #3
 8002f96:	f7ff fecb 	bl	8002d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8002f9a:	2012      	movs	r0, #18
 8002f9c:	f7ff fec8 	bl	8002d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8002fa0:	2081      	movs	r0, #129	; 0x81
 8002fa2:	f7ff fec5 	bl	8002d30 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8002fa6:	20f7      	movs	r0, #247	; 0xf7
 8002fa8:	f7ff fea0 	bl	8002cec <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8002fac:	2020      	movs	r0, #32
 8002fae:	f7ff febf 	bl	8002d30 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8002fb2:	20c0      	movs	r0, #192	; 0xc0
 8002fb4:	f7ff fe9a 	bl	8002cec <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8002fb8:	2023      	movs	r0, #35	; 0x23
 8002fba:	f7ff feb9 	bl	8002d30 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8002fbe:	20c1      	movs	r0, #193	; 0xc1
 8002fc0:	f7ff fe94 	bl	8002cec <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8002fc4:	2010      	movs	r0, #16
 8002fc6:	f7ff feb3 	bl	8002d30 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8002fca:	20c5      	movs	r0, #197	; 0xc5
 8002fcc:	f7ff fe8e 	bl	8002cec <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8002fd0:	203e      	movs	r0, #62	; 0x3e
 8002fd2:	f7ff fead 	bl	8002d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8002fd6:	2028      	movs	r0, #40	; 0x28
 8002fd8:	f7ff feaa 	bl	8002d30 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8002fdc:	20c7      	movs	r0, #199	; 0xc7
 8002fde:	f7ff fe85 	bl	8002cec <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8002fe2:	2086      	movs	r0, #134	; 0x86
 8002fe4:	f7ff fea4 	bl	8002d30 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8002fe8:	2036      	movs	r0, #54	; 0x36
 8002fea:	f7ff fe7f 	bl	8002cec <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8002fee:	2048      	movs	r0, #72	; 0x48
 8002ff0:	f7ff fe9e 	bl	8002d30 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8002ff4:	203a      	movs	r0, #58	; 0x3a
 8002ff6:	f7ff fe79 	bl	8002cec <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8002ffa:	2055      	movs	r0, #85	; 0x55
 8002ffc:	f7ff fe98 	bl	8002d30 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8003000:	20b1      	movs	r0, #177	; 0xb1
 8003002:	f7ff fe73 	bl	8002cec <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8003006:	2000      	movs	r0, #0
 8003008:	f7ff fe92 	bl	8002d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 800300c:	2018      	movs	r0, #24
 800300e:	f7ff fe8f 	bl	8002d30 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8003012:	20b6      	movs	r0, #182	; 0xb6
 8003014:	f7ff fe6a 	bl	8002cec <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8003018:	2008      	movs	r0, #8
 800301a:	f7ff fe89 	bl	8002d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 800301e:	2082      	movs	r0, #130	; 0x82
 8003020:	f7ff fe86 	bl	8002d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8003024:	2027      	movs	r0, #39	; 0x27
 8003026:	f7ff fe83 	bl	8002d30 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 800302a:	20f2      	movs	r0, #242	; 0xf2
 800302c:	f7ff fe5e 	bl	8002cec <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8003030:	2000      	movs	r0, #0
 8003032:	f7ff fe7d 	bl	8002d30 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8003036:	2026      	movs	r0, #38	; 0x26
 8003038:	f7ff fe58 	bl	8002cec <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 800303c:	2001      	movs	r0, #1
 800303e:	f7ff fe77 	bl	8002d30 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8003042:	20e0      	movs	r0, #224	; 0xe0
 8003044:	f7ff fe52 	bl	8002cec <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8003048:	200f      	movs	r0, #15
 800304a:	f7ff fe71 	bl	8002d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 800304e:	2031      	movs	r0, #49	; 0x31
 8003050:	f7ff fe6e 	bl	8002d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8003054:	202b      	movs	r0, #43	; 0x2b
 8003056:	f7ff fe6b 	bl	8002d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 800305a:	200c      	movs	r0, #12
 800305c:	f7ff fe68 	bl	8002d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8003060:	200e      	movs	r0, #14
 8003062:	f7ff fe65 	bl	8002d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8003066:	2008      	movs	r0, #8
 8003068:	f7ff fe62 	bl	8002d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 800306c:	204e      	movs	r0, #78	; 0x4e
 800306e:	f7ff fe5f 	bl	8002d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8003072:	20f1      	movs	r0, #241	; 0xf1
 8003074:	f7ff fe5c 	bl	8002d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8003078:	2037      	movs	r0, #55	; 0x37
 800307a:	f7ff fe59 	bl	8002d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 800307e:	2007      	movs	r0, #7
 8003080:	f7ff fe56 	bl	8002d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8003084:	2010      	movs	r0, #16
 8003086:	f7ff fe53 	bl	8002d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800308a:	2003      	movs	r0, #3
 800308c:	f7ff fe50 	bl	8002d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8003090:	200e      	movs	r0, #14
 8003092:	f7ff fe4d 	bl	8002d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8003096:	2009      	movs	r0, #9
 8003098:	f7ff fe4a 	bl	8002d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800309c:	2000      	movs	r0, #0
 800309e:	f7ff fe47 	bl	8002d30 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 80030a2:	20e1      	movs	r0, #225	; 0xe1
 80030a4:	f7ff fe22 	bl	8002cec <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80030a8:	2000      	movs	r0, #0
 80030aa:	f7ff fe41 	bl	8002d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80030ae:	200e      	movs	r0, #14
 80030b0:	f7ff fe3e 	bl	8002d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 80030b4:	2014      	movs	r0, #20
 80030b6:	f7ff fe3b 	bl	8002d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80030ba:	2003      	movs	r0, #3
 80030bc:	f7ff fe38 	bl	8002d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 80030c0:	2011      	movs	r0, #17
 80030c2:	f7ff fe35 	bl	8002d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 80030c6:	2007      	movs	r0, #7
 80030c8:	f7ff fe32 	bl	8002d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80030cc:	2031      	movs	r0, #49	; 0x31
 80030ce:	f7ff fe2f 	bl	8002d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80030d2:	20c1      	movs	r0, #193	; 0xc1
 80030d4:	f7ff fe2c 	bl	8002d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 80030d8:	2048      	movs	r0, #72	; 0x48
 80030da:	f7ff fe29 	bl	8002d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80030de:	2008      	movs	r0, #8
 80030e0:	f7ff fe26 	bl	8002d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 80030e4:	200f      	movs	r0, #15
 80030e6:	f7ff fe23 	bl	8002d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80030ea:	200c      	movs	r0, #12
 80030ec:	f7ff fe20 	bl	8002d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80030f0:	2031      	movs	r0, #49	; 0x31
 80030f2:	f7ff fe1d 	bl	8002d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 80030f6:	2036      	movs	r0, #54	; 0x36
 80030f8:	f7ff fe1a 	bl	8002d30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 80030fc:	200f      	movs	r0, #15
 80030fe:	f7ff fe17 	bl	8002d30 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8003102:	2011      	movs	r0, #17
 8003104:	f7ff fdf2 	bl	8002cec <ILI9341_Write_Command>
HAL_Delay(120);
 8003108:	2078      	movs	r0, #120	; 0x78
 800310a:	f000 faad 	bl	8003668 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 800310e:	2029      	movs	r0, #41	; 0x29
 8003110:	f7ff fdec 	bl	8002cec <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8003114:	2000      	movs	r0, #0
 8003116:	f7ff fe97 	bl	8002e48 <ILI9341_Set_Rotation>
}
 800311a:	bf00      	nop
 800311c:	bd80      	pop	{r7, pc}
	...

08003120 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8003120:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003124:	b08d      	sub	sp, #52	; 0x34
 8003126:	af00      	add	r7, sp, #0
 8003128:	4603      	mov	r3, r0
 800312a:	6039      	str	r1, [r7, #0]
 800312c:	80fb      	strh	r3, [r7, #6]
 800312e:	466b      	mov	r3, sp
 8003130:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8003132:	2300      	movs	r3, #0
 8003134:	62fb      	str	r3, [r7, #44]	; 0x2c
if((Size*2) < BURST_MAX_SIZE)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800313e:	d202      	bcs.n	8003146 <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003144:	e002      	b.n	800314c <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8003146:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800314a:	62fb      	str	r3, [r7, #44]	; 0x2c
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 800314c:	2201      	movs	r2, #1
 800314e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003152:	4840      	ldr	r0, [pc, #256]	; (8003254 <ILI9341_Draw_Colour_Burst+0x134>)
 8003154:	f001 fc88 	bl	8004a68 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8003158:	2200      	movs	r2, #0
 800315a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800315e:	483d      	ldr	r0, [pc, #244]	; (8003254 <ILI9341_Draw_Colour_Burst+0x134>)
 8003160:	f001 fc82 	bl	8004a68 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8003164:	88fb      	ldrh	r3, [r7, #6]
 8003166:	0a1b      	lsrs	r3, r3, #8
 8003168:	b29b      	uxth	r3, r3
 800316a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 800316e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003170:	460b      	mov	r3, r1
 8003172:	3b01      	subs	r3, #1
 8003174:	61fb      	str	r3, [r7, #28]
 8003176:	2300      	movs	r3, #0
 8003178:	4688      	mov	r8, r1
 800317a:	4699      	mov	r9, r3
 800317c:	f04f 0200 	mov.w	r2, #0
 8003180:	f04f 0300 	mov.w	r3, #0
 8003184:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003188:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800318c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003190:	2300      	movs	r3, #0
 8003192:	460c      	mov	r4, r1
 8003194:	461d      	mov	r5, r3
 8003196:	f04f 0200 	mov.w	r2, #0
 800319a:	f04f 0300 	mov.w	r3, #0
 800319e:	00eb      	lsls	r3, r5, #3
 80031a0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031a4:	00e2      	lsls	r2, r4, #3
 80031a6:	1dcb      	adds	r3, r1, #7
 80031a8:	08db      	lsrs	r3, r3, #3
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	ebad 0d03 	sub.w	sp, sp, r3
 80031b0:	466b      	mov	r3, sp
 80031b2:	3300      	adds	r3, #0
 80031b4:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 80031b6:	2300      	movs	r3, #0
 80031b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80031ba:	e00e      	b.n	80031da <ILI9341_Draw_Colour_Burst+0xba>
	{
		burst_buffer[j] = 	chifted;
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c0:	4413      	add	r3, r2
 80031c2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80031c6:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 80031c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ca:	3301      	adds	r3, #1
 80031cc:	88fa      	ldrh	r2, [r7, #6]
 80031ce:	b2d1      	uxtb	r1, r2
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 80031d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d6:	3302      	adds	r3, #2
 80031d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80031da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031de:	429a      	cmp	r2, r3
 80031e0:	d3ec      	bcc.n	80031bc <ILI9341_Draw_Colour_Burst+0x9c>
	}

uint32_t Sending_Size = Size*2;
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 80031e8:	697a      	ldr	r2, [r7, #20]
 80031ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f0:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031f6:	fbb3 f2f2 	udiv	r2, r3, r2
 80031fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80031fc:	fb01 f202 	mul.w	r2, r1, r2
 8003200:	1a9b      	subs	r3, r3, r2
 8003202:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d010      	beq.n	800322c <ILI9341_Draw_Colour_Burst+0x10c>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800320a:	2300      	movs	r3, #0
 800320c:	627b      	str	r3, [r7, #36]	; 0x24
 800320e:	e009      	b.n	8003224 <ILI9341_Draw_Colour_Burst+0x104>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8003210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003212:	b29a      	uxth	r2, r3
 8003214:	230a      	movs	r3, #10
 8003216:	69b9      	ldr	r1, [r7, #24]
 8003218:	480f      	ldr	r0, [pc, #60]	; (8003258 <ILI9341_Draw_Colour_Burst+0x138>)
 800321a:	f002 fea2 	bl	8005f62 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800321e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003220:	3301      	adds	r3, #1
 8003222:	627b      	str	r3, [r7, #36]	; 0x24
 8003224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	429a      	cmp	r2, r3
 800322a:	d3f1      	bcc.n	8003210 <ILI9341_Draw_Colour_Burst+0xf0>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	b29a      	uxth	r2, r3
 8003230:	230a      	movs	r3, #10
 8003232:	69b9      	ldr	r1, [r7, #24]
 8003234:	4808      	ldr	r0, [pc, #32]	; (8003258 <ILI9341_Draw_Colour_Burst+0x138>)
 8003236:	f002 fe94 	bl	8005f62 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800323a:	2201      	movs	r2, #1
 800323c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003240:	4804      	ldr	r0, [pc, #16]	; (8003254 <ILI9341_Draw_Colour_Burst+0x134>)
 8003242:	f001 fc11 	bl	8004a68 <HAL_GPIO_WritePin>
 8003246:	46b5      	mov	sp, r6
}
 8003248:	bf00      	nop
 800324a:	3734      	adds	r7, #52	; 0x34
 800324c:	46bd      	mov	sp, r7
 800324e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003252:	bf00      	nop
 8003254:	40020800 	.word	0x40020800
 8003258:	200007c8 	.word	0x200007c8

0800325c <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	4603      	mov	r3, r0
 8003264:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8003266:	4b0e      	ldr	r3, [pc, #56]	; (80032a0 <ILI9341_Fill_Screen+0x44>)
 8003268:	881b      	ldrh	r3, [r3, #0]
 800326a:	b29a      	uxth	r2, r3
 800326c:	4b0d      	ldr	r3, [pc, #52]	; (80032a4 <ILI9341_Fill_Screen+0x48>)
 800326e:	881b      	ldrh	r3, [r3, #0]
 8003270:	b29b      	uxth	r3, r3
 8003272:	2100      	movs	r1, #0
 8003274:	2000      	movs	r0, #0
 8003276:	f7ff fd7d 	bl	8002d74 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 800327a:	4b09      	ldr	r3, [pc, #36]	; (80032a0 <ILI9341_Fill_Screen+0x44>)
 800327c:	881b      	ldrh	r3, [r3, #0]
 800327e:	b29b      	uxth	r3, r3
 8003280:	461a      	mov	r2, r3
 8003282:	4b08      	ldr	r3, [pc, #32]	; (80032a4 <ILI9341_Fill_Screen+0x48>)
 8003284:	881b      	ldrh	r3, [r3, #0]
 8003286:	b29b      	uxth	r3, r3
 8003288:	fb02 f303 	mul.w	r3, r2, r3
 800328c:	461a      	mov	r2, r3
 800328e:	88fb      	ldrh	r3, [r7, #6]
 8003290:	4611      	mov	r1, r2
 8003292:	4618      	mov	r0, r3
 8003294:	f7ff ff44 	bl	8003120 <ILI9341_Draw_Colour_Burst>
}
 8003298:	bf00      	nop
 800329a:	3708      	adds	r7, #8
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	2000041a 	.word	0x2000041a
 80032a4:	20000418 	.word	0x20000418

080032a8 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	4603      	mov	r3, r0
 80032b0:	80fb      	strh	r3, [r7, #6]
 80032b2:	460b      	mov	r3, r1
 80032b4:	80bb      	strh	r3, [r7, #4]
 80032b6:	4613      	mov	r3, r2
 80032b8:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80032ba:	4b64      	ldr	r3, [pc, #400]	; (800344c <ILI9341_Draw_Pixel+0x1a4>)
 80032bc:	881b      	ldrh	r3, [r3, #0]
 80032be:	b29b      	uxth	r3, r3
 80032c0:	88fa      	ldrh	r2, [r7, #6]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	f080 80be 	bcs.w	8003444 <ILI9341_Draw_Pixel+0x19c>
 80032c8:	4b61      	ldr	r3, [pc, #388]	; (8003450 <ILI9341_Draw_Pixel+0x1a8>)
 80032ca:	881b      	ldrh	r3, [r3, #0]
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	88ba      	ldrh	r2, [r7, #4]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	f080 80b7 	bcs.w	8003444 <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80032d6:	2200      	movs	r2, #0
 80032d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80032dc:	485d      	ldr	r0, [pc, #372]	; (8003454 <ILI9341_Draw_Pixel+0x1ac>)
 80032de:	f001 fbc3 	bl	8004a68 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80032e2:	2200      	movs	r2, #0
 80032e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80032e8:	485a      	ldr	r0, [pc, #360]	; (8003454 <ILI9341_Draw_Pixel+0x1ac>)
 80032ea:	f001 fbbd 	bl	8004a68 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 80032ee:	202a      	movs	r0, #42	; 0x2a
 80032f0:	f7ff fcea 	bl	8002cc8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80032f4:	2201      	movs	r2, #1
 80032f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80032fa:	4856      	ldr	r0, [pc, #344]	; (8003454 <ILI9341_Draw_Pixel+0x1ac>)
 80032fc:	f001 fbb4 	bl	8004a68 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8003300:	2201      	movs	r2, #1
 8003302:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003306:	4853      	ldr	r0, [pc, #332]	; (8003454 <ILI9341_Draw_Pixel+0x1ac>)
 8003308:	f001 fbae 	bl	8004a68 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 800330c:	2200      	movs	r2, #0
 800330e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003312:	4850      	ldr	r0, [pc, #320]	; (8003454 <ILI9341_Draw_Pixel+0x1ac>)
 8003314:	f001 fba8 	bl	8004a68 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8003318:	88fb      	ldrh	r3, [r7, #6]
 800331a:	0a1b      	lsrs	r3, r3, #8
 800331c:	b29b      	uxth	r3, r3
 800331e:	b2db      	uxtb	r3, r3
 8003320:	753b      	strb	r3, [r7, #20]
 8003322:	88fb      	ldrh	r3, [r7, #6]
 8003324:	b2db      	uxtb	r3, r3
 8003326:	757b      	strb	r3, [r7, #21]
 8003328:	88fb      	ldrh	r3, [r7, #6]
 800332a:	3301      	adds	r3, #1
 800332c:	121b      	asrs	r3, r3, #8
 800332e:	b2db      	uxtb	r3, r3
 8003330:	75bb      	strb	r3, [r7, #22]
 8003332:	88fb      	ldrh	r3, [r7, #6]
 8003334:	b2db      	uxtb	r3, r3
 8003336:	3301      	adds	r3, #1
 8003338:	b2db      	uxtb	r3, r3
 800333a:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 800333c:	f107 0114 	add.w	r1, r7, #20
 8003340:	2301      	movs	r3, #1
 8003342:	2204      	movs	r2, #4
 8003344:	4844      	ldr	r0, [pc, #272]	; (8003458 <ILI9341_Draw_Pixel+0x1b0>)
 8003346:	f002 fe0c 	bl	8005f62 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800334a:	2201      	movs	r2, #1
 800334c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003350:	4840      	ldr	r0, [pc, #256]	; (8003454 <ILI9341_Draw_Pixel+0x1ac>)
 8003352:	f001 fb89 	bl	8004a68 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8003356:	2200      	movs	r2, #0
 8003358:	f44f 7100 	mov.w	r1, #512	; 0x200
 800335c:	483d      	ldr	r0, [pc, #244]	; (8003454 <ILI9341_Draw_Pixel+0x1ac>)
 800335e:	f001 fb83 	bl	8004a68 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8003362:	2200      	movs	r2, #0
 8003364:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003368:	483a      	ldr	r0, [pc, #232]	; (8003454 <ILI9341_Draw_Pixel+0x1ac>)
 800336a:	f001 fb7d 	bl	8004a68 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 800336e:	202b      	movs	r0, #43	; 0x2b
 8003370:	f7ff fcaa 	bl	8002cc8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8003374:	2201      	movs	r2, #1
 8003376:	f44f 7100 	mov.w	r1, #512	; 0x200
 800337a:	4836      	ldr	r0, [pc, #216]	; (8003454 <ILI9341_Draw_Pixel+0x1ac>)
 800337c:	f001 fb74 	bl	8004a68 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8003380:	2201      	movs	r2, #1
 8003382:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003386:	4833      	ldr	r0, [pc, #204]	; (8003454 <ILI9341_Draw_Pixel+0x1ac>)
 8003388:	f001 fb6e 	bl	8004a68 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800338c:	2200      	movs	r2, #0
 800338e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003392:	4830      	ldr	r0, [pc, #192]	; (8003454 <ILI9341_Draw_Pixel+0x1ac>)
 8003394:	f001 fb68 	bl	8004a68 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8003398:	88bb      	ldrh	r3, [r7, #4]
 800339a:	0a1b      	lsrs	r3, r3, #8
 800339c:	b29b      	uxth	r3, r3
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	743b      	strb	r3, [r7, #16]
 80033a2:	88bb      	ldrh	r3, [r7, #4]
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	747b      	strb	r3, [r7, #17]
 80033a8:	88bb      	ldrh	r3, [r7, #4]
 80033aa:	3301      	adds	r3, #1
 80033ac:	121b      	asrs	r3, r3, #8
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	74bb      	strb	r3, [r7, #18]
 80033b2:	88bb      	ldrh	r3, [r7, #4]
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	3301      	adds	r3, #1
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 80033bc:	f107 0110 	add.w	r1, r7, #16
 80033c0:	2301      	movs	r3, #1
 80033c2:	2204      	movs	r2, #4
 80033c4:	4824      	ldr	r0, [pc, #144]	; (8003458 <ILI9341_Draw_Pixel+0x1b0>)
 80033c6:	f002 fdcc 	bl	8005f62 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80033ca:	2201      	movs	r2, #1
 80033cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80033d0:	4820      	ldr	r0, [pc, #128]	; (8003454 <ILI9341_Draw_Pixel+0x1ac>)
 80033d2:	f001 fb49 	bl	8004a68 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80033d6:	2200      	movs	r2, #0
 80033d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033dc:	481d      	ldr	r0, [pc, #116]	; (8003454 <ILI9341_Draw_Pixel+0x1ac>)
 80033de:	f001 fb43 	bl	8004a68 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80033e2:	2200      	movs	r2, #0
 80033e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80033e8:	481a      	ldr	r0, [pc, #104]	; (8003454 <ILI9341_Draw_Pixel+0x1ac>)
 80033ea:	f001 fb3d 	bl	8004a68 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 80033ee:	202c      	movs	r0, #44	; 0x2c
 80033f0:	f7ff fc6a 	bl	8002cc8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 80033f4:	2201      	movs	r2, #1
 80033f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033fa:	4816      	ldr	r0, [pc, #88]	; (8003454 <ILI9341_Draw_Pixel+0x1ac>)
 80033fc:	f001 fb34 	bl	8004a68 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8003400:	2201      	movs	r2, #1
 8003402:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003406:	4813      	ldr	r0, [pc, #76]	; (8003454 <ILI9341_Draw_Pixel+0x1ac>)
 8003408:	f001 fb2e 	bl	8004a68 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800340c:	2200      	movs	r2, #0
 800340e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003412:	4810      	ldr	r0, [pc, #64]	; (8003454 <ILI9341_Draw_Pixel+0x1ac>)
 8003414:	f001 fb28 	bl	8004a68 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8003418:	887b      	ldrh	r3, [r7, #2]
 800341a:	0a1b      	lsrs	r3, r3, #8
 800341c:	b29b      	uxth	r3, r3
 800341e:	b2db      	uxtb	r3, r3
 8003420:	733b      	strb	r3, [r7, #12]
 8003422:	887b      	ldrh	r3, [r7, #2]
 8003424:	b2db      	uxtb	r3, r3
 8003426:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8003428:	f107 010c 	add.w	r1, r7, #12
 800342c:	2301      	movs	r3, #1
 800342e:	2202      	movs	r2, #2
 8003430:	4809      	ldr	r0, [pc, #36]	; (8003458 <ILI9341_Draw_Pixel+0x1b0>)
 8003432:	f002 fd96 	bl	8005f62 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8003436:	2201      	movs	r2, #1
 8003438:	f44f 7180 	mov.w	r1, #256	; 0x100
 800343c:	4805      	ldr	r0, [pc, #20]	; (8003454 <ILI9341_Draw_Pixel+0x1ac>)
 800343e:	f001 fb13 	bl	8004a68 <HAL_GPIO_WritePin>
 8003442:	e000      	b.n	8003446 <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8003444:	bf00      	nop
	
}
 8003446:	3718      	adds	r7, #24
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	2000041a 	.word	0x2000041a
 8003450:	20000418 	.word	0x20000418
 8003454:	40020800 	.word	0x40020800
 8003458:	200007c8 	.word	0x200007c8

0800345c <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 800345c:	b590      	push	{r4, r7, lr}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	4604      	mov	r4, r0
 8003464:	4608      	mov	r0, r1
 8003466:	4611      	mov	r1, r2
 8003468:	461a      	mov	r2, r3
 800346a:	4623      	mov	r3, r4
 800346c:	80fb      	strh	r3, [r7, #6]
 800346e:	4603      	mov	r3, r0
 8003470:	80bb      	strh	r3, [r7, #4]
 8003472:	460b      	mov	r3, r1
 8003474:	807b      	strh	r3, [r7, #2]
 8003476:	4613      	mov	r3, r2
 8003478:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800347a:	4b24      	ldr	r3, [pc, #144]	; (800350c <ILI9341_Draw_Rectangle+0xb0>)
 800347c:	881b      	ldrh	r3, [r3, #0]
 800347e:	b29b      	uxth	r3, r3
 8003480:	88fa      	ldrh	r2, [r7, #6]
 8003482:	429a      	cmp	r2, r3
 8003484:	d23d      	bcs.n	8003502 <ILI9341_Draw_Rectangle+0xa6>
 8003486:	4b22      	ldr	r3, [pc, #136]	; (8003510 <ILI9341_Draw_Rectangle+0xb4>)
 8003488:	881b      	ldrh	r3, [r3, #0]
 800348a:	b29b      	uxth	r3, r3
 800348c:	88ba      	ldrh	r2, [r7, #4]
 800348e:	429a      	cmp	r2, r3
 8003490:	d237      	bcs.n	8003502 <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 8003492:	88fa      	ldrh	r2, [r7, #6]
 8003494:	887b      	ldrh	r3, [r7, #2]
 8003496:	4413      	add	r3, r2
 8003498:	4a1c      	ldr	r2, [pc, #112]	; (800350c <ILI9341_Draw_Rectangle+0xb0>)
 800349a:	8812      	ldrh	r2, [r2, #0]
 800349c:	b292      	uxth	r2, r2
 800349e:	4293      	cmp	r3, r2
 80034a0:	dd05      	ble.n	80034ae <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 80034a2:	4b1a      	ldr	r3, [pc, #104]	; (800350c <ILI9341_Draw_Rectangle+0xb0>)
 80034a4:	881b      	ldrh	r3, [r3, #0]
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	88fb      	ldrh	r3, [r7, #6]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 80034ae:	88ba      	ldrh	r2, [r7, #4]
 80034b0:	883b      	ldrh	r3, [r7, #0]
 80034b2:	4413      	add	r3, r2
 80034b4:	4a16      	ldr	r2, [pc, #88]	; (8003510 <ILI9341_Draw_Rectangle+0xb4>)
 80034b6:	8812      	ldrh	r2, [r2, #0]
 80034b8:	b292      	uxth	r2, r2
 80034ba:	4293      	cmp	r3, r2
 80034bc:	dd05      	ble.n	80034ca <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 80034be:	4b14      	ldr	r3, [pc, #80]	; (8003510 <ILI9341_Draw_Rectangle+0xb4>)
 80034c0:	881b      	ldrh	r3, [r3, #0]
 80034c2:	b29a      	uxth	r2, r3
 80034c4:	88bb      	ldrh	r3, [r7, #4]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 80034ca:	88fa      	ldrh	r2, [r7, #6]
 80034cc:	887b      	ldrh	r3, [r7, #2]
 80034ce:	4413      	add	r3, r2
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	3b01      	subs	r3, #1
 80034d4:	b29c      	uxth	r4, r3
 80034d6:	88ba      	ldrh	r2, [r7, #4]
 80034d8:	883b      	ldrh	r3, [r7, #0]
 80034da:	4413      	add	r3, r2
 80034dc:	b29b      	uxth	r3, r3
 80034de:	3b01      	subs	r3, #1
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	88b9      	ldrh	r1, [r7, #4]
 80034e4:	88f8      	ldrh	r0, [r7, #6]
 80034e6:	4622      	mov	r2, r4
 80034e8:	f7ff fc44 	bl	8002d74 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 80034ec:	883b      	ldrh	r3, [r7, #0]
 80034ee:	887a      	ldrh	r2, [r7, #2]
 80034f0:	fb02 f303 	mul.w	r3, r2, r3
 80034f4:	461a      	mov	r2, r3
 80034f6:	8b3b      	ldrh	r3, [r7, #24]
 80034f8:	4611      	mov	r1, r2
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7ff fe10 	bl	8003120 <ILI9341_Draw_Colour_Burst>
 8003500:	e000      	b.n	8003504 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8003502:	bf00      	nop
}
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	bd90      	pop	{r4, r7, pc}
 800350a:	bf00      	nop
 800350c:	2000041a 	.word	0x2000041a
 8003510:	20000418 	.word	0x20000418

08003514 <ILI9341_Draw_Vertical_Line>:
ILI9341_Draw_Colour_Burst(Colour, Width);
}

//DRAW LINE FROM X,Y LOCATION to X,Y+Height LOCATION
void ILI9341_Draw_Vertical_Line(uint16_t X, uint16_t Y, uint16_t Height, uint16_t Colour)
{
 8003514:	b590      	push	{r4, r7, lr}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	4604      	mov	r4, r0
 800351c:	4608      	mov	r0, r1
 800351e:	4611      	mov	r1, r2
 8003520:	461a      	mov	r2, r3
 8003522:	4623      	mov	r3, r4
 8003524:	80fb      	strh	r3, [r7, #6]
 8003526:	4603      	mov	r3, r0
 8003528:	80bb      	strh	r3, [r7, #4]
 800352a:	460b      	mov	r3, r1
 800352c:	807b      	strh	r3, [r7, #2]
 800352e:	4613      	mov	r3, r2
 8003530:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8003532:	4b18      	ldr	r3, [pc, #96]	; (8003594 <ILI9341_Draw_Vertical_Line+0x80>)
 8003534:	881b      	ldrh	r3, [r3, #0]
 8003536:	b29b      	uxth	r3, r3
 8003538:	88fa      	ldrh	r2, [r7, #6]
 800353a:	429a      	cmp	r2, r3
 800353c:	d225      	bcs.n	800358a <ILI9341_Draw_Vertical_Line+0x76>
 800353e:	4b16      	ldr	r3, [pc, #88]	; (8003598 <ILI9341_Draw_Vertical_Line+0x84>)
 8003540:	881b      	ldrh	r3, [r3, #0]
 8003542:	b29b      	uxth	r3, r3
 8003544:	88ba      	ldrh	r2, [r7, #4]
 8003546:	429a      	cmp	r2, r3
 8003548:	d21f      	bcs.n	800358a <ILI9341_Draw_Vertical_Line+0x76>
if((Y+Height-1)>=LCD_HEIGHT)
 800354a:	88ba      	ldrh	r2, [r7, #4]
 800354c:	887b      	ldrh	r3, [r7, #2]
 800354e:	4413      	add	r3, r2
 8003550:	4a11      	ldr	r2, [pc, #68]	; (8003598 <ILI9341_Draw_Vertical_Line+0x84>)
 8003552:	8812      	ldrh	r2, [r2, #0]
 8003554:	b292      	uxth	r2, r2
 8003556:	4293      	cmp	r3, r2
 8003558:	dd05      	ble.n	8003566 <ILI9341_Draw_Vertical_Line+0x52>
	{
		Height=LCD_HEIGHT-Y;
 800355a:	4b0f      	ldr	r3, [pc, #60]	; (8003598 <ILI9341_Draw_Vertical_Line+0x84>)
 800355c:	881b      	ldrh	r3, [r3, #0]
 800355e:	b29a      	uxth	r2, r3
 8003560:	88bb      	ldrh	r3, [r7, #4]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	807b      	strh	r3, [r7, #2]
	}
ILI9341_Set_Address(X, Y, X, Y+Height-1);
 8003566:	88ba      	ldrh	r2, [r7, #4]
 8003568:	887b      	ldrh	r3, [r7, #2]
 800356a:	4413      	add	r3, r2
 800356c:	b29b      	uxth	r3, r3
 800356e:	3b01      	subs	r3, #1
 8003570:	b29b      	uxth	r3, r3
 8003572:	88fa      	ldrh	r2, [r7, #6]
 8003574:	88b9      	ldrh	r1, [r7, #4]
 8003576:	88f8      	ldrh	r0, [r7, #6]
 8003578:	f7ff fbfc 	bl	8002d74 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height);
 800357c:	887a      	ldrh	r2, [r7, #2]
 800357e:	883b      	ldrh	r3, [r7, #0]
 8003580:	4611      	mov	r1, r2
 8003582:	4618      	mov	r0, r3
 8003584:	f7ff fdcc 	bl	8003120 <ILI9341_Draw_Colour_Burst>
 8003588:	e000      	b.n	800358c <ILI9341_Draw_Vertical_Line+0x78>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800358a:	bf00      	nop
}
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	bd90      	pop	{r4, r7, pc}
 8003592:	bf00      	nop
 8003594:	2000041a 	.word	0x2000041a
 8003598:	20000418 	.word	0x20000418

0800359c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035a0:	4b08      	ldr	r3, [pc, #32]	; (80035c4 <HAL_Init+0x28>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a07      	ldr	r2, [pc, #28]	; (80035c4 <HAL_Init+0x28>)
 80035a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035ac:	2003      	movs	r0, #3
 80035ae:	f000 fcd5 	bl	8003f5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80035b2:	2000      	movs	r0, #0
 80035b4:	f000 f808 	bl	80035c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80035b8:	f7fe fd3a 	bl	8002030 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	40023c00 	.word	0x40023c00

080035c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80035d0:	4b12      	ldr	r3, [pc, #72]	; (800361c <HAL_InitTick+0x54>)
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	4b12      	ldr	r3, [pc, #72]	; (8003620 <HAL_InitTick+0x58>)
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	4619      	mov	r1, r3
 80035da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035de:	fbb3 f3f1 	udiv	r3, r3, r1
 80035e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e6:	4618      	mov	r0, r3
 80035e8:	f000 fcf1 	bl	8003fce <HAL_SYSTICK_Config>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e00e      	b.n	8003614 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2b0f      	cmp	r3, #15
 80035fa:	d80a      	bhi.n	8003612 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035fc:	2200      	movs	r2, #0
 80035fe:	6879      	ldr	r1, [r7, #4]
 8003600:	f04f 30ff 	mov.w	r0, #4294967295
 8003604:	f000 fcb5 	bl	8003f72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003608:	4a06      	ldr	r2, [pc, #24]	; (8003624 <HAL_InitTick+0x5c>)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800360e:	2300      	movs	r3, #0
 8003610:	e000      	b.n	8003614 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
}
 8003614:	4618      	mov	r0, r3
 8003616:	3708      	adds	r7, #8
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	20000414 	.word	0x20000414
 8003620:	20000420 	.word	0x20000420
 8003624:	2000041c 	.word	0x2000041c

08003628 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800362c:	4b06      	ldr	r3, [pc, #24]	; (8003648 <HAL_IncTick+0x20>)
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	461a      	mov	r2, r3
 8003632:	4b06      	ldr	r3, [pc, #24]	; (800364c <HAL_IncTick+0x24>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4413      	add	r3, r2
 8003638:	4a04      	ldr	r2, [pc, #16]	; (800364c <HAL_IncTick+0x24>)
 800363a:	6013      	str	r3, [r2, #0]
}
 800363c:	bf00      	nop
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	20000420 	.word	0x20000420
 800364c:	200009d8 	.word	0x200009d8

08003650 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003650:	b480      	push	{r7}
 8003652:	af00      	add	r7, sp, #0
  return uwTick;
 8003654:	4b03      	ldr	r3, [pc, #12]	; (8003664 <HAL_GetTick+0x14>)
 8003656:	681b      	ldr	r3, [r3, #0]
}
 8003658:	4618      	mov	r0, r3
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	200009d8 	.word	0x200009d8

08003668 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003670:	f7ff ffee 	bl	8003650 <HAL_GetTick>
 8003674:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003680:	d005      	beq.n	800368e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003682:	4b0a      	ldr	r3, [pc, #40]	; (80036ac <HAL_Delay+0x44>)
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	461a      	mov	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	4413      	add	r3, r2
 800368c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800368e:	bf00      	nop
 8003690:	f7ff ffde 	bl	8003650 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	429a      	cmp	r2, r3
 800369e:	d8f7      	bhi.n	8003690 <HAL_Delay+0x28>
  {
  }
}
 80036a0:	bf00      	nop
 80036a2:	bf00      	nop
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	20000420 	.word	0x20000420

080036b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036b8:	2300      	movs	r3, #0
 80036ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e031      	b.n	800372a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d109      	bne.n	80036e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f7fd f830 	bl	8000734 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e6:	f003 0310 	and.w	r3, r3, #16
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d116      	bne.n	800371c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036f2:	4b10      	ldr	r3, [pc, #64]	; (8003734 <HAL_ADC_Init+0x84>)
 80036f4:	4013      	ands	r3, r2
 80036f6:	f043 0202 	orr.w	r2, r3, #2
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 fa4c 	bl	8003b9c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370e:	f023 0303 	bic.w	r3, r3, #3
 8003712:	f043 0201 	orr.w	r2, r3, #1
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	641a      	str	r2, [r3, #64]	; 0x40
 800371a:	e001      	b.n	8003720 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003728:	7bfb      	ldrb	r3, [r7, #15]
}
 800372a:	4618      	mov	r0, r3
 800372c:	3710      	adds	r7, #16
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	ffffeefd 	.word	0xffffeefd

08003738 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003738:	b480      	push	{r7}
 800373a:	b085      	sub	sp, #20
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8003740:	2300      	movs	r3, #0
 8003742:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800374a:	2b01      	cmp	r3, #1
 800374c:	d101      	bne.n	8003752 <HAL_ADC_Start+0x1a>
 800374e:	2302      	movs	r3, #2
 8003750:	e0ad      	b.n	80038ae <HAL_ADC_Start+0x176>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f003 0301 	and.w	r3, r3, #1
 8003764:	2b01      	cmp	r3, #1
 8003766:	d018      	beq.n	800379a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	689a      	ldr	r2, [r3, #8]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f042 0201 	orr.w	r2, r2, #1
 8003776:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003778:	4b50      	ldr	r3, [pc, #320]	; (80038bc <HAL_ADC_Start+0x184>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a50      	ldr	r2, [pc, #320]	; (80038c0 <HAL_ADC_Start+0x188>)
 800377e:	fba2 2303 	umull	r2, r3, r2, r3
 8003782:	0c9a      	lsrs	r2, r3, #18
 8003784:	4613      	mov	r3, r2
 8003786:	005b      	lsls	r3, r3, #1
 8003788:	4413      	add	r3, r2
 800378a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800378c:	e002      	b.n	8003794 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	3b01      	subs	r3, #1
 8003792:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1f9      	bne.n	800378e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d175      	bne.n	8003894 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037ac:	4b45      	ldr	r3, [pc, #276]	; (80038c4 <HAL_ADC_Start+0x18c>)
 80037ae:	4013      	ands	r3, r2
 80037b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d007      	beq.n	80037d6 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80037ce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037e2:	d106      	bne.n	80037f2 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e8:	f023 0206 	bic.w	r2, r3, #6
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	645a      	str	r2, [r3, #68]	; 0x44
 80037f0:	e002      	b.n	80037f8 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003808:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800380a:	4b2f      	ldr	r3, [pc, #188]	; (80038c8 <HAL_ADC_Start+0x190>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f003 031f 	and.w	r3, r3, #31
 8003812:	2b00      	cmp	r3, #0
 8003814:	d10f      	bne.n	8003836 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d143      	bne.n	80038ac <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	689a      	ldr	r2, [r3, #8]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003832:	609a      	str	r2, [r3, #8]
 8003834:	e03a      	b.n	80038ac <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a24      	ldr	r2, [pc, #144]	; (80038cc <HAL_ADC_Start+0x194>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d10e      	bne.n	800385e <HAL_ADC_Start+0x126>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d107      	bne.n	800385e <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	689a      	ldr	r2, [r3, #8]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800385c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800385e:	4b1a      	ldr	r3, [pc, #104]	; (80038c8 <HAL_ADC_Start+0x190>)
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f003 0310 	and.w	r3, r3, #16
 8003866:	2b00      	cmp	r3, #0
 8003868:	d120      	bne.n	80038ac <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a18      	ldr	r2, [pc, #96]	; (80038d0 <HAL_ADC_Start+0x198>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d11b      	bne.n	80038ac <HAL_ADC_Start+0x174>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d114      	bne.n	80038ac <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	689a      	ldr	r2, [r3, #8]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003890:	609a      	str	r2, [r3, #8]
 8003892:	e00b      	b.n	80038ac <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003898:	f043 0210 	orr.w	r2, r3, #16
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a4:	f043 0201 	orr.w	r2, r3, #1
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3714      	adds	r7, #20
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	20000414 	.word	0x20000414
 80038c0:	431bde83 	.word	0x431bde83
 80038c4:	fffff8fe 	.word	0xfffff8fe
 80038c8:	40012300 	.word	0x40012300
 80038cc:	40012000 	.word	0x40012000
 80038d0:	40012200 	.word	0x40012200

080038d4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	370c      	adds	r7, #12
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
	...

080038f0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80038fa:	2300      	movs	r3, #0
 80038fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003904:	2b01      	cmp	r3, #1
 8003906:	d101      	bne.n	800390c <HAL_ADC_ConfigChannel+0x1c>
 8003908:	2302      	movs	r3, #2
 800390a:	e136      	b.n	8003b7a <HAL_ADC_ConfigChannel+0x28a>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2b09      	cmp	r3, #9
 800391a:	d93a      	bls.n	8003992 <HAL_ADC_ConfigChannel+0xa2>
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003924:	d035      	beq.n	8003992 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68d9      	ldr	r1, [r3, #12]
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	b29b      	uxth	r3, r3
 8003932:	461a      	mov	r2, r3
 8003934:	4613      	mov	r3, r2
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	4413      	add	r3, r2
 800393a:	3b1e      	subs	r3, #30
 800393c:	2207      	movs	r2, #7
 800393e:	fa02 f303 	lsl.w	r3, r2, r3
 8003942:	43da      	mvns	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	400a      	ands	r2, r1
 800394a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a8d      	ldr	r2, [pc, #564]	; (8003b88 <HAL_ADC_ConfigChannel+0x298>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d10a      	bne.n	800396c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68d9      	ldr	r1, [r3, #12]
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	061a      	lsls	r2, r3, #24
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	430a      	orrs	r2, r1
 8003968:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800396a:	e035      	b.n	80039d8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68d9      	ldr	r1, [r3, #12]
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	689a      	ldr	r2, [r3, #8]
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	b29b      	uxth	r3, r3
 800397c:	4618      	mov	r0, r3
 800397e:	4603      	mov	r3, r0
 8003980:	005b      	lsls	r3, r3, #1
 8003982:	4403      	add	r3, r0
 8003984:	3b1e      	subs	r3, #30
 8003986:	409a      	lsls	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	430a      	orrs	r2, r1
 800398e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003990:	e022      	b.n	80039d8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	6919      	ldr	r1, [r3, #16]
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	b29b      	uxth	r3, r3
 800399e:	461a      	mov	r2, r3
 80039a0:	4613      	mov	r3, r2
 80039a2:	005b      	lsls	r3, r3, #1
 80039a4:	4413      	add	r3, r2
 80039a6:	2207      	movs	r2, #7
 80039a8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ac:	43da      	mvns	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	400a      	ands	r2, r1
 80039b4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	6919      	ldr	r1, [r3, #16]
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	689a      	ldr	r2, [r3, #8]
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	4618      	mov	r0, r3
 80039c8:	4603      	mov	r3, r0
 80039ca:	005b      	lsls	r3, r3, #1
 80039cc:	4403      	add	r3, r0
 80039ce:	409a      	lsls	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	430a      	orrs	r2, r1
 80039d6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	2b06      	cmp	r3, #6
 80039de:	d824      	bhi.n	8003a2a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685a      	ldr	r2, [r3, #4]
 80039ea:	4613      	mov	r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	4413      	add	r3, r2
 80039f0:	3b05      	subs	r3, #5
 80039f2:	221f      	movs	r2, #31
 80039f4:	fa02 f303 	lsl.w	r3, r2, r3
 80039f8:	43da      	mvns	r2, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	400a      	ands	r2, r1
 8003a00:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	4618      	mov	r0, r3
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	4613      	mov	r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	4413      	add	r3, r2
 8003a1a:	3b05      	subs	r3, #5
 8003a1c:	fa00 f203 	lsl.w	r2, r0, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	430a      	orrs	r2, r1
 8003a26:	635a      	str	r2, [r3, #52]	; 0x34
 8003a28:	e04c      	b.n	8003ac4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	2b0c      	cmp	r3, #12
 8003a30:	d824      	bhi.n	8003a7c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685a      	ldr	r2, [r3, #4]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4413      	add	r3, r2
 8003a42:	3b23      	subs	r3, #35	; 0x23
 8003a44:	221f      	movs	r2, #31
 8003a46:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4a:	43da      	mvns	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	400a      	ands	r2, r1
 8003a52:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	4618      	mov	r0, r3
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	685a      	ldr	r2, [r3, #4]
 8003a66:	4613      	mov	r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	4413      	add	r3, r2
 8003a6c:	3b23      	subs	r3, #35	; 0x23
 8003a6e:	fa00 f203 	lsl.w	r2, r0, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	631a      	str	r2, [r3, #48]	; 0x30
 8003a7a:	e023      	b.n	8003ac4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	685a      	ldr	r2, [r3, #4]
 8003a86:	4613      	mov	r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	4413      	add	r3, r2
 8003a8c:	3b41      	subs	r3, #65	; 0x41
 8003a8e:	221f      	movs	r2, #31
 8003a90:	fa02 f303 	lsl.w	r3, r2, r3
 8003a94:	43da      	mvns	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	400a      	ands	r2, r1
 8003a9c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	4618      	mov	r0, r3
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685a      	ldr	r2, [r3, #4]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	4413      	add	r3, r2
 8003ab6:	3b41      	subs	r3, #65	; 0x41
 8003ab8:	fa00 f203 	lsl.w	r2, r0, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a30      	ldr	r2, [pc, #192]	; (8003b8c <HAL_ADC_ConfigChannel+0x29c>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d10a      	bne.n	8003ae4 <HAL_ADC_ConfigChannel+0x1f4>
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ad6:	d105      	bne.n	8003ae4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003ad8:	4b2d      	ldr	r3, [pc, #180]	; (8003b90 <HAL_ADC_ConfigChannel+0x2a0>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	4a2c      	ldr	r2, [pc, #176]	; (8003b90 <HAL_ADC_ConfigChannel+0x2a0>)
 8003ade:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003ae2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a28      	ldr	r2, [pc, #160]	; (8003b8c <HAL_ADC_ConfigChannel+0x29c>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d10f      	bne.n	8003b0e <HAL_ADC_ConfigChannel+0x21e>
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2b12      	cmp	r3, #18
 8003af4:	d10b      	bne.n	8003b0e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8003af6:	4b26      	ldr	r3, [pc, #152]	; (8003b90 <HAL_ADC_ConfigChannel+0x2a0>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	4a25      	ldr	r2, [pc, #148]	; (8003b90 <HAL_ADC_ConfigChannel+0x2a0>)
 8003afc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003b00:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003b02:	4b23      	ldr	r3, [pc, #140]	; (8003b90 <HAL_ADC_ConfigChannel+0x2a0>)
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	4a22      	ldr	r2, [pc, #136]	; (8003b90 <HAL_ADC_ConfigChannel+0x2a0>)
 8003b08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b0c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a1e      	ldr	r2, [pc, #120]	; (8003b8c <HAL_ADC_ConfigChannel+0x29c>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d12b      	bne.n	8003b70 <HAL_ADC_ConfigChannel+0x280>
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a1a      	ldr	r2, [pc, #104]	; (8003b88 <HAL_ADC_ConfigChannel+0x298>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d003      	beq.n	8003b2a <HAL_ADC_ConfigChannel+0x23a>
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2b11      	cmp	r3, #17
 8003b28:	d122      	bne.n	8003b70 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8003b2a:	4b19      	ldr	r3, [pc, #100]	; (8003b90 <HAL_ADC_ConfigChannel+0x2a0>)
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	4a18      	ldr	r2, [pc, #96]	; (8003b90 <HAL_ADC_ConfigChannel+0x2a0>)
 8003b30:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003b34:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003b36:	4b16      	ldr	r3, [pc, #88]	; (8003b90 <HAL_ADC_ConfigChannel+0x2a0>)
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	4a15      	ldr	r2, [pc, #84]	; (8003b90 <HAL_ADC_ConfigChannel+0x2a0>)
 8003b3c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b40:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a10      	ldr	r2, [pc, #64]	; (8003b88 <HAL_ADC_ConfigChannel+0x298>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d111      	bne.n	8003b70 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003b4c:	4b11      	ldr	r3, [pc, #68]	; (8003b94 <HAL_ADC_ConfigChannel+0x2a4>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a11      	ldr	r2, [pc, #68]	; (8003b98 <HAL_ADC_ConfigChannel+0x2a8>)
 8003b52:	fba2 2303 	umull	r2, r3, r2, r3
 8003b56:	0c9a      	lsrs	r2, r3, #18
 8003b58:	4613      	mov	r3, r2
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	4413      	add	r3, r2
 8003b5e:	005b      	lsls	r3, r3, #1
 8003b60:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003b62:	e002      	b.n	8003b6a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	3b01      	subs	r3, #1
 8003b68:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d1f9      	bne.n	8003b64 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3714      	adds	r7, #20
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	10000012 	.word	0x10000012
 8003b8c:	40012000 	.word	0x40012000
 8003b90:	40012300 	.word	0x40012300
 8003b94:	20000414 	.word	0x20000414
 8003b98:	431bde83 	.word	0x431bde83

08003b9c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003ba4:	4b78      	ldr	r3, [pc, #480]	; (8003d88 <ADC_Init+0x1ec>)
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	4a77      	ldr	r2, [pc, #476]	; (8003d88 <ADC_Init+0x1ec>)
 8003baa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003bae:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003bb0:	4b75      	ldr	r3, [pc, #468]	; (8003d88 <ADC_Init+0x1ec>)
 8003bb2:	685a      	ldr	r2, [r3, #4]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	4973      	ldr	r1, [pc, #460]	; (8003d88 <ADC_Init+0x1ec>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	685a      	ldr	r2, [r3, #4]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bcc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	6859      	ldr	r1, [r3, #4]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	691b      	ldr	r3, [r3, #16]
 8003bd8:	021a      	lsls	r2, r3, #8
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	430a      	orrs	r2, r1
 8003be0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	685a      	ldr	r2, [r3, #4]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003bf0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	6859      	ldr	r1, [r3, #4]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689a      	ldr	r2, [r3, #8]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	430a      	orrs	r2, r1
 8003c02:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	689a      	ldr	r2, [r3, #8]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	6899      	ldr	r1, [r3, #8]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68da      	ldr	r2, [r3, #12]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	430a      	orrs	r2, r1
 8003c24:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c2a:	4a58      	ldr	r2, [pc, #352]	; (8003d8c <ADC_Init+0x1f0>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d022      	beq.n	8003c76 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689a      	ldr	r2, [r3, #8]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c3e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	6899      	ldr	r1, [r3, #8]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	689a      	ldr	r2, [r3, #8]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	6899      	ldr	r1, [r3, #8]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	430a      	orrs	r2, r1
 8003c72:	609a      	str	r2, [r3, #8]
 8003c74:	e00f      	b.n	8003c96 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	689a      	ldr	r2, [r3, #8]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	689a      	ldr	r2, [r3, #8]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c94:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	689a      	ldr	r2, [r3, #8]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f022 0202 	bic.w	r2, r2, #2
 8003ca4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	6899      	ldr	r1, [r3, #8]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	005a      	lsls	r2, r3, #1
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d01b      	beq.n	8003cfc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	685a      	ldr	r2, [r3, #4]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cd2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685a      	ldr	r2, [r3, #4]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003ce2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	6859      	ldr	r1, [r3, #4]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	035a      	lsls	r2, r3, #13
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	605a      	str	r2, [r3, #4]
 8003cfa:	e007      	b.n	8003d0c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	685a      	ldr	r2, [r3, #4]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d0a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003d1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	69db      	ldr	r3, [r3, #28]
 8003d26:	3b01      	subs	r3, #1
 8003d28:	051a      	lsls	r2, r3, #20
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	689a      	ldr	r2, [r3, #8]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003d40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	6899      	ldr	r1, [r3, #8]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003d4e:	025a      	lsls	r2, r3, #9
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	430a      	orrs	r2, r1
 8003d56:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	689a      	ldr	r2, [r3, #8]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	6899      	ldr	r1, [r3, #8]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	029a      	lsls	r2, r3, #10
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	609a      	str	r2, [r3, #8]
}
 8003d7c:	bf00      	nop
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr
 8003d88:	40012300 	.word	0x40012300
 8003d8c:	0f000001 	.word	0x0f000001

08003d90 <__NVIC_SetPriorityGrouping>:
{
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f003 0307 	and.w	r3, r3, #7
 8003d9e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003da0:	4b0b      	ldr	r3, [pc, #44]	; (8003dd0 <__NVIC_SetPriorityGrouping+0x40>)
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003da6:	68ba      	ldr	r2, [r7, #8]
 8003da8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003dac:	4013      	ands	r3, r2
 8003dae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003db8:	4b06      	ldr	r3, [pc, #24]	; (8003dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dbe:	4a04      	ldr	r2, [pc, #16]	; (8003dd0 <__NVIC_SetPriorityGrouping+0x40>)
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	60d3      	str	r3, [r2, #12]
}
 8003dc4:	bf00      	nop
 8003dc6:	3714      	adds	r7, #20
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr
 8003dd0:	e000ed00 	.word	0xe000ed00
 8003dd4:	05fa0000 	.word	0x05fa0000

08003dd8 <__NVIC_GetPriorityGrouping>:
{
 8003dd8:	b480      	push	{r7}
 8003dda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ddc:	4b04      	ldr	r3, [pc, #16]	; (8003df0 <__NVIC_GetPriorityGrouping+0x18>)
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	0a1b      	lsrs	r3, r3, #8
 8003de2:	f003 0307 	and.w	r3, r3, #7
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr
 8003df0:	e000ed00 	.word	0xe000ed00

08003df4 <__NVIC_EnableIRQ>:
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	db0b      	blt.n	8003e1e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e06:	79fb      	ldrb	r3, [r7, #7]
 8003e08:	f003 021f 	and.w	r2, r3, #31
 8003e0c:	4907      	ldr	r1, [pc, #28]	; (8003e2c <__NVIC_EnableIRQ+0x38>)
 8003e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e12:	095b      	lsrs	r3, r3, #5
 8003e14:	2001      	movs	r0, #1
 8003e16:	fa00 f202 	lsl.w	r2, r0, r2
 8003e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003e1e:	bf00      	nop
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	e000e100 	.word	0xe000e100

08003e30 <__NVIC_SetPriority>:
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	4603      	mov	r3, r0
 8003e38:	6039      	str	r1, [r7, #0]
 8003e3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	db0a      	blt.n	8003e5a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	b2da      	uxtb	r2, r3
 8003e48:	490c      	ldr	r1, [pc, #48]	; (8003e7c <__NVIC_SetPriority+0x4c>)
 8003e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e4e:	0112      	lsls	r2, r2, #4
 8003e50:	b2d2      	uxtb	r2, r2
 8003e52:	440b      	add	r3, r1
 8003e54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003e58:	e00a      	b.n	8003e70 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	b2da      	uxtb	r2, r3
 8003e5e:	4908      	ldr	r1, [pc, #32]	; (8003e80 <__NVIC_SetPriority+0x50>)
 8003e60:	79fb      	ldrb	r3, [r7, #7]
 8003e62:	f003 030f 	and.w	r3, r3, #15
 8003e66:	3b04      	subs	r3, #4
 8003e68:	0112      	lsls	r2, r2, #4
 8003e6a:	b2d2      	uxtb	r2, r2
 8003e6c:	440b      	add	r3, r1
 8003e6e:	761a      	strb	r2, [r3, #24]
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr
 8003e7c:	e000e100 	.word	0xe000e100
 8003e80:	e000ed00 	.word	0xe000ed00

08003e84 <NVIC_EncodePriority>:
{
 8003e84:	b480      	push	{r7}
 8003e86:	b089      	sub	sp, #36	; 0x24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f003 0307 	and.w	r3, r3, #7
 8003e96:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	f1c3 0307 	rsb	r3, r3, #7
 8003e9e:	2b04      	cmp	r3, #4
 8003ea0:	bf28      	it	cs
 8003ea2:	2304      	movcs	r3, #4
 8003ea4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	3304      	adds	r3, #4
 8003eaa:	2b06      	cmp	r3, #6
 8003eac:	d902      	bls.n	8003eb4 <NVIC_EncodePriority+0x30>
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	3b03      	subs	r3, #3
 8003eb2:	e000      	b.n	8003eb6 <NVIC_EncodePriority+0x32>
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec2:	43da      	mvns	r2, r3
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	401a      	ands	r2, r3
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ed6:	43d9      	mvns	r1, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003edc:	4313      	orrs	r3, r2
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3724      	adds	r7, #36	; 0x24
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
	...

08003eec <__NVIC_SystemReset>:
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8003ef0:	f3bf 8f4f 	dsb	sy
}
 8003ef4:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003ef6:	4b06      	ldr	r3, [pc, #24]	; (8003f10 <__NVIC_SystemReset+0x24>)
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003efe:	4904      	ldr	r1, [pc, #16]	; (8003f10 <__NVIC_SystemReset+0x24>)
 8003f00:	4b04      	ldr	r3, [pc, #16]	; (8003f14 <__NVIC_SystemReset+0x28>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003f06:	f3bf 8f4f 	dsb	sy
}
 8003f0a:	bf00      	nop
    __NOP();
 8003f0c:	bf00      	nop
 8003f0e:	e7fd      	b.n	8003f0c <__NVIC_SystemReset+0x20>
 8003f10:	e000ed00 	.word	0xe000ed00
 8003f14:	05fa0004 	.word	0x05fa0004

08003f18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	3b01      	subs	r3, #1
 8003f24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f28:	d301      	bcc.n	8003f2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e00f      	b.n	8003f4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f2e:	4a0a      	ldr	r2, [pc, #40]	; (8003f58 <SysTick_Config+0x40>)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	3b01      	subs	r3, #1
 8003f34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f36:	210f      	movs	r1, #15
 8003f38:	f04f 30ff 	mov.w	r0, #4294967295
 8003f3c:	f7ff ff78 	bl	8003e30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f40:	4b05      	ldr	r3, [pc, #20]	; (8003f58 <SysTick_Config+0x40>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f46:	4b04      	ldr	r3, [pc, #16]	; (8003f58 <SysTick_Config+0x40>)
 8003f48:	2207      	movs	r2, #7
 8003f4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3708      	adds	r7, #8
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	e000e010 	.word	0xe000e010

08003f5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f7ff ff13 	bl	8003d90 <__NVIC_SetPriorityGrouping>
}
 8003f6a:	bf00      	nop
 8003f6c:	3708      	adds	r7, #8
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b086      	sub	sp, #24
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	4603      	mov	r3, r0
 8003f7a:	60b9      	str	r1, [r7, #8]
 8003f7c:	607a      	str	r2, [r7, #4]
 8003f7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003f80:	2300      	movs	r3, #0
 8003f82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f84:	f7ff ff28 	bl	8003dd8 <__NVIC_GetPriorityGrouping>
 8003f88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	68b9      	ldr	r1, [r7, #8]
 8003f8e:	6978      	ldr	r0, [r7, #20]
 8003f90:	f7ff ff78 	bl	8003e84 <NVIC_EncodePriority>
 8003f94:	4602      	mov	r2, r0
 8003f96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f9a:	4611      	mov	r1, r2
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7ff ff47 	bl	8003e30 <__NVIC_SetPriority>
}
 8003fa2:	bf00      	nop
 8003fa4:	3718      	adds	r7, #24
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b082      	sub	sp, #8
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7ff ff1b 	bl	8003df4 <__NVIC_EnableIRQ>
}
 8003fbe:	bf00      	nop
 8003fc0:	3708      	adds	r7, #8
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8003fca:	f7ff ff8f 	bl	8003eec <__NVIC_SystemReset>

08003fce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	b082      	sub	sp, #8
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f7ff ff9e 	bl	8003f18 <SysTick_Config>
 8003fdc:	4603      	mov	r3, r0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3708      	adds	r7, #8
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
	...

08003fe8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b086      	sub	sp, #24
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003ff4:	f7ff fb2c 	bl	8003650 <HAL_GetTick>
 8003ff8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d101      	bne.n	8004004 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e099      	b.n	8004138 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2202      	movs	r2, #2
 8004008:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f022 0201 	bic.w	r2, r2, #1
 8004022:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004024:	e00f      	b.n	8004046 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004026:	f7ff fb13 	bl	8003650 <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	2b05      	cmp	r3, #5
 8004032:	d908      	bls.n	8004046 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2220      	movs	r2, #32
 8004038:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2203      	movs	r2, #3
 800403e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e078      	b.n	8004138 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0301 	and.w	r3, r3, #1
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1e8      	bne.n	8004026 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800405c:	697a      	ldr	r2, [r7, #20]
 800405e:	4b38      	ldr	r3, [pc, #224]	; (8004140 <HAL_DMA_Init+0x158>)
 8004060:	4013      	ands	r3, r2
 8004062:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685a      	ldr	r2, [r3, #4]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004072:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800407e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	699b      	ldr	r3, [r3, #24]
 8004084:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800408a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	4313      	orrs	r3, r2
 8004096:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409c:	2b04      	cmp	r3, #4
 800409e:	d107      	bne.n	80040b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a8:	4313      	orrs	r3, r2
 80040aa:	697a      	ldr	r2, [r7, #20]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	f023 0307 	bic.w	r3, r3, #7
 80040c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d6:	2b04      	cmp	r3, #4
 80040d8:	d117      	bne.n	800410a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00e      	beq.n	800410a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f000 fa7b 	bl	80045e8 <DMA_CheckFifoParam>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d008      	beq.n	800410a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2240      	movs	r2, #64	; 0x40
 80040fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004106:	2301      	movs	r3, #1
 8004108:	e016      	b.n	8004138 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	697a      	ldr	r2, [r7, #20]
 8004110:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 fa32 	bl	800457c <DMA_CalcBaseAndBitshift>
 8004118:	4603      	mov	r3, r0
 800411a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004120:	223f      	movs	r2, #63	; 0x3f
 8004122:	409a      	lsls	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2201      	movs	r2, #1
 8004132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	3718      	adds	r7, #24
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	e010803f 	.word	0xe010803f

08004144 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004150:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004152:	f7ff fa7d 	bl	8003650 <HAL_GetTick>
 8004156:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800415e:	b2db      	uxtb	r3, r3
 8004160:	2b02      	cmp	r3, #2
 8004162:	d008      	beq.n	8004176 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2280      	movs	r2, #128	; 0x80
 8004168:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e052      	b.n	800421c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f022 0216 	bic.w	r2, r2, #22
 8004184:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	695a      	ldr	r2, [r3, #20]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004194:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419a:	2b00      	cmp	r3, #0
 800419c:	d103      	bne.n	80041a6 <HAL_DMA_Abort+0x62>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d007      	beq.n	80041b6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f022 0208 	bic.w	r2, r2, #8
 80041b4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f022 0201 	bic.w	r2, r2, #1
 80041c4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041c6:	e013      	b.n	80041f0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80041c8:	f7ff fa42 	bl	8003650 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	2b05      	cmp	r3, #5
 80041d4:	d90c      	bls.n	80041f0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2220      	movs	r2, #32
 80041da:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2203      	movs	r2, #3
 80041e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e015      	b.n	800421c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1e4      	bne.n	80041c8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004202:	223f      	movs	r2, #63	; 0x3f
 8004204:	409a      	lsls	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2201      	movs	r2, #1
 800420e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	3710      	adds	r7, #16
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004232:	b2db      	uxtb	r3, r3
 8004234:	2b02      	cmp	r3, #2
 8004236:	d004      	beq.n	8004242 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2280      	movs	r2, #128	; 0x80
 800423c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e00c      	b.n	800425c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2205      	movs	r2, #5
 8004246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f022 0201 	bic.w	r2, r2, #1
 8004258:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004270:	2300      	movs	r3, #0
 8004272:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004274:	4b8e      	ldr	r3, [pc, #568]	; (80044b0 <HAL_DMA_IRQHandler+0x248>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a8e      	ldr	r2, [pc, #568]	; (80044b4 <HAL_DMA_IRQHandler+0x24c>)
 800427a:	fba2 2303 	umull	r2, r3, r2, r3
 800427e:	0a9b      	lsrs	r3, r3, #10
 8004280:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004286:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004292:	2208      	movs	r2, #8
 8004294:	409a      	lsls	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	4013      	ands	r3, r2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d01a      	beq.n	80042d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0304 	and.w	r3, r3, #4
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d013      	beq.n	80042d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f022 0204 	bic.w	r2, r2, #4
 80042ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c0:	2208      	movs	r2, #8
 80042c2:	409a      	lsls	r2, r3
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042cc:	f043 0201 	orr.w	r2, r3, #1
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042d8:	2201      	movs	r2, #1
 80042da:	409a      	lsls	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	4013      	ands	r3, r2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d012      	beq.n	800430a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	695b      	ldr	r3, [r3, #20]
 80042ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00b      	beq.n	800430a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042f6:	2201      	movs	r2, #1
 80042f8:	409a      	lsls	r2, r3
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004302:	f043 0202 	orr.w	r2, r3, #2
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800430e:	2204      	movs	r2, #4
 8004310:	409a      	lsls	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	4013      	ands	r3, r2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d012      	beq.n	8004340 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d00b      	beq.n	8004340 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800432c:	2204      	movs	r2, #4
 800432e:	409a      	lsls	r2, r3
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004338:	f043 0204 	orr.w	r2, r3, #4
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004344:	2210      	movs	r2, #16
 8004346:	409a      	lsls	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	4013      	ands	r3, r2
 800434c:	2b00      	cmp	r3, #0
 800434e:	d043      	beq.n	80043d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0308 	and.w	r3, r3, #8
 800435a:	2b00      	cmp	r3, #0
 800435c:	d03c      	beq.n	80043d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004362:	2210      	movs	r2, #16
 8004364:	409a      	lsls	r2, r3
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d018      	beq.n	80043aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d108      	bne.n	8004398 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438a:	2b00      	cmp	r3, #0
 800438c:	d024      	beq.n	80043d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	4798      	blx	r3
 8004396:	e01f      	b.n	80043d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800439c:	2b00      	cmp	r3, #0
 800439e:	d01b      	beq.n	80043d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	4798      	blx	r3
 80043a8:	e016      	b.n	80043d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d107      	bne.n	80043c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f022 0208 	bic.w	r2, r2, #8
 80043c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d003      	beq.n	80043d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043dc:	2220      	movs	r2, #32
 80043de:	409a      	lsls	r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	4013      	ands	r3, r2
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f000 808f 	beq.w	8004508 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0310 	and.w	r3, r3, #16
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f000 8087 	beq.w	8004508 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043fe:	2220      	movs	r2, #32
 8004400:	409a      	lsls	r2, r3
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b05      	cmp	r3, #5
 8004410:	d136      	bne.n	8004480 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f022 0216 	bic.w	r2, r2, #22
 8004420:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	695a      	ldr	r2, [r3, #20]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004430:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004436:	2b00      	cmp	r3, #0
 8004438:	d103      	bne.n	8004442 <HAL_DMA_IRQHandler+0x1da>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800443e:	2b00      	cmp	r3, #0
 8004440:	d007      	beq.n	8004452 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f022 0208 	bic.w	r2, r2, #8
 8004450:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004456:	223f      	movs	r2, #63	; 0x3f
 8004458:	409a      	lsls	r2, r3
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2201      	movs	r2, #1
 8004462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004472:	2b00      	cmp	r3, #0
 8004474:	d07e      	beq.n	8004574 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	4798      	blx	r3
        }
        return;
 800447e:	e079      	b.n	8004574 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d01d      	beq.n	80044ca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d10d      	bne.n	80044b8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d031      	beq.n	8004508 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	4798      	blx	r3
 80044ac:	e02c      	b.n	8004508 <HAL_DMA_IRQHandler+0x2a0>
 80044ae:	bf00      	nop
 80044b0:	20000414 	.word	0x20000414
 80044b4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d023      	beq.n	8004508 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	4798      	blx	r3
 80044c8:	e01e      	b.n	8004508 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d10f      	bne.n	80044f8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f022 0210 	bic.w	r2, r2, #16
 80044e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d003      	beq.n	8004508 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800450c:	2b00      	cmp	r3, #0
 800450e:	d032      	beq.n	8004576 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004514:	f003 0301 	and.w	r3, r3, #1
 8004518:	2b00      	cmp	r3, #0
 800451a:	d022      	beq.n	8004562 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2205      	movs	r2, #5
 8004520:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f022 0201 	bic.w	r2, r2, #1
 8004532:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	3301      	adds	r3, #1
 8004538:	60bb      	str	r3, [r7, #8]
 800453a:	697a      	ldr	r2, [r7, #20]
 800453c:	429a      	cmp	r2, r3
 800453e:	d307      	bcc.n	8004550 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1f2      	bne.n	8004534 <HAL_DMA_IRQHandler+0x2cc>
 800454e:	e000      	b.n	8004552 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004550:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004566:	2b00      	cmp	r3, #0
 8004568:	d005      	beq.n	8004576 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	4798      	blx	r3
 8004572:	e000      	b.n	8004576 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004574:	bf00      	nop
    }
  }
}
 8004576:	3718      	adds	r7, #24
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800457c:	b480      	push	{r7}
 800457e:	b085      	sub	sp, #20
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	b2db      	uxtb	r3, r3
 800458a:	3b10      	subs	r3, #16
 800458c:	4a13      	ldr	r2, [pc, #76]	; (80045dc <DMA_CalcBaseAndBitshift+0x60>)
 800458e:	fba2 2303 	umull	r2, r3, r2, r3
 8004592:	091b      	lsrs	r3, r3, #4
 8004594:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004596:	4a12      	ldr	r2, [pc, #72]	; (80045e0 <DMA_CalcBaseAndBitshift+0x64>)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	4413      	add	r3, r2
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	461a      	mov	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2b03      	cmp	r3, #3
 80045a8:	d908      	bls.n	80045bc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	461a      	mov	r2, r3
 80045b0:	4b0c      	ldr	r3, [pc, #48]	; (80045e4 <DMA_CalcBaseAndBitshift+0x68>)
 80045b2:	4013      	ands	r3, r2
 80045b4:	1d1a      	adds	r2, r3, #4
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	659a      	str	r2, [r3, #88]	; 0x58
 80045ba:	e006      	b.n	80045ca <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	461a      	mov	r2, r3
 80045c2:	4b08      	ldr	r3, [pc, #32]	; (80045e4 <DMA_CalcBaseAndBitshift+0x68>)
 80045c4:	4013      	ands	r3, r2
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3714      	adds	r7, #20
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	aaaaaaab 	.word	0xaaaaaaab
 80045e0:	0800b370 	.word	0x0800b370
 80045e4:	fffffc00 	.word	0xfffffc00

080045e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b085      	sub	sp, #20
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045f0:	2300      	movs	r3, #0
 80045f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d11f      	bne.n	8004642 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	2b03      	cmp	r3, #3
 8004606:	d856      	bhi.n	80046b6 <DMA_CheckFifoParam+0xce>
 8004608:	a201      	add	r2, pc, #4	; (adr r2, 8004610 <DMA_CheckFifoParam+0x28>)
 800460a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800460e:	bf00      	nop
 8004610:	08004621 	.word	0x08004621
 8004614:	08004633 	.word	0x08004633
 8004618:	08004621 	.word	0x08004621
 800461c:	080046b7 	.word	0x080046b7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004624:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d046      	beq.n	80046ba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004630:	e043      	b.n	80046ba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004636:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800463a:	d140      	bne.n	80046be <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004640:	e03d      	b.n	80046be <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800464a:	d121      	bne.n	8004690 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	2b03      	cmp	r3, #3
 8004650:	d837      	bhi.n	80046c2 <DMA_CheckFifoParam+0xda>
 8004652:	a201      	add	r2, pc, #4	; (adr r2, 8004658 <DMA_CheckFifoParam+0x70>)
 8004654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004658:	08004669 	.word	0x08004669
 800465c:	0800466f 	.word	0x0800466f
 8004660:	08004669 	.word	0x08004669
 8004664:	08004681 	.word	0x08004681
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	73fb      	strb	r3, [r7, #15]
      break;
 800466c:	e030      	b.n	80046d0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004672:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d025      	beq.n	80046c6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800467e:	e022      	b.n	80046c6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004684:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004688:	d11f      	bne.n	80046ca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800468e:	e01c      	b.n	80046ca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	2b02      	cmp	r3, #2
 8004694:	d903      	bls.n	800469e <DMA_CheckFifoParam+0xb6>
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	2b03      	cmp	r3, #3
 800469a:	d003      	beq.n	80046a4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800469c:	e018      	b.n	80046d0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	73fb      	strb	r3, [r7, #15]
      break;
 80046a2:	e015      	b.n	80046d0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00e      	beq.n	80046ce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	73fb      	strb	r3, [r7, #15]
      break;
 80046b4:	e00b      	b.n	80046ce <DMA_CheckFifoParam+0xe6>
      break;
 80046b6:	bf00      	nop
 80046b8:	e00a      	b.n	80046d0 <DMA_CheckFifoParam+0xe8>
      break;
 80046ba:	bf00      	nop
 80046bc:	e008      	b.n	80046d0 <DMA_CheckFifoParam+0xe8>
      break;
 80046be:	bf00      	nop
 80046c0:	e006      	b.n	80046d0 <DMA_CheckFifoParam+0xe8>
      break;
 80046c2:	bf00      	nop
 80046c4:	e004      	b.n	80046d0 <DMA_CheckFifoParam+0xe8>
      break;
 80046c6:	bf00      	nop
 80046c8:	e002      	b.n	80046d0 <DMA_CheckFifoParam+0xe8>
      break;   
 80046ca:	bf00      	nop
 80046cc:	e000      	b.n	80046d0 <DMA_CheckFifoParam+0xe8>
      break;
 80046ce:	bf00      	nop
    }
  } 
  
  return status; 
 80046d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3714      	adds	r7, #20
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop

080046e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b089      	sub	sp, #36	; 0x24
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80046ea:	2300      	movs	r3, #0
 80046ec:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80046ee:	2300      	movs	r3, #0
 80046f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80046f2:	2300      	movs	r3, #0
 80046f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80046f6:	2300      	movs	r3, #0
 80046f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80046fa:	2300      	movs	r3, #0
 80046fc:	61fb      	str	r3, [r7, #28]
 80046fe:	e175      	b.n	80049ec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004700:	2201      	movs	r2, #1
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	fa02 f303 	lsl.w	r3, r2, r3
 8004708:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	4013      	ands	r3, r2
 8004712:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	429a      	cmp	r2, r3
 800471a:	f040 8164 	bne.w	80049e6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f003 0303 	and.w	r3, r3, #3
 8004726:	2b01      	cmp	r3, #1
 8004728:	d005      	beq.n	8004736 <HAL_GPIO_Init+0x56>
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f003 0303 	and.w	r3, r3, #3
 8004732:	2b02      	cmp	r3, #2
 8004734:	d130      	bne.n	8004798 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	005b      	lsls	r3, r3, #1
 8004740:	2203      	movs	r2, #3
 8004742:	fa02 f303 	lsl.w	r3, r2, r3
 8004746:	43db      	mvns	r3, r3
 8004748:	69ba      	ldr	r2, [r7, #24]
 800474a:	4013      	ands	r3, r2
 800474c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	68da      	ldr	r2, [r3, #12]
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	005b      	lsls	r3, r3, #1
 8004756:	fa02 f303 	lsl.w	r3, r2, r3
 800475a:	69ba      	ldr	r2, [r7, #24]
 800475c:	4313      	orrs	r3, r2
 800475e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	69ba      	ldr	r2, [r7, #24]
 8004764:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800476c:	2201      	movs	r2, #1
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	fa02 f303 	lsl.w	r3, r2, r3
 8004774:	43db      	mvns	r3, r3
 8004776:	69ba      	ldr	r2, [r7, #24]
 8004778:	4013      	ands	r3, r2
 800477a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	091b      	lsrs	r3, r3, #4
 8004782:	f003 0201 	and.w	r2, r3, #1
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	fa02 f303 	lsl.w	r3, r2, r3
 800478c:	69ba      	ldr	r2, [r7, #24]
 800478e:	4313      	orrs	r3, r2
 8004790:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	69ba      	ldr	r2, [r7, #24]
 8004796:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f003 0303 	and.w	r3, r3, #3
 80047a0:	2b03      	cmp	r3, #3
 80047a2:	d017      	beq.n	80047d4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	005b      	lsls	r3, r3, #1
 80047ae:	2203      	movs	r2, #3
 80047b0:	fa02 f303 	lsl.w	r3, r2, r3
 80047b4:	43db      	mvns	r3, r3
 80047b6:	69ba      	ldr	r2, [r7, #24]
 80047b8:	4013      	ands	r3, r2
 80047ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	689a      	ldr	r2, [r3, #8]
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	005b      	lsls	r3, r3, #1
 80047c4:	fa02 f303 	lsl.w	r3, r2, r3
 80047c8:	69ba      	ldr	r2, [r7, #24]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	69ba      	ldr	r2, [r7, #24]
 80047d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f003 0303 	and.w	r3, r3, #3
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d123      	bne.n	8004828 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	08da      	lsrs	r2, r3, #3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	3208      	adds	r2, #8
 80047e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	f003 0307 	and.w	r3, r3, #7
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	220f      	movs	r2, #15
 80047f8:	fa02 f303 	lsl.w	r3, r2, r3
 80047fc:	43db      	mvns	r3, r3
 80047fe:	69ba      	ldr	r2, [r7, #24]
 8004800:	4013      	ands	r3, r2
 8004802:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	691a      	ldr	r2, [r3, #16]
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	f003 0307 	and.w	r3, r3, #7
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	fa02 f303 	lsl.w	r3, r2, r3
 8004814:	69ba      	ldr	r2, [r7, #24]
 8004816:	4313      	orrs	r3, r2
 8004818:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	08da      	lsrs	r2, r3, #3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	3208      	adds	r2, #8
 8004822:	69b9      	ldr	r1, [r7, #24]
 8004824:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	2203      	movs	r2, #3
 8004834:	fa02 f303 	lsl.w	r3, r2, r3
 8004838:	43db      	mvns	r3, r3
 800483a:	69ba      	ldr	r2, [r7, #24]
 800483c:	4013      	ands	r3, r2
 800483e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f003 0203 	and.w	r2, r3, #3
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	005b      	lsls	r3, r3, #1
 800484c:	fa02 f303 	lsl.w	r3, r2, r3
 8004850:	69ba      	ldr	r2, [r7, #24]
 8004852:	4313      	orrs	r3, r2
 8004854:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	69ba      	ldr	r2, [r7, #24]
 800485a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004864:	2b00      	cmp	r3, #0
 8004866:	f000 80be 	beq.w	80049e6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800486a:	4b66      	ldr	r3, [pc, #408]	; (8004a04 <HAL_GPIO_Init+0x324>)
 800486c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800486e:	4a65      	ldr	r2, [pc, #404]	; (8004a04 <HAL_GPIO_Init+0x324>)
 8004870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004874:	6453      	str	r3, [r2, #68]	; 0x44
 8004876:	4b63      	ldr	r3, [pc, #396]	; (8004a04 <HAL_GPIO_Init+0x324>)
 8004878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800487a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800487e:	60fb      	str	r3, [r7, #12]
 8004880:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004882:	4a61      	ldr	r2, [pc, #388]	; (8004a08 <HAL_GPIO_Init+0x328>)
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	089b      	lsrs	r3, r3, #2
 8004888:	3302      	adds	r3, #2
 800488a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800488e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	f003 0303 	and.w	r3, r3, #3
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	220f      	movs	r2, #15
 800489a:	fa02 f303 	lsl.w	r3, r2, r3
 800489e:	43db      	mvns	r3, r3
 80048a0:	69ba      	ldr	r2, [r7, #24]
 80048a2:	4013      	ands	r3, r2
 80048a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a58      	ldr	r2, [pc, #352]	; (8004a0c <HAL_GPIO_Init+0x32c>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d037      	beq.n	800491e <HAL_GPIO_Init+0x23e>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a57      	ldr	r2, [pc, #348]	; (8004a10 <HAL_GPIO_Init+0x330>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d031      	beq.n	800491a <HAL_GPIO_Init+0x23a>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a56      	ldr	r2, [pc, #344]	; (8004a14 <HAL_GPIO_Init+0x334>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d02b      	beq.n	8004916 <HAL_GPIO_Init+0x236>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a55      	ldr	r2, [pc, #340]	; (8004a18 <HAL_GPIO_Init+0x338>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d025      	beq.n	8004912 <HAL_GPIO_Init+0x232>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a54      	ldr	r2, [pc, #336]	; (8004a1c <HAL_GPIO_Init+0x33c>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d01f      	beq.n	800490e <HAL_GPIO_Init+0x22e>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a53      	ldr	r2, [pc, #332]	; (8004a20 <HAL_GPIO_Init+0x340>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d019      	beq.n	800490a <HAL_GPIO_Init+0x22a>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a52      	ldr	r2, [pc, #328]	; (8004a24 <HAL_GPIO_Init+0x344>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d013      	beq.n	8004906 <HAL_GPIO_Init+0x226>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a51      	ldr	r2, [pc, #324]	; (8004a28 <HAL_GPIO_Init+0x348>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d00d      	beq.n	8004902 <HAL_GPIO_Init+0x222>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a50      	ldr	r2, [pc, #320]	; (8004a2c <HAL_GPIO_Init+0x34c>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d007      	beq.n	80048fe <HAL_GPIO_Init+0x21e>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a4f      	ldr	r2, [pc, #316]	; (8004a30 <HAL_GPIO_Init+0x350>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d101      	bne.n	80048fa <HAL_GPIO_Init+0x21a>
 80048f6:	2309      	movs	r3, #9
 80048f8:	e012      	b.n	8004920 <HAL_GPIO_Init+0x240>
 80048fa:	230a      	movs	r3, #10
 80048fc:	e010      	b.n	8004920 <HAL_GPIO_Init+0x240>
 80048fe:	2308      	movs	r3, #8
 8004900:	e00e      	b.n	8004920 <HAL_GPIO_Init+0x240>
 8004902:	2307      	movs	r3, #7
 8004904:	e00c      	b.n	8004920 <HAL_GPIO_Init+0x240>
 8004906:	2306      	movs	r3, #6
 8004908:	e00a      	b.n	8004920 <HAL_GPIO_Init+0x240>
 800490a:	2305      	movs	r3, #5
 800490c:	e008      	b.n	8004920 <HAL_GPIO_Init+0x240>
 800490e:	2304      	movs	r3, #4
 8004910:	e006      	b.n	8004920 <HAL_GPIO_Init+0x240>
 8004912:	2303      	movs	r3, #3
 8004914:	e004      	b.n	8004920 <HAL_GPIO_Init+0x240>
 8004916:	2302      	movs	r3, #2
 8004918:	e002      	b.n	8004920 <HAL_GPIO_Init+0x240>
 800491a:	2301      	movs	r3, #1
 800491c:	e000      	b.n	8004920 <HAL_GPIO_Init+0x240>
 800491e:	2300      	movs	r3, #0
 8004920:	69fa      	ldr	r2, [r7, #28]
 8004922:	f002 0203 	and.w	r2, r2, #3
 8004926:	0092      	lsls	r2, r2, #2
 8004928:	4093      	lsls	r3, r2
 800492a:	69ba      	ldr	r2, [r7, #24]
 800492c:	4313      	orrs	r3, r2
 800492e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004930:	4935      	ldr	r1, [pc, #212]	; (8004a08 <HAL_GPIO_Init+0x328>)
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	089b      	lsrs	r3, r3, #2
 8004936:	3302      	adds	r3, #2
 8004938:	69ba      	ldr	r2, [r7, #24]
 800493a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800493e:	4b3d      	ldr	r3, [pc, #244]	; (8004a34 <HAL_GPIO_Init+0x354>)
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	43db      	mvns	r3, r3
 8004948:	69ba      	ldr	r2, [r7, #24]
 800494a:	4013      	ands	r3, r2
 800494c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d003      	beq.n	8004962 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800495a:	69ba      	ldr	r2, [r7, #24]
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	4313      	orrs	r3, r2
 8004960:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004962:	4a34      	ldr	r2, [pc, #208]	; (8004a34 <HAL_GPIO_Init+0x354>)
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004968:	4b32      	ldr	r3, [pc, #200]	; (8004a34 <HAL_GPIO_Init+0x354>)
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	43db      	mvns	r3, r3
 8004972:	69ba      	ldr	r2, [r7, #24]
 8004974:	4013      	ands	r3, r2
 8004976:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d003      	beq.n	800498c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004984:	69ba      	ldr	r2, [r7, #24]
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	4313      	orrs	r3, r2
 800498a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800498c:	4a29      	ldr	r2, [pc, #164]	; (8004a34 <HAL_GPIO_Init+0x354>)
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004992:	4b28      	ldr	r3, [pc, #160]	; (8004a34 <HAL_GPIO_Init+0x354>)
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	43db      	mvns	r3, r3
 800499c:	69ba      	ldr	r2, [r7, #24]
 800499e:	4013      	ands	r3, r2
 80049a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d003      	beq.n	80049b6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80049ae:	69ba      	ldr	r2, [r7, #24]
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80049b6:	4a1f      	ldr	r2, [pc, #124]	; (8004a34 <HAL_GPIO_Init+0x354>)
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80049bc:	4b1d      	ldr	r3, [pc, #116]	; (8004a34 <HAL_GPIO_Init+0x354>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	43db      	mvns	r3, r3
 80049c6:	69ba      	ldr	r2, [r7, #24]
 80049c8:	4013      	ands	r3, r2
 80049ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d003      	beq.n	80049e0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80049d8:	69ba      	ldr	r2, [r7, #24]
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	4313      	orrs	r3, r2
 80049de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80049e0:	4a14      	ldr	r2, [pc, #80]	; (8004a34 <HAL_GPIO_Init+0x354>)
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	3301      	adds	r3, #1
 80049ea:	61fb      	str	r3, [r7, #28]
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	2b0f      	cmp	r3, #15
 80049f0:	f67f ae86 	bls.w	8004700 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80049f4:	bf00      	nop
 80049f6:	bf00      	nop
 80049f8:	3724      	adds	r7, #36	; 0x24
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	40023800 	.word	0x40023800
 8004a08:	40013800 	.word	0x40013800
 8004a0c:	40020000 	.word	0x40020000
 8004a10:	40020400 	.word	0x40020400
 8004a14:	40020800 	.word	0x40020800
 8004a18:	40020c00 	.word	0x40020c00
 8004a1c:	40021000 	.word	0x40021000
 8004a20:	40021400 	.word	0x40021400
 8004a24:	40021800 	.word	0x40021800
 8004a28:	40021c00 	.word	0x40021c00
 8004a2c:	40022000 	.word	0x40022000
 8004a30:	40022400 	.word	0x40022400
 8004a34:	40013c00 	.word	0x40013c00

08004a38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	460b      	mov	r3, r1
 8004a42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	691a      	ldr	r2, [r3, #16]
 8004a48:	887b      	ldrh	r3, [r7, #2]
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d002      	beq.n	8004a56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004a50:	2301      	movs	r3, #1
 8004a52:	73fb      	strb	r3, [r7, #15]
 8004a54:	e001      	b.n	8004a5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a56:	2300      	movs	r3, #0
 8004a58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3714      	adds	r7, #20
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	460b      	mov	r3, r1
 8004a72:	807b      	strh	r3, [r7, #2]
 8004a74:	4613      	mov	r3, r2
 8004a76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a78:	787b      	ldrb	r3, [r7, #1]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d003      	beq.n	8004a86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a7e:	887a      	ldrh	r2, [r7, #2]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004a84:	e003      	b.n	8004a8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004a86:	887b      	ldrh	r3, [r7, #2]
 8004a88:	041a      	lsls	r2, r3, #16
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	619a      	str	r2, [r3, #24]
}
 8004a8e:	bf00      	nop
 8004a90:	370c      	adds	r7, #12
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr

08004a9a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a9a:	b480      	push	{r7}
 8004a9c:	b085      	sub	sp, #20
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004aac:	887a      	ldrh	r2, [r7, #2]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	041a      	lsls	r2, r3, #16
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	43d9      	mvns	r1, r3
 8004ab8:	887b      	ldrh	r3, [r7, #2]
 8004aba:	400b      	ands	r3, r1
 8004abc:	431a      	orrs	r2, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	619a      	str	r2, [r3, #24]
}
 8004ac2:	bf00      	nop
 8004ac4:	3714      	adds	r7, #20
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
	...

08004ad0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004ada:	4b08      	ldr	r3, [pc, #32]	; (8004afc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004adc:	695a      	ldr	r2, [r3, #20]
 8004ade:	88fb      	ldrh	r3, [r7, #6]
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d006      	beq.n	8004af4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004ae6:	4a05      	ldr	r2, [pc, #20]	; (8004afc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ae8:	88fb      	ldrh	r3, [r7, #6]
 8004aea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004aec:	88fb      	ldrh	r3, [r7, #6]
 8004aee:	4618      	mov	r0, r3
 8004af0:	f7fc f988 	bl	8000e04 <HAL_GPIO_EXTI_Callback>
  }
}
 8004af4:	bf00      	nop
 8004af6:	3708      	adds	r7, #8
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	40013c00 	.word	0x40013c00

08004b00 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004b00:	b480      	push	{r7}
 8004b02:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b04:	4b05      	ldr	r3, [pc, #20]	; (8004b1c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a04      	ldr	r2, [pc, #16]	; (8004b1c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b0e:	6013      	str	r3, [r2, #0]
}
 8004b10:	bf00      	nop
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	40007000 	.word	0x40007000

08004b20 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004b26:	2300      	movs	r3, #0
 8004b28:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004b2a:	4b23      	ldr	r3, [pc, #140]	; (8004bb8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2e:	4a22      	ldr	r2, [pc, #136]	; (8004bb8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b34:	6413      	str	r3, [r2, #64]	; 0x40
 8004b36:	4b20      	ldr	r3, [pc, #128]	; (8004bb8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b3e:	603b      	str	r3, [r7, #0]
 8004b40:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004b42:	4b1e      	ldr	r3, [pc, #120]	; (8004bbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a1d      	ldr	r2, [pc, #116]	; (8004bbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b4c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b4e:	f7fe fd7f 	bl	8003650 <HAL_GetTick>
 8004b52:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004b54:	e009      	b.n	8004b6a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004b56:	f7fe fd7b 	bl	8003650 <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b64:	d901      	bls.n	8004b6a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e022      	b.n	8004bb0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004b6a:	4b14      	ldr	r3, [pc, #80]	; (8004bbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b76:	d1ee      	bne.n	8004b56 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004b78:	4b10      	ldr	r3, [pc, #64]	; (8004bbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a0f      	ldr	r2, [pc, #60]	; (8004bbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004b7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b82:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b84:	f7fe fd64 	bl	8003650 <HAL_GetTick>
 8004b88:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004b8a:	e009      	b.n	8004ba0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004b8c:	f7fe fd60 	bl	8003650 <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b9a:	d901      	bls.n	8004ba0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e007      	b.n	8004bb0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004ba0:	4b06      	ldr	r3, [pc, #24]	; (8004bbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ba8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bac:	d1ee      	bne.n	8004b8c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3708      	adds	r7, #8
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	40023800 	.word	0x40023800
 8004bbc:	40007000 	.word	0x40007000

08004bc0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b086      	sub	sp, #24
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d101      	bne.n	8004bd6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e29b      	b.n	800510e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0301 	and.w	r3, r3, #1
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	f000 8087 	beq.w	8004cf2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004be4:	4b96      	ldr	r3, [pc, #600]	; (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	f003 030c 	and.w	r3, r3, #12
 8004bec:	2b04      	cmp	r3, #4
 8004bee:	d00c      	beq.n	8004c0a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bf0:	4b93      	ldr	r3, [pc, #588]	; (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f003 030c 	and.w	r3, r3, #12
 8004bf8:	2b08      	cmp	r3, #8
 8004bfa:	d112      	bne.n	8004c22 <HAL_RCC_OscConfig+0x62>
 8004bfc:	4b90      	ldr	r3, [pc, #576]	; (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c08:	d10b      	bne.n	8004c22 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c0a:	4b8d      	ldr	r3, [pc, #564]	; (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d06c      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x130>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d168      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e275      	b.n	800510e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c2a:	d106      	bne.n	8004c3a <HAL_RCC_OscConfig+0x7a>
 8004c2c:	4b84      	ldr	r3, [pc, #528]	; (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a83      	ldr	r2, [pc, #524]	; (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004c32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c36:	6013      	str	r3, [r2, #0]
 8004c38:	e02e      	b.n	8004c98 <HAL_RCC_OscConfig+0xd8>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10c      	bne.n	8004c5c <HAL_RCC_OscConfig+0x9c>
 8004c42:	4b7f      	ldr	r3, [pc, #508]	; (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a7e      	ldr	r2, [pc, #504]	; (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004c48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c4c:	6013      	str	r3, [r2, #0]
 8004c4e:	4b7c      	ldr	r3, [pc, #496]	; (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a7b      	ldr	r2, [pc, #492]	; (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004c54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c58:	6013      	str	r3, [r2, #0]
 8004c5a:	e01d      	b.n	8004c98 <HAL_RCC_OscConfig+0xd8>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c64:	d10c      	bne.n	8004c80 <HAL_RCC_OscConfig+0xc0>
 8004c66:	4b76      	ldr	r3, [pc, #472]	; (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a75      	ldr	r2, [pc, #468]	; (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004c6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c70:	6013      	str	r3, [r2, #0]
 8004c72:	4b73      	ldr	r3, [pc, #460]	; (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a72      	ldr	r2, [pc, #456]	; (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c7c:	6013      	str	r3, [r2, #0]
 8004c7e:	e00b      	b.n	8004c98 <HAL_RCC_OscConfig+0xd8>
 8004c80:	4b6f      	ldr	r3, [pc, #444]	; (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a6e      	ldr	r2, [pc, #440]	; (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004c86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c8a:	6013      	str	r3, [r2, #0]
 8004c8c:	4b6c      	ldr	r3, [pc, #432]	; (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a6b      	ldr	r2, [pc, #428]	; (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004c92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d013      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca0:	f7fe fcd6 	bl	8003650 <HAL_GetTick>
 8004ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ca6:	e008      	b.n	8004cba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ca8:	f7fe fcd2 	bl	8003650 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	2b64      	cmp	r3, #100	; 0x64
 8004cb4:	d901      	bls.n	8004cba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e229      	b.n	800510e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cba:	4b61      	ldr	r3, [pc, #388]	; (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d0f0      	beq.n	8004ca8 <HAL_RCC_OscConfig+0xe8>
 8004cc6:	e014      	b.n	8004cf2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc8:	f7fe fcc2 	bl	8003650 <HAL_GetTick>
 8004ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cce:	e008      	b.n	8004ce2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cd0:	f7fe fcbe 	bl	8003650 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	2b64      	cmp	r3, #100	; 0x64
 8004cdc:	d901      	bls.n	8004ce2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e215      	b.n	800510e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ce2:	4b57      	ldr	r3, [pc, #348]	; (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1f0      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x110>
 8004cee:	e000      	b.n	8004cf2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0302 	and.w	r3, r3, #2
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d069      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004cfe:	4b50      	ldr	r3, [pc, #320]	; (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f003 030c 	and.w	r3, r3, #12
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00b      	beq.n	8004d22 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d0a:	4b4d      	ldr	r3, [pc, #308]	; (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f003 030c 	and.w	r3, r3, #12
 8004d12:	2b08      	cmp	r3, #8
 8004d14:	d11c      	bne.n	8004d50 <HAL_RCC_OscConfig+0x190>
 8004d16:	4b4a      	ldr	r3, [pc, #296]	; (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d116      	bne.n	8004d50 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d22:	4b47      	ldr	r3, [pc, #284]	; (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0302 	and.w	r3, r3, #2
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d005      	beq.n	8004d3a <HAL_RCC_OscConfig+0x17a>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d001      	beq.n	8004d3a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e1e9      	b.n	800510e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d3a:	4b41      	ldr	r3, [pc, #260]	; (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	00db      	lsls	r3, r3, #3
 8004d48:	493d      	ldr	r1, [pc, #244]	; (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d4e:	e040      	b.n	8004dd2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d023      	beq.n	8004da0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d58:	4b39      	ldr	r3, [pc, #228]	; (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a38      	ldr	r2, [pc, #224]	; (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004d5e:	f043 0301 	orr.w	r3, r3, #1
 8004d62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d64:	f7fe fc74 	bl	8003650 <HAL_GetTick>
 8004d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d6a:	e008      	b.n	8004d7e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d6c:	f7fe fc70 	bl	8003650 <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d901      	bls.n	8004d7e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e1c7      	b.n	800510e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d7e:	4b30      	ldr	r3, [pc, #192]	; (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0302 	and.w	r3, r3, #2
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d0f0      	beq.n	8004d6c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d8a:	4b2d      	ldr	r3, [pc, #180]	; (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	00db      	lsls	r3, r3, #3
 8004d98:	4929      	ldr	r1, [pc, #164]	; (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	600b      	str	r3, [r1, #0]
 8004d9e:	e018      	b.n	8004dd2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004da0:	4b27      	ldr	r3, [pc, #156]	; (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a26      	ldr	r2, [pc, #152]	; (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004da6:	f023 0301 	bic.w	r3, r3, #1
 8004daa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dac:	f7fe fc50 	bl	8003650 <HAL_GetTick>
 8004db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004db2:	e008      	b.n	8004dc6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004db4:	f7fe fc4c 	bl	8003650 <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d901      	bls.n	8004dc6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e1a3      	b.n	800510e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dc6:	4b1e      	ldr	r3, [pc, #120]	; (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1f0      	bne.n	8004db4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 0308 	and.w	r3, r3, #8
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d038      	beq.n	8004e50 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d019      	beq.n	8004e1a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004de6:	4b16      	ldr	r3, [pc, #88]	; (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004de8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dea:	4a15      	ldr	r2, [pc, #84]	; (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004dec:	f043 0301 	orr.w	r3, r3, #1
 8004df0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004df2:	f7fe fc2d 	bl	8003650 <HAL_GetTick>
 8004df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004df8:	e008      	b.n	8004e0c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dfa:	f7fe fc29 	bl	8003650 <HAL_GetTick>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d901      	bls.n	8004e0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e180      	b.n	800510e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e0c:	4b0c      	ldr	r3, [pc, #48]	; (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004e0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e10:	f003 0302 	and.w	r3, r3, #2
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d0f0      	beq.n	8004dfa <HAL_RCC_OscConfig+0x23a>
 8004e18:	e01a      	b.n	8004e50 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e1a:	4b09      	ldr	r3, [pc, #36]	; (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004e1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e1e:	4a08      	ldr	r2, [pc, #32]	; (8004e40 <HAL_RCC_OscConfig+0x280>)
 8004e20:	f023 0301 	bic.w	r3, r3, #1
 8004e24:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e26:	f7fe fc13 	bl	8003650 <HAL_GetTick>
 8004e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e2c:	e00a      	b.n	8004e44 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e2e:	f7fe fc0f 	bl	8003650 <HAL_GetTick>
 8004e32:	4602      	mov	r2, r0
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d903      	bls.n	8004e44 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e166      	b.n	800510e <HAL_RCC_OscConfig+0x54e>
 8004e40:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e44:	4b92      	ldr	r3, [pc, #584]	; (8005090 <HAL_RCC_OscConfig+0x4d0>)
 8004e46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e48:	f003 0302 	and.w	r3, r3, #2
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d1ee      	bne.n	8004e2e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0304 	and.w	r3, r3, #4
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	f000 80a4 	beq.w	8004fa6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e5e:	4b8c      	ldr	r3, [pc, #560]	; (8005090 <HAL_RCC_OscConfig+0x4d0>)
 8004e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d10d      	bne.n	8004e86 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e6a:	4b89      	ldr	r3, [pc, #548]	; (8005090 <HAL_RCC_OscConfig+0x4d0>)
 8004e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6e:	4a88      	ldr	r2, [pc, #544]	; (8005090 <HAL_RCC_OscConfig+0x4d0>)
 8004e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e74:	6413      	str	r3, [r2, #64]	; 0x40
 8004e76:	4b86      	ldr	r3, [pc, #536]	; (8005090 <HAL_RCC_OscConfig+0x4d0>)
 8004e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e7e:	60bb      	str	r3, [r7, #8]
 8004e80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e82:	2301      	movs	r3, #1
 8004e84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e86:	4b83      	ldr	r3, [pc, #524]	; (8005094 <HAL_RCC_OscConfig+0x4d4>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d118      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004e92:	4b80      	ldr	r3, [pc, #512]	; (8005094 <HAL_RCC_OscConfig+0x4d4>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a7f      	ldr	r2, [pc, #508]	; (8005094 <HAL_RCC_OscConfig+0x4d4>)
 8004e98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e9e:	f7fe fbd7 	bl	8003650 <HAL_GetTick>
 8004ea2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ea4:	e008      	b.n	8004eb8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ea6:	f7fe fbd3 	bl	8003650 <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	2b64      	cmp	r3, #100	; 0x64
 8004eb2:	d901      	bls.n	8004eb8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	e12a      	b.n	800510e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004eb8:	4b76      	ldr	r3, [pc, #472]	; (8005094 <HAL_RCC_OscConfig+0x4d4>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d0f0      	beq.n	8004ea6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d106      	bne.n	8004eda <HAL_RCC_OscConfig+0x31a>
 8004ecc:	4b70      	ldr	r3, [pc, #448]	; (8005090 <HAL_RCC_OscConfig+0x4d0>)
 8004ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed0:	4a6f      	ldr	r2, [pc, #444]	; (8005090 <HAL_RCC_OscConfig+0x4d0>)
 8004ed2:	f043 0301 	orr.w	r3, r3, #1
 8004ed6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ed8:	e02d      	b.n	8004f36 <HAL_RCC_OscConfig+0x376>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d10c      	bne.n	8004efc <HAL_RCC_OscConfig+0x33c>
 8004ee2:	4b6b      	ldr	r3, [pc, #428]	; (8005090 <HAL_RCC_OscConfig+0x4d0>)
 8004ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee6:	4a6a      	ldr	r2, [pc, #424]	; (8005090 <HAL_RCC_OscConfig+0x4d0>)
 8004ee8:	f023 0301 	bic.w	r3, r3, #1
 8004eec:	6713      	str	r3, [r2, #112]	; 0x70
 8004eee:	4b68      	ldr	r3, [pc, #416]	; (8005090 <HAL_RCC_OscConfig+0x4d0>)
 8004ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ef2:	4a67      	ldr	r2, [pc, #412]	; (8005090 <HAL_RCC_OscConfig+0x4d0>)
 8004ef4:	f023 0304 	bic.w	r3, r3, #4
 8004ef8:	6713      	str	r3, [r2, #112]	; 0x70
 8004efa:	e01c      	b.n	8004f36 <HAL_RCC_OscConfig+0x376>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	2b05      	cmp	r3, #5
 8004f02:	d10c      	bne.n	8004f1e <HAL_RCC_OscConfig+0x35e>
 8004f04:	4b62      	ldr	r3, [pc, #392]	; (8005090 <HAL_RCC_OscConfig+0x4d0>)
 8004f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f08:	4a61      	ldr	r2, [pc, #388]	; (8005090 <HAL_RCC_OscConfig+0x4d0>)
 8004f0a:	f043 0304 	orr.w	r3, r3, #4
 8004f0e:	6713      	str	r3, [r2, #112]	; 0x70
 8004f10:	4b5f      	ldr	r3, [pc, #380]	; (8005090 <HAL_RCC_OscConfig+0x4d0>)
 8004f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f14:	4a5e      	ldr	r2, [pc, #376]	; (8005090 <HAL_RCC_OscConfig+0x4d0>)
 8004f16:	f043 0301 	orr.w	r3, r3, #1
 8004f1a:	6713      	str	r3, [r2, #112]	; 0x70
 8004f1c:	e00b      	b.n	8004f36 <HAL_RCC_OscConfig+0x376>
 8004f1e:	4b5c      	ldr	r3, [pc, #368]	; (8005090 <HAL_RCC_OscConfig+0x4d0>)
 8004f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f22:	4a5b      	ldr	r2, [pc, #364]	; (8005090 <HAL_RCC_OscConfig+0x4d0>)
 8004f24:	f023 0301 	bic.w	r3, r3, #1
 8004f28:	6713      	str	r3, [r2, #112]	; 0x70
 8004f2a:	4b59      	ldr	r3, [pc, #356]	; (8005090 <HAL_RCC_OscConfig+0x4d0>)
 8004f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f2e:	4a58      	ldr	r2, [pc, #352]	; (8005090 <HAL_RCC_OscConfig+0x4d0>)
 8004f30:	f023 0304 	bic.w	r3, r3, #4
 8004f34:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d015      	beq.n	8004f6a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f3e:	f7fe fb87 	bl	8003650 <HAL_GetTick>
 8004f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f44:	e00a      	b.n	8004f5c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f46:	f7fe fb83 	bl	8003650 <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d901      	bls.n	8004f5c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	e0d8      	b.n	800510e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f5c:	4b4c      	ldr	r3, [pc, #304]	; (8005090 <HAL_RCC_OscConfig+0x4d0>)
 8004f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f60:	f003 0302 	and.w	r3, r3, #2
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d0ee      	beq.n	8004f46 <HAL_RCC_OscConfig+0x386>
 8004f68:	e014      	b.n	8004f94 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f6a:	f7fe fb71 	bl	8003650 <HAL_GetTick>
 8004f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f70:	e00a      	b.n	8004f88 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f72:	f7fe fb6d 	bl	8003650 <HAL_GetTick>
 8004f76:	4602      	mov	r2, r0
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d901      	bls.n	8004f88 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e0c2      	b.n	800510e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f88:	4b41      	ldr	r3, [pc, #260]	; (8005090 <HAL_RCC_OscConfig+0x4d0>)
 8004f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f8c:	f003 0302 	and.w	r3, r3, #2
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1ee      	bne.n	8004f72 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f94:	7dfb      	ldrb	r3, [r7, #23]
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d105      	bne.n	8004fa6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f9a:	4b3d      	ldr	r3, [pc, #244]	; (8005090 <HAL_RCC_OscConfig+0x4d0>)
 8004f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9e:	4a3c      	ldr	r2, [pc, #240]	; (8005090 <HAL_RCC_OscConfig+0x4d0>)
 8004fa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fa4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	699b      	ldr	r3, [r3, #24]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	f000 80ae 	beq.w	800510c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004fb0:	4b37      	ldr	r3, [pc, #220]	; (8005090 <HAL_RCC_OscConfig+0x4d0>)
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	f003 030c 	and.w	r3, r3, #12
 8004fb8:	2b08      	cmp	r3, #8
 8004fba:	d06d      	beq.n	8005098 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	699b      	ldr	r3, [r3, #24]
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d14b      	bne.n	800505c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fc4:	4b32      	ldr	r3, [pc, #200]	; (8005090 <HAL_RCC_OscConfig+0x4d0>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a31      	ldr	r2, [pc, #196]	; (8005090 <HAL_RCC_OscConfig+0x4d0>)
 8004fca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd0:	f7fe fb3e 	bl	8003650 <HAL_GetTick>
 8004fd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fd6:	e008      	b.n	8004fea <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fd8:	f7fe fb3a 	bl	8003650 <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d901      	bls.n	8004fea <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e091      	b.n	800510e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fea:	4b29      	ldr	r3, [pc, #164]	; (8005090 <HAL_RCC_OscConfig+0x4d0>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d1f0      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	69da      	ldr	r2, [r3, #28]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	431a      	orrs	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005004:	019b      	lsls	r3, r3, #6
 8005006:	431a      	orrs	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500c:	085b      	lsrs	r3, r3, #1
 800500e:	3b01      	subs	r3, #1
 8005010:	041b      	lsls	r3, r3, #16
 8005012:	431a      	orrs	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005018:	061b      	lsls	r3, r3, #24
 800501a:	431a      	orrs	r2, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005020:	071b      	lsls	r3, r3, #28
 8005022:	491b      	ldr	r1, [pc, #108]	; (8005090 <HAL_RCC_OscConfig+0x4d0>)
 8005024:	4313      	orrs	r3, r2
 8005026:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005028:	4b19      	ldr	r3, [pc, #100]	; (8005090 <HAL_RCC_OscConfig+0x4d0>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a18      	ldr	r2, [pc, #96]	; (8005090 <HAL_RCC_OscConfig+0x4d0>)
 800502e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005032:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005034:	f7fe fb0c 	bl	8003650 <HAL_GetTick>
 8005038:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800503a:	e008      	b.n	800504e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800503c:	f7fe fb08 	bl	8003650 <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	2b02      	cmp	r3, #2
 8005048:	d901      	bls.n	800504e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e05f      	b.n	800510e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800504e:	4b10      	ldr	r3, [pc, #64]	; (8005090 <HAL_RCC_OscConfig+0x4d0>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d0f0      	beq.n	800503c <HAL_RCC_OscConfig+0x47c>
 800505a:	e057      	b.n	800510c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800505c:	4b0c      	ldr	r3, [pc, #48]	; (8005090 <HAL_RCC_OscConfig+0x4d0>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a0b      	ldr	r2, [pc, #44]	; (8005090 <HAL_RCC_OscConfig+0x4d0>)
 8005062:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005066:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005068:	f7fe faf2 	bl	8003650 <HAL_GetTick>
 800506c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800506e:	e008      	b.n	8005082 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005070:	f7fe faee 	bl	8003650 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	2b02      	cmp	r3, #2
 800507c:	d901      	bls.n	8005082 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e045      	b.n	800510e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005082:	4b03      	ldr	r3, [pc, #12]	; (8005090 <HAL_RCC_OscConfig+0x4d0>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1f0      	bne.n	8005070 <HAL_RCC_OscConfig+0x4b0>
 800508e:	e03d      	b.n	800510c <HAL_RCC_OscConfig+0x54c>
 8005090:	40023800 	.word	0x40023800
 8005094:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005098:	4b1f      	ldr	r3, [pc, #124]	; (8005118 <HAL_RCC_OscConfig+0x558>)
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d030      	beq.n	8005108 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d129      	bne.n	8005108 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050be:	429a      	cmp	r2, r3
 80050c0:	d122      	bne.n	8005108 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80050c8:	4013      	ands	r3, r2
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80050ce:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d119      	bne.n	8005108 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050de:	085b      	lsrs	r3, r3, #1
 80050e0:	3b01      	subs	r3, #1
 80050e2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d10f      	bne.n	8005108 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d107      	bne.n	8005108 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005102:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005104:	429a      	cmp	r2, r3
 8005106:	d001      	beq.n	800510c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e000      	b.n	800510e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3718      	adds	r7, #24
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	40023800 	.word	0x40023800

0800511c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005126:	2300      	movs	r3, #0
 8005128:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d101      	bne.n	8005134 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e0d0      	b.n	80052d6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005134:	4b6a      	ldr	r3, [pc, #424]	; (80052e0 <HAL_RCC_ClockConfig+0x1c4>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 030f 	and.w	r3, r3, #15
 800513c:	683a      	ldr	r2, [r7, #0]
 800513e:	429a      	cmp	r2, r3
 8005140:	d910      	bls.n	8005164 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005142:	4b67      	ldr	r3, [pc, #412]	; (80052e0 <HAL_RCC_ClockConfig+0x1c4>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f023 020f 	bic.w	r2, r3, #15
 800514a:	4965      	ldr	r1, [pc, #404]	; (80052e0 <HAL_RCC_ClockConfig+0x1c4>)
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	4313      	orrs	r3, r2
 8005150:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005152:	4b63      	ldr	r3, [pc, #396]	; (80052e0 <HAL_RCC_ClockConfig+0x1c4>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 030f 	and.w	r3, r3, #15
 800515a:	683a      	ldr	r2, [r7, #0]
 800515c:	429a      	cmp	r2, r3
 800515e:	d001      	beq.n	8005164 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e0b8      	b.n	80052d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0302 	and.w	r3, r3, #2
 800516c:	2b00      	cmp	r3, #0
 800516e:	d020      	beq.n	80051b2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0304 	and.w	r3, r3, #4
 8005178:	2b00      	cmp	r3, #0
 800517a:	d005      	beq.n	8005188 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800517c:	4b59      	ldr	r3, [pc, #356]	; (80052e4 <HAL_RCC_ClockConfig+0x1c8>)
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	4a58      	ldr	r2, [pc, #352]	; (80052e4 <HAL_RCC_ClockConfig+0x1c8>)
 8005182:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005186:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0308 	and.w	r3, r3, #8
 8005190:	2b00      	cmp	r3, #0
 8005192:	d005      	beq.n	80051a0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005194:	4b53      	ldr	r3, [pc, #332]	; (80052e4 <HAL_RCC_ClockConfig+0x1c8>)
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	4a52      	ldr	r2, [pc, #328]	; (80052e4 <HAL_RCC_ClockConfig+0x1c8>)
 800519a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800519e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051a0:	4b50      	ldr	r3, [pc, #320]	; (80052e4 <HAL_RCC_ClockConfig+0x1c8>)
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	494d      	ldr	r1, [pc, #308]	; (80052e4 <HAL_RCC_ClockConfig+0x1c8>)
 80051ae:	4313      	orrs	r3, r2
 80051b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0301 	and.w	r3, r3, #1
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d040      	beq.n	8005240 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d107      	bne.n	80051d6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051c6:	4b47      	ldr	r3, [pc, #284]	; (80052e4 <HAL_RCC_ClockConfig+0x1c8>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d115      	bne.n	80051fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e07f      	b.n	80052d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d107      	bne.n	80051ee <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051de:	4b41      	ldr	r3, [pc, #260]	; (80052e4 <HAL_RCC_ClockConfig+0x1c8>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d109      	bne.n	80051fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e073      	b.n	80052d6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051ee:	4b3d      	ldr	r3, [pc, #244]	; (80052e4 <HAL_RCC_ClockConfig+0x1c8>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0302 	and.w	r3, r3, #2
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d101      	bne.n	80051fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e06b      	b.n	80052d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051fe:	4b39      	ldr	r3, [pc, #228]	; (80052e4 <HAL_RCC_ClockConfig+0x1c8>)
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	f023 0203 	bic.w	r2, r3, #3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	4936      	ldr	r1, [pc, #216]	; (80052e4 <HAL_RCC_ClockConfig+0x1c8>)
 800520c:	4313      	orrs	r3, r2
 800520e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005210:	f7fe fa1e 	bl	8003650 <HAL_GetTick>
 8005214:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005216:	e00a      	b.n	800522e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005218:	f7fe fa1a 	bl	8003650 <HAL_GetTick>
 800521c:	4602      	mov	r2, r0
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	f241 3288 	movw	r2, #5000	; 0x1388
 8005226:	4293      	cmp	r3, r2
 8005228:	d901      	bls.n	800522e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e053      	b.n	80052d6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800522e:	4b2d      	ldr	r3, [pc, #180]	; (80052e4 <HAL_RCC_ClockConfig+0x1c8>)
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f003 020c 	and.w	r2, r3, #12
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	429a      	cmp	r2, r3
 800523e:	d1eb      	bne.n	8005218 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005240:	4b27      	ldr	r3, [pc, #156]	; (80052e0 <HAL_RCC_ClockConfig+0x1c4>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 030f 	and.w	r3, r3, #15
 8005248:	683a      	ldr	r2, [r7, #0]
 800524a:	429a      	cmp	r2, r3
 800524c:	d210      	bcs.n	8005270 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800524e:	4b24      	ldr	r3, [pc, #144]	; (80052e0 <HAL_RCC_ClockConfig+0x1c4>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f023 020f 	bic.w	r2, r3, #15
 8005256:	4922      	ldr	r1, [pc, #136]	; (80052e0 <HAL_RCC_ClockConfig+0x1c4>)
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	4313      	orrs	r3, r2
 800525c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800525e:	4b20      	ldr	r3, [pc, #128]	; (80052e0 <HAL_RCC_ClockConfig+0x1c4>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 030f 	and.w	r3, r3, #15
 8005266:	683a      	ldr	r2, [r7, #0]
 8005268:	429a      	cmp	r2, r3
 800526a:	d001      	beq.n	8005270 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e032      	b.n	80052d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0304 	and.w	r3, r3, #4
 8005278:	2b00      	cmp	r3, #0
 800527a:	d008      	beq.n	800528e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800527c:	4b19      	ldr	r3, [pc, #100]	; (80052e4 <HAL_RCC_ClockConfig+0x1c8>)
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	4916      	ldr	r1, [pc, #88]	; (80052e4 <HAL_RCC_ClockConfig+0x1c8>)
 800528a:	4313      	orrs	r3, r2
 800528c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0308 	and.w	r3, r3, #8
 8005296:	2b00      	cmp	r3, #0
 8005298:	d009      	beq.n	80052ae <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800529a:	4b12      	ldr	r3, [pc, #72]	; (80052e4 <HAL_RCC_ClockConfig+0x1c8>)
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	00db      	lsls	r3, r3, #3
 80052a8:	490e      	ldr	r1, [pc, #56]	; (80052e4 <HAL_RCC_ClockConfig+0x1c8>)
 80052aa:	4313      	orrs	r3, r2
 80052ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80052ae:	f000 f821 	bl	80052f4 <HAL_RCC_GetSysClockFreq>
 80052b2:	4602      	mov	r2, r0
 80052b4:	4b0b      	ldr	r3, [pc, #44]	; (80052e4 <HAL_RCC_ClockConfig+0x1c8>)
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	091b      	lsrs	r3, r3, #4
 80052ba:	f003 030f 	and.w	r3, r3, #15
 80052be:	490a      	ldr	r1, [pc, #40]	; (80052e8 <HAL_RCC_ClockConfig+0x1cc>)
 80052c0:	5ccb      	ldrb	r3, [r1, r3]
 80052c2:	fa22 f303 	lsr.w	r3, r2, r3
 80052c6:	4a09      	ldr	r2, [pc, #36]	; (80052ec <HAL_RCC_ClockConfig+0x1d0>)
 80052c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80052ca:	4b09      	ldr	r3, [pc, #36]	; (80052f0 <HAL_RCC_ClockConfig+0x1d4>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4618      	mov	r0, r3
 80052d0:	f7fe f97a 	bl	80035c8 <HAL_InitTick>

  return HAL_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3710      	adds	r7, #16
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	40023c00 	.word	0x40023c00
 80052e4:	40023800 	.word	0x40023800
 80052e8:	0800b118 	.word	0x0800b118
 80052ec:	20000414 	.word	0x20000414
 80052f0:	2000041c 	.word	0x2000041c

080052f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052f8:	b094      	sub	sp, #80	; 0x50
 80052fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80052fc:	2300      	movs	r3, #0
 80052fe:	647b      	str	r3, [r7, #68]	; 0x44
 8005300:	2300      	movs	r3, #0
 8005302:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005304:	2300      	movs	r3, #0
 8005306:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005308:	2300      	movs	r3, #0
 800530a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800530c:	4b79      	ldr	r3, [pc, #484]	; (80054f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	f003 030c 	and.w	r3, r3, #12
 8005314:	2b08      	cmp	r3, #8
 8005316:	d00d      	beq.n	8005334 <HAL_RCC_GetSysClockFreq+0x40>
 8005318:	2b08      	cmp	r3, #8
 800531a:	f200 80e1 	bhi.w	80054e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800531e:	2b00      	cmp	r3, #0
 8005320:	d002      	beq.n	8005328 <HAL_RCC_GetSysClockFreq+0x34>
 8005322:	2b04      	cmp	r3, #4
 8005324:	d003      	beq.n	800532e <HAL_RCC_GetSysClockFreq+0x3a>
 8005326:	e0db      	b.n	80054e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005328:	4b73      	ldr	r3, [pc, #460]	; (80054f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800532a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800532c:	e0db      	b.n	80054e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800532e:	4b73      	ldr	r3, [pc, #460]	; (80054fc <HAL_RCC_GetSysClockFreq+0x208>)
 8005330:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005332:	e0d8      	b.n	80054e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005334:	4b6f      	ldr	r3, [pc, #444]	; (80054f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800533c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800533e:	4b6d      	ldr	r3, [pc, #436]	; (80054f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d063      	beq.n	8005412 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800534a:	4b6a      	ldr	r3, [pc, #424]	; (80054f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	099b      	lsrs	r3, r3, #6
 8005350:	2200      	movs	r2, #0
 8005352:	63bb      	str	r3, [r7, #56]	; 0x38
 8005354:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005358:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800535c:	633b      	str	r3, [r7, #48]	; 0x30
 800535e:	2300      	movs	r3, #0
 8005360:	637b      	str	r3, [r7, #52]	; 0x34
 8005362:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005366:	4622      	mov	r2, r4
 8005368:	462b      	mov	r3, r5
 800536a:	f04f 0000 	mov.w	r0, #0
 800536e:	f04f 0100 	mov.w	r1, #0
 8005372:	0159      	lsls	r1, r3, #5
 8005374:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005378:	0150      	lsls	r0, r2, #5
 800537a:	4602      	mov	r2, r0
 800537c:	460b      	mov	r3, r1
 800537e:	4621      	mov	r1, r4
 8005380:	1a51      	subs	r1, r2, r1
 8005382:	6139      	str	r1, [r7, #16]
 8005384:	4629      	mov	r1, r5
 8005386:	eb63 0301 	sbc.w	r3, r3, r1
 800538a:	617b      	str	r3, [r7, #20]
 800538c:	f04f 0200 	mov.w	r2, #0
 8005390:	f04f 0300 	mov.w	r3, #0
 8005394:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005398:	4659      	mov	r1, fp
 800539a:	018b      	lsls	r3, r1, #6
 800539c:	4651      	mov	r1, sl
 800539e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80053a2:	4651      	mov	r1, sl
 80053a4:	018a      	lsls	r2, r1, #6
 80053a6:	4651      	mov	r1, sl
 80053a8:	ebb2 0801 	subs.w	r8, r2, r1
 80053ac:	4659      	mov	r1, fp
 80053ae:	eb63 0901 	sbc.w	r9, r3, r1
 80053b2:	f04f 0200 	mov.w	r2, #0
 80053b6:	f04f 0300 	mov.w	r3, #0
 80053ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053c6:	4690      	mov	r8, r2
 80053c8:	4699      	mov	r9, r3
 80053ca:	4623      	mov	r3, r4
 80053cc:	eb18 0303 	adds.w	r3, r8, r3
 80053d0:	60bb      	str	r3, [r7, #8]
 80053d2:	462b      	mov	r3, r5
 80053d4:	eb49 0303 	adc.w	r3, r9, r3
 80053d8:	60fb      	str	r3, [r7, #12]
 80053da:	f04f 0200 	mov.w	r2, #0
 80053de:	f04f 0300 	mov.w	r3, #0
 80053e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80053e6:	4629      	mov	r1, r5
 80053e8:	024b      	lsls	r3, r1, #9
 80053ea:	4621      	mov	r1, r4
 80053ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80053f0:	4621      	mov	r1, r4
 80053f2:	024a      	lsls	r2, r1, #9
 80053f4:	4610      	mov	r0, r2
 80053f6:	4619      	mov	r1, r3
 80053f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053fa:	2200      	movs	r2, #0
 80053fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80053fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005400:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005404:	f7fa ff74 	bl	80002f0 <__aeabi_uldivmod>
 8005408:	4602      	mov	r2, r0
 800540a:	460b      	mov	r3, r1
 800540c:	4613      	mov	r3, r2
 800540e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005410:	e058      	b.n	80054c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005412:	4b38      	ldr	r3, [pc, #224]	; (80054f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	099b      	lsrs	r3, r3, #6
 8005418:	2200      	movs	r2, #0
 800541a:	4618      	mov	r0, r3
 800541c:	4611      	mov	r1, r2
 800541e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005422:	623b      	str	r3, [r7, #32]
 8005424:	2300      	movs	r3, #0
 8005426:	627b      	str	r3, [r7, #36]	; 0x24
 8005428:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800542c:	4642      	mov	r2, r8
 800542e:	464b      	mov	r3, r9
 8005430:	f04f 0000 	mov.w	r0, #0
 8005434:	f04f 0100 	mov.w	r1, #0
 8005438:	0159      	lsls	r1, r3, #5
 800543a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800543e:	0150      	lsls	r0, r2, #5
 8005440:	4602      	mov	r2, r0
 8005442:	460b      	mov	r3, r1
 8005444:	4641      	mov	r1, r8
 8005446:	ebb2 0a01 	subs.w	sl, r2, r1
 800544a:	4649      	mov	r1, r9
 800544c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005450:	f04f 0200 	mov.w	r2, #0
 8005454:	f04f 0300 	mov.w	r3, #0
 8005458:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800545c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005460:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005464:	ebb2 040a 	subs.w	r4, r2, sl
 8005468:	eb63 050b 	sbc.w	r5, r3, fp
 800546c:	f04f 0200 	mov.w	r2, #0
 8005470:	f04f 0300 	mov.w	r3, #0
 8005474:	00eb      	lsls	r3, r5, #3
 8005476:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800547a:	00e2      	lsls	r2, r4, #3
 800547c:	4614      	mov	r4, r2
 800547e:	461d      	mov	r5, r3
 8005480:	4643      	mov	r3, r8
 8005482:	18e3      	adds	r3, r4, r3
 8005484:	603b      	str	r3, [r7, #0]
 8005486:	464b      	mov	r3, r9
 8005488:	eb45 0303 	adc.w	r3, r5, r3
 800548c:	607b      	str	r3, [r7, #4]
 800548e:	f04f 0200 	mov.w	r2, #0
 8005492:	f04f 0300 	mov.w	r3, #0
 8005496:	e9d7 4500 	ldrd	r4, r5, [r7]
 800549a:	4629      	mov	r1, r5
 800549c:	028b      	lsls	r3, r1, #10
 800549e:	4621      	mov	r1, r4
 80054a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80054a4:	4621      	mov	r1, r4
 80054a6:	028a      	lsls	r2, r1, #10
 80054a8:	4610      	mov	r0, r2
 80054aa:	4619      	mov	r1, r3
 80054ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054ae:	2200      	movs	r2, #0
 80054b0:	61bb      	str	r3, [r7, #24]
 80054b2:	61fa      	str	r2, [r7, #28]
 80054b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054b8:	f7fa ff1a 	bl	80002f0 <__aeabi_uldivmod>
 80054bc:	4602      	mov	r2, r0
 80054be:	460b      	mov	r3, r1
 80054c0:	4613      	mov	r3, r2
 80054c2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80054c4:	4b0b      	ldr	r3, [pc, #44]	; (80054f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	0c1b      	lsrs	r3, r3, #16
 80054ca:	f003 0303 	and.w	r3, r3, #3
 80054ce:	3301      	adds	r3, #1
 80054d0:	005b      	lsls	r3, r3, #1
 80054d2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80054d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80054d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80054de:	e002      	b.n	80054e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80054e0:	4b05      	ldr	r3, [pc, #20]	; (80054f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80054e2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80054e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3750      	adds	r7, #80	; 0x50
 80054ec:	46bd      	mov	sp, r7
 80054ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054f2:	bf00      	nop
 80054f4:	40023800 	.word	0x40023800
 80054f8:	00f42400 	.word	0x00f42400
 80054fc:	007a1200 	.word	0x007a1200

08005500 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005500:	b480      	push	{r7}
 8005502:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005504:	4b03      	ldr	r3, [pc, #12]	; (8005514 <HAL_RCC_GetHCLKFreq+0x14>)
 8005506:	681b      	ldr	r3, [r3, #0]
}
 8005508:	4618      	mov	r0, r3
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	20000414 	.word	0x20000414

08005518 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800551c:	f7ff fff0 	bl	8005500 <HAL_RCC_GetHCLKFreq>
 8005520:	4602      	mov	r2, r0
 8005522:	4b05      	ldr	r3, [pc, #20]	; (8005538 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	0a9b      	lsrs	r3, r3, #10
 8005528:	f003 0307 	and.w	r3, r3, #7
 800552c:	4903      	ldr	r1, [pc, #12]	; (800553c <HAL_RCC_GetPCLK1Freq+0x24>)
 800552e:	5ccb      	ldrb	r3, [r1, r3]
 8005530:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005534:	4618      	mov	r0, r3
 8005536:	bd80      	pop	{r7, pc}
 8005538:	40023800 	.word	0x40023800
 800553c:	0800b128 	.word	0x0800b128

08005540 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005544:	f7ff ffdc 	bl	8005500 <HAL_RCC_GetHCLKFreq>
 8005548:	4602      	mov	r2, r0
 800554a:	4b05      	ldr	r3, [pc, #20]	; (8005560 <HAL_RCC_GetPCLK2Freq+0x20>)
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	0b5b      	lsrs	r3, r3, #13
 8005550:	f003 0307 	and.w	r3, r3, #7
 8005554:	4903      	ldr	r1, [pc, #12]	; (8005564 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005556:	5ccb      	ldrb	r3, [r1, r3]
 8005558:	fa22 f303 	lsr.w	r3, r2, r3
}
 800555c:	4618      	mov	r0, r3
 800555e:	bd80      	pop	{r7, pc}
 8005560:	40023800 	.word	0x40023800
 8005564:	0800b128 	.word	0x0800b128

08005568 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b088      	sub	sp, #32
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005570:	2300      	movs	r3, #0
 8005572:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005574:	2300      	movs	r3, #0
 8005576:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005578:	2300      	movs	r3, #0
 800557a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800557c:	2300      	movs	r3, #0
 800557e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005580:	2300      	movs	r3, #0
 8005582:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0301 	and.w	r3, r3, #1
 800558c:	2b00      	cmp	r3, #0
 800558e:	d012      	beq.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005590:	4b69      	ldr	r3, [pc, #420]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	4a68      	ldr	r2, [pc, #416]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005596:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800559a:	6093      	str	r3, [r2, #8]
 800559c:	4b66      	ldr	r3, [pc, #408]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800559e:	689a      	ldr	r2, [r3, #8]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055a4:	4964      	ldr	r1, [pc, #400]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055a6:	4313      	orrs	r3, r2
 80055a8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d101      	bne.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80055b2:	2301      	movs	r3, #1
 80055b4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d017      	beq.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80055c2:	4b5d      	ldr	r3, [pc, #372]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055d0:	4959      	ldr	r1, [pc, #356]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055e0:	d101      	bne.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80055e2:	2301      	movs	r3, #1
 80055e4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d101      	bne.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80055ee:	2301      	movs	r3, #1
 80055f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d017      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80055fe:	4b4e      	ldr	r3, [pc, #312]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005600:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005604:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560c:	494a      	ldr	r1, [pc, #296]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800560e:	4313      	orrs	r3, r2
 8005610:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005618:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800561c:	d101      	bne.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800561e:	2301      	movs	r3, #1
 8005620:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005626:	2b00      	cmp	r3, #0
 8005628:	d101      	bne.n	800562e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800562a:	2301      	movs	r3, #1
 800562c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d001      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800563a:	2301      	movs	r3, #1
 800563c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0320 	and.w	r3, r3, #32
 8005646:	2b00      	cmp	r3, #0
 8005648:	f000 808b 	beq.w	8005762 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800564c:	4b3a      	ldr	r3, [pc, #232]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800564e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005650:	4a39      	ldr	r2, [pc, #228]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005656:	6413      	str	r3, [r2, #64]	; 0x40
 8005658:	4b37      	ldr	r3, [pc, #220]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800565a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005660:	60bb      	str	r3, [r7, #8]
 8005662:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005664:	4b35      	ldr	r3, [pc, #212]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a34      	ldr	r2, [pc, #208]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800566a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800566e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005670:	f7fd ffee 	bl	8003650 <HAL_GetTick>
 8005674:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005676:	e008      	b.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005678:	f7fd ffea 	bl	8003650 <HAL_GetTick>
 800567c:	4602      	mov	r2, r0
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	2b64      	cmp	r3, #100	; 0x64
 8005684:	d901      	bls.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	e38f      	b.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800568a:	4b2c      	ldr	r3, [pc, #176]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005692:	2b00      	cmp	r3, #0
 8005694:	d0f0      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005696:	4b28      	ldr	r3, [pc, #160]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800569a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800569e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d035      	beq.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056ae:	693a      	ldr	r2, [r7, #16]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d02e      	beq.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80056b4:	4b20      	ldr	r3, [pc, #128]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056bc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80056be:	4b1e      	ldr	r3, [pc, #120]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c2:	4a1d      	ldr	r2, [pc, #116]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056c8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80056ca:	4b1b      	ldr	r3, [pc, #108]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ce:	4a1a      	ldr	r2, [pc, #104]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056d4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80056d6:	4a18      	ldr	r2, [pc, #96]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80056dc:	4b16      	ldr	r3, [pc, #88]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e0:	f003 0301 	and.w	r3, r3, #1
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d114      	bne.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056e8:	f7fd ffb2 	bl	8003650 <HAL_GetTick>
 80056ec:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056ee:	e00a      	b.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056f0:	f7fd ffae 	bl	8003650 <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80056fe:	4293      	cmp	r3, r2
 8005700:	d901      	bls.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e351      	b.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005706:	4b0c      	ldr	r3, [pc, #48]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800570a:	f003 0302 	and.w	r3, r3, #2
 800570e:	2b00      	cmp	r3, #0
 8005710:	d0ee      	beq.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005716:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800571a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800571e:	d111      	bne.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005720:	4b05      	ldr	r3, [pc, #20]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800572c:	4b04      	ldr	r3, [pc, #16]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800572e:	400b      	ands	r3, r1
 8005730:	4901      	ldr	r1, [pc, #4]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005732:	4313      	orrs	r3, r2
 8005734:	608b      	str	r3, [r1, #8]
 8005736:	e00b      	b.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005738:	40023800 	.word	0x40023800
 800573c:	40007000 	.word	0x40007000
 8005740:	0ffffcff 	.word	0x0ffffcff
 8005744:	4bac      	ldr	r3, [pc, #688]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	4aab      	ldr	r2, [pc, #684]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800574a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800574e:	6093      	str	r3, [r2, #8]
 8005750:	4ba9      	ldr	r3, [pc, #676]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005752:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005758:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800575c:	49a6      	ldr	r1, [pc, #664]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800575e:	4313      	orrs	r3, r2
 8005760:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 0310 	and.w	r3, r3, #16
 800576a:	2b00      	cmp	r3, #0
 800576c:	d010      	beq.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800576e:	4ba2      	ldr	r3, [pc, #648]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005770:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005774:	4aa0      	ldr	r2, [pc, #640]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005776:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800577a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800577e:	4b9e      	ldr	r3, [pc, #632]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005780:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005788:	499b      	ldr	r1, [pc, #620]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800578a:	4313      	orrs	r3, r2
 800578c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005798:	2b00      	cmp	r3, #0
 800579a:	d00a      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800579c:	4b96      	ldr	r3, [pc, #600]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800579e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057a2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057aa:	4993      	ldr	r1, [pc, #588]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057ac:	4313      	orrs	r3, r2
 80057ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00a      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80057be:	4b8e      	ldr	r3, [pc, #568]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057cc:	498a      	ldr	r1, [pc, #552]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057ce:	4313      	orrs	r3, r2
 80057d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00a      	beq.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80057e0:	4b85      	ldr	r3, [pc, #532]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057ee:	4982      	ldr	r1, [pc, #520]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057f0:	4313      	orrs	r3, r2
 80057f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00a      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005802:	4b7d      	ldr	r3, [pc, #500]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005808:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005810:	4979      	ldr	r1, [pc, #484]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005812:	4313      	orrs	r3, r2
 8005814:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005820:	2b00      	cmp	r3, #0
 8005822:	d00a      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005824:	4b74      	ldr	r3, [pc, #464]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800582a:	f023 0203 	bic.w	r2, r3, #3
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005832:	4971      	ldr	r1, [pc, #452]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005834:	4313      	orrs	r3, r2
 8005836:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00a      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005846:	4b6c      	ldr	r3, [pc, #432]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800584c:	f023 020c 	bic.w	r2, r3, #12
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005854:	4968      	ldr	r1, [pc, #416]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005856:	4313      	orrs	r3, r2
 8005858:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00a      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005868:	4b63      	ldr	r3, [pc, #396]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800586a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800586e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005876:	4960      	ldr	r1, [pc, #384]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005878:	4313      	orrs	r3, r2
 800587a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005886:	2b00      	cmp	r3, #0
 8005888:	d00a      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800588a:	4b5b      	ldr	r3, [pc, #364]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800588c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005890:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005898:	4957      	ldr	r1, [pc, #348]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800589a:	4313      	orrs	r3, r2
 800589c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00a      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80058ac:	4b52      	ldr	r3, [pc, #328]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ba:	494f      	ldr	r1, [pc, #316]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058bc:	4313      	orrs	r3, r2
 80058be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d00a      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80058ce:	4b4a      	ldr	r3, [pc, #296]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058d4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058dc:	4946      	ldr	r1, [pc, #280]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058de:	4313      	orrs	r3, r2
 80058e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00a      	beq.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80058f0:	4b41      	ldr	r3, [pc, #260]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058f6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058fe:	493e      	ldr	r1, [pc, #248]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005900:	4313      	orrs	r3, r2
 8005902:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d00a      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005912:	4b39      	ldr	r3, [pc, #228]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005918:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005920:	4935      	ldr	r1, [pc, #212]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005922:	4313      	orrs	r3, r2
 8005924:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00a      	beq.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005934:	4b30      	ldr	r3, [pc, #192]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800593a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005942:	492d      	ldr	r1, [pc, #180]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005944:	4313      	orrs	r3, r2
 8005946:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005952:	2b00      	cmp	r3, #0
 8005954:	d011      	beq.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005956:	4b28      	ldr	r3, [pc, #160]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800595c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005964:	4924      	ldr	r1, [pc, #144]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005966:	4313      	orrs	r3, r2
 8005968:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005970:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005974:	d101      	bne.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005976:	2301      	movs	r3, #1
 8005978:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0308 	and.w	r3, r3, #8
 8005982:	2b00      	cmp	r3, #0
 8005984:	d001      	beq.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005986:	2301      	movs	r3, #1
 8005988:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00a      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005996:	4b18      	ldr	r3, [pc, #96]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005998:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800599c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059a4:	4914      	ldr	r1, [pc, #80]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059a6:	4313      	orrs	r3, r2
 80059a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d00b      	beq.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80059b8:	4b0f      	ldr	r3, [pc, #60]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059be:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059c8:	490b      	ldr	r1, [pc, #44]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059ca:	4313      	orrs	r3, r2
 80059cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d00f      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80059dc:	4b06      	ldr	r3, [pc, #24]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059e2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059ec:	4902      	ldr	r1, [pc, #8]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059ee:	4313      	orrs	r3, r2
 80059f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80059f4:	e002      	b.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x494>
 80059f6:	bf00      	nop
 80059f8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d00b      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005a08:	4b8a      	ldr	r3, [pc, #552]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a0e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a18:	4986      	ldr	r1, [pc, #536]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d00b      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005a2c:	4b81      	ldr	r3, [pc, #516]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a32:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a3c:	497d      	ldr	r1, [pc, #500]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d006      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	f000 80d6 	beq.w	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005a58:	4b76      	ldr	r3, [pc, #472]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a75      	ldr	r2, [pc, #468]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a5e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005a62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a64:	f7fd fdf4 	bl	8003650 <HAL_GetTick>
 8005a68:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a6a:	e008      	b.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005a6c:	f7fd fdf0 	bl	8003650 <HAL_GetTick>
 8005a70:	4602      	mov	r2, r0
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	2b64      	cmp	r3, #100	; 0x64
 8005a78:	d901      	bls.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	e195      	b.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a7e:	4b6d      	ldr	r3, [pc, #436]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d1f0      	bne.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 0301 	and.w	r3, r3, #1
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d021      	beq.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d11d      	bne.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005a9e:	4b65      	ldr	r3, [pc, #404]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005aa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005aa4:	0c1b      	lsrs	r3, r3, #16
 8005aa6:	f003 0303 	and.w	r3, r3, #3
 8005aaa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005aac:	4b61      	ldr	r3, [pc, #388]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005aae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ab2:	0e1b      	lsrs	r3, r3, #24
 8005ab4:	f003 030f 	and.w	r3, r3, #15
 8005ab8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	019a      	lsls	r2, r3, #6
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	041b      	lsls	r3, r3, #16
 8005ac4:	431a      	orrs	r2, r3
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	061b      	lsls	r3, r3, #24
 8005aca:	431a      	orrs	r2, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	071b      	lsls	r3, r3, #28
 8005ad2:	4958      	ldr	r1, [pc, #352]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d004      	beq.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005aee:	d00a      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d02e      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b04:	d129      	bne.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005b06:	4b4b      	ldr	r3, [pc, #300]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b0c:	0c1b      	lsrs	r3, r3, #16
 8005b0e:	f003 0303 	and.w	r3, r3, #3
 8005b12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005b14:	4b47      	ldr	r3, [pc, #284]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b1a:	0f1b      	lsrs	r3, r3, #28
 8005b1c:	f003 0307 	and.w	r3, r3, #7
 8005b20:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	019a      	lsls	r2, r3, #6
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	041b      	lsls	r3, r3, #16
 8005b2c:	431a      	orrs	r2, r3
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	061b      	lsls	r3, r3, #24
 8005b34:	431a      	orrs	r2, r3
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	071b      	lsls	r3, r3, #28
 8005b3a:	493e      	ldr	r1, [pc, #248]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005b42:	4b3c      	ldr	r3, [pc, #240]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b48:	f023 021f 	bic.w	r2, r3, #31
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b50:	3b01      	subs	r3, #1
 8005b52:	4938      	ldr	r1, [pc, #224]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b54:	4313      	orrs	r3, r2
 8005b56:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d01d      	beq.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005b66:	4b33      	ldr	r3, [pc, #204]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b6c:	0e1b      	lsrs	r3, r3, #24
 8005b6e:	f003 030f 	and.w	r3, r3, #15
 8005b72:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005b74:	4b2f      	ldr	r3, [pc, #188]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b7a:	0f1b      	lsrs	r3, r3, #28
 8005b7c:	f003 0307 	and.w	r3, r3, #7
 8005b80:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	019a      	lsls	r2, r3, #6
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	041b      	lsls	r3, r3, #16
 8005b8e:	431a      	orrs	r2, r3
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	061b      	lsls	r3, r3, #24
 8005b94:	431a      	orrs	r2, r3
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	071b      	lsls	r3, r3, #28
 8005b9a:	4926      	ldr	r1, [pc, #152]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d011      	beq.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	019a      	lsls	r2, r3, #6
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	041b      	lsls	r3, r3, #16
 8005bba:	431a      	orrs	r2, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	061b      	lsls	r3, r3, #24
 8005bc2:	431a      	orrs	r2, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	071b      	lsls	r3, r3, #28
 8005bca:	491a      	ldr	r1, [pc, #104]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005bd2:	4b18      	ldr	r3, [pc, #96]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a17      	ldr	r2, [pc, #92]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bd8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005bdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bde:	f7fd fd37 	bl	8003650 <HAL_GetTick>
 8005be2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005be4:	e008      	b.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005be6:	f7fd fd33 	bl	8003650 <HAL_GetTick>
 8005bea:	4602      	mov	r2, r0
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	2b64      	cmp	r3, #100	; 0x64
 8005bf2:	d901      	bls.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	e0d8      	b.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005bf8:	4b0e      	ldr	r3, [pc, #56]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d0f0      	beq.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	f040 80ce 	bne.w	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005c0c:	4b09      	ldr	r3, [pc, #36]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a08      	ldr	r2, [pc, #32]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c18:	f7fd fd1a 	bl	8003650 <HAL_GetTick>
 8005c1c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005c1e:	e00b      	b.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005c20:	f7fd fd16 	bl	8003650 <HAL_GetTick>
 8005c24:	4602      	mov	r2, r0
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	2b64      	cmp	r3, #100	; 0x64
 8005c2c:	d904      	bls.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e0bb      	b.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005c32:	bf00      	nop
 8005c34:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005c38:	4b5e      	ldr	r3, [pc, #376]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c44:	d0ec      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d003      	beq.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d009      	beq.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d02e      	beq.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d12a      	bne.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005c6e:	4b51      	ldr	r3, [pc, #324]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c74:	0c1b      	lsrs	r3, r3, #16
 8005c76:	f003 0303 	and.w	r3, r3, #3
 8005c7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005c7c:	4b4d      	ldr	r3, [pc, #308]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c82:	0f1b      	lsrs	r3, r3, #28
 8005c84:	f003 0307 	and.w	r3, r3, #7
 8005c88:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	695b      	ldr	r3, [r3, #20]
 8005c8e:	019a      	lsls	r2, r3, #6
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	041b      	lsls	r3, r3, #16
 8005c94:	431a      	orrs	r2, r3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	061b      	lsls	r3, r3, #24
 8005c9c:	431a      	orrs	r2, r3
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	071b      	lsls	r3, r3, #28
 8005ca2:	4944      	ldr	r1, [pc, #272]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005caa:	4b42      	ldr	r3, [pc, #264]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005cac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cb0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb8:	3b01      	subs	r3, #1
 8005cba:	021b      	lsls	r3, r3, #8
 8005cbc:	493d      	ldr	r1, [pc, #244]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d022      	beq.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005cd8:	d11d      	bne.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005cda:	4b36      	ldr	r3, [pc, #216]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ce0:	0e1b      	lsrs	r3, r3, #24
 8005ce2:	f003 030f 	and.w	r3, r3, #15
 8005ce6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005ce8:	4b32      	ldr	r3, [pc, #200]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cee:	0f1b      	lsrs	r3, r3, #28
 8005cf0:	f003 0307 	and.w	r3, r3, #7
 8005cf4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	695b      	ldr	r3, [r3, #20]
 8005cfa:	019a      	lsls	r2, r3, #6
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6a1b      	ldr	r3, [r3, #32]
 8005d00:	041b      	lsls	r3, r3, #16
 8005d02:	431a      	orrs	r2, r3
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	061b      	lsls	r3, r3, #24
 8005d08:	431a      	orrs	r2, r3
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	071b      	lsls	r3, r3, #28
 8005d0e:	4929      	ldr	r1, [pc, #164]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d10:	4313      	orrs	r3, r2
 8005d12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 0308 	and.w	r3, r3, #8
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d028      	beq.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005d22:	4b24      	ldr	r3, [pc, #144]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d28:	0e1b      	lsrs	r3, r3, #24
 8005d2a:	f003 030f 	and.w	r3, r3, #15
 8005d2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005d30:	4b20      	ldr	r3, [pc, #128]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d36:	0c1b      	lsrs	r3, r3, #16
 8005d38:	f003 0303 	and.w	r3, r3, #3
 8005d3c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	695b      	ldr	r3, [r3, #20]
 8005d42:	019a      	lsls	r2, r3, #6
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	041b      	lsls	r3, r3, #16
 8005d48:	431a      	orrs	r2, r3
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	061b      	lsls	r3, r3, #24
 8005d4e:	431a      	orrs	r2, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	69db      	ldr	r3, [r3, #28]
 8005d54:	071b      	lsls	r3, r3, #28
 8005d56:	4917      	ldr	r1, [pc, #92]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005d5e:	4b15      	ldr	r3, [pc, #84]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d6c:	4911      	ldr	r1, [pc, #68]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005d74:	4b0f      	ldr	r3, [pc, #60]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a0e      	ldr	r2, [pc, #56]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d80:	f7fd fc66 	bl	8003650 <HAL_GetTick>
 8005d84:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005d86:	e008      	b.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005d88:	f7fd fc62 	bl	8003650 <HAL_GetTick>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	2b64      	cmp	r3, #100	; 0x64
 8005d94:	d901      	bls.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d96:	2303      	movs	r3, #3
 8005d98:	e007      	b.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005d9a:	4b06      	ldr	r3, [pc, #24]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005da2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005da6:	d1ef      	bne.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3720      	adds	r7, #32
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	bf00      	nop
 8005db4:	40023800 	.word	0x40023800

08005db8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b082      	sub	sp, #8
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d101      	bne.n	8005dca <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e01c      	b.n	8005e04 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	795b      	ldrb	r3, [r3, #5]
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d105      	bne.n	8005de0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f7fc f872 	bl	8001ec4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2202      	movs	r2, #2
 8005de4:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f042 0204 	orr.w	r2, r2, #4
 8005df4:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3708      	adds	r7, #8
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d101      	bne.n	8005e1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e09d      	b.n	8005f5a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d108      	bne.n	8005e38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e2e:	d009      	beq.n	8005e44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	61da      	str	r2, [r3, #28]
 8005e36:	e005      	b.n	8005e44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d106      	bne.n	8005e64 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f7fc f8a2 	bl	8001fa8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2202      	movs	r2, #2
 8005e68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e7a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e84:	d902      	bls.n	8005e8c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005e86:	2300      	movs	r3, #0
 8005e88:	60fb      	str	r3, [r7, #12]
 8005e8a:	e002      	b.n	8005e92 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e90:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005e9a:	d007      	beq.n	8005eac <HAL_SPI_Init+0xa0>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ea4:	d002      	beq.n	8005eac <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005ebc:	431a      	orrs	r2, r3
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	691b      	ldr	r3, [r3, #16]
 8005ec2:	f003 0302 	and.w	r3, r3, #2
 8005ec6:	431a      	orrs	r2, r3
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	695b      	ldr	r3, [r3, #20]
 8005ecc:	f003 0301 	and.w	r3, r3, #1
 8005ed0:	431a      	orrs	r2, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	699b      	ldr	r3, [r3, #24]
 8005ed6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005eda:	431a      	orrs	r2, r3
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	69db      	ldr	r3, [r3, #28]
 8005ee0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ee4:	431a      	orrs	r2, r3
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a1b      	ldr	r3, [r3, #32]
 8005eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eee:	ea42 0103 	orr.w	r1, r2, r3
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	430a      	orrs	r2, r1
 8005f00:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	699b      	ldr	r3, [r3, #24]
 8005f06:	0c1b      	lsrs	r3, r3, #16
 8005f08:	f003 0204 	and.w	r2, r3, #4
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f10:	f003 0310 	and.w	r3, r3, #16
 8005f14:	431a      	orrs	r2, r3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f1a:	f003 0308 	and.w	r3, r3, #8
 8005f1e:	431a      	orrs	r2, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005f28:	ea42 0103 	orr.w	r1, r2, r3
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	430a      	orrs	r2, r1
 8005f38:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	69da      	ldr	r2, [r3, #28]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f48:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005f58:	2300      	movs	r3, #0
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3710      	adds	r7, #16
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}

08005f62 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f62:	b580      	push	{r7, lr}
 8005f64:	b088      	sub	sp, #32
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	60f8      	str	r0, [r7, #12]
 8005f6a:	60b9      	str	r1, [r7, #8]
 8005f6c:	603b      	str	r3, [r7, #0]
 8005f6e:	4613      	mov	r3, r2
 8005f70:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f72:	2300      	movs	r3, #0
 8005f74:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d101      	bne.n	8005f84 <HAL_SPI_Transmit+0x22>
 8005f80:	2302      	movs	r3, #2
 8005f82:	e158      	b.n	8006236 <HAL_SPI_Transmit+0x2d4>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f8c:	f7fd fb60 	bl	8003650 <HAL_GetTick>
 8005f90:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005f92:	88fb      	ldrh	r3, [r7, #6]
 8005f94:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d002      	beq.n	8005fa8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005fa2:	2302      	movs	r3, #2
 8005fa4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005fa6:	e13d      	b.n	8006224 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d002      	beq.n	8005fb4 <HAL_SPI_Transmit+0x52>
 8005fae:	88fb      	ldrh	r3, [r7, #6]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d102      	bne.n	8005fba <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005fb8:	e134      	b.n	8006224 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2203      	movs	r2, #3
 8005fbe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	68ba      	ldr	r2, [r7, #8]
 8005fcc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	88fa      	ldrh	r2, [r7, #6]
 8005fd2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	88fa      	ldrh	r2, [r7, #6]
 8005fd8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2200      	movs	r2, #0
 8005fec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006004:	d10f      	bne.n	8006026 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006014:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006024:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006030:	2b40      	cmp	r3, #64	; 0x40
 8006032:	d007      	beq.n	8006044 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006042:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800604c:	d94b      	bls.n	80060e6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d002      	beq.n	800605c <HAL_SPI_Transmit+0xfa>
 8006056:	8afb      	ldrh	r3, [r7, #22]
 8006058:	2b01      	cmp	r3, #1
 800605a:	d13e      	bne.n	80060da <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006060:	881a      	ldrh	r2, [r3, #0]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800606c:	1c9a      	adds	r2, r3, #2
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006076:	b29b      	uxth	r3, r3
 8006078:	3b01      	subs	r3, #1
 800607a:	b29a      	uxth	r2, r3
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006080:	e02b      	b.n	80060da <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	f003 0302 	and.w	r3, r3, #2
 800608c:	2b02      	cmp	r3, #2
 800608e:	d112      	bne.n	80060b6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006094:	881a      	ldrh	r2, [r3, #0]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a0:	1c9a      	adds	r2, r3, #2
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	3b01      	subs	r3, #1
 80060ae:	b29a      	uxth	r2, r3
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80060b4:	e011      	b.n	80060da <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060b6:	f7fd facb 	bl	8003650 <HAL_GetTick>
 80060ba:	4602      	mov	r2, r0
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	1ad3      	subs	r3, r2, r3
 80060c0:	683a      	ldr	r2, [r7, #0]
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d803      	bhi.n	80060ce <HAL_SPI_Transmit+0x16c>
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060cc:	d102      	bne.n	80060d4 <HAL_SPI_Transmit+0x172>
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d102      	bne.n	80060da <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80060d4:	2303      	movs	r3, #3
 80060d6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80060d8:	e0a4      	b.n	8006224 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060de:	b29b      	uxth	r3, r3
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d1ce      	bne.n	8006082 <HAL_SPI_Transmit+0x120>
 80060e4:	e07c      	b.n	80061e0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d002      	beq.n	80060f4 <HAL_SPI_Transmit+0x192>
 80060ee:	8afb      	ldrh	r3, [r7, #22]
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d170      	bne.n	80061d6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d912      	bls.n	8006124 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006102:	881a      	ldrh	r2, [r3, #0]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800610e:	1c9a      	adds	r2, r3, #2
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006118:	b29b      	uxth	r3, r3
 800611a:	3b02      	subs	r3, #2
 800611c:	b29a      	uxth	r2, r3
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006122:	e058      	b.n	80061d6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	330c      	adds	r3, #12
 800612e:	7812      	ldrb	r2, [r2, #0]
 8006130:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006136:	1c5a      	adds	r2, r3, #1
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006140:	b29b      	uxth	r3, r3
 8006142:	3b01      	subs	r3, #1
 8006144:	b29a      	uxth	r2, r3
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800614a:	e044      	b.n	80061d6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	f003 0302 	and.w	r3, r3, #2
 8006156:	2b02      	cmp	r3, #2
 8006158:	d12b      	bne.n	80061b2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800615e:	b29b      	uxth	r3, r3
 8006160:	2b01      	cmp	r3, #1
 8006162:	d912      	bls.n	800618a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006168:	881a      	ldrh	r2, [r3, #0]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006174:	1c9a      	adds	r2, r3, #2
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800617e:	b29b      	uxth	r3, r3
 8006180:	3b02      	subs	r3, #2
 8006182:	b29a      	uxth	r2, r3
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006188:	e025      	b.n	80061d6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	330c      	adds	r3, #12
 8006194:	7812      	ldrb	r2, [r2, #0]
 8006196:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800619c:	1c5a      	adds	r2, r3, #1
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	3b01      	subs	r3, #1
 80061aa:	b29a      	uxth	r2, r3
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80061b0:	e011      	b.n	80061d6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061b2:	f7fd fa4d 	bl	8003650 <HAL_GetTick>
 80061b6:	4602      	mov	r2, r0
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	1ad3      	subs	r3, r2, r3
 80061bc:	683a      	ldr	r2, [r7, #0]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d803      	bhi.n	80061ca <HAL_SPI_Transmit+0x268>
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061c8:	d102      	bne.n	80061d0 <HAL_SPI_Transmit+0x26e>
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d102      	bne.n	80061d6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80061d0:	2303      	movs	r3, #3
 80061d2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80061d4:	e026      	b.n	8006224 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061da:	b29b      	uxth	r3, r3
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d1b5      	bne.n	800614c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061e0:	69ba      	ldr	r2, [r7, #24]
 80061e2:	6839      	ldr	r1, [r7, #0]
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f000 f949 	bl	800647c <SPI_EndRxTxTransaction>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d002      	beq.n	80061f6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2220      	movs	r2, #32
 80061f4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d10a      	bne.n	8006214 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061fe:	2300      	movs	r3, #0
 8006200:	613b      	str	r3, [r7, #16]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	613b      	str	r3, [r7, #16]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	613b      	str	r3, [r7, #16]
 8006212:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006218:	2b00      	cmp	r3, #0
 800621a:	d002      	beq.n	8006222 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	77fb      	strb	r3, [r7, #31]
 8006220:	e000      	b.n	8006224 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006222:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2200      	movs	r2, #0
 8006230:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006234:	7ffb      	ldrb	r3, [r7, #31]
}
 8006236:	4618      	mov	r0, r3
 8006238:	3720      	adds	r7, #32
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
	...

08006240 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b088      	sub	sp, #32
 8006244:	af00      	add	r7, sp, #0
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	60b9      	str	r1, [r7, #8]
 800624a:	603b      	str	r3, [r7, #0]
 800624c:	4613      	mov	r3, r2
 800624e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006250:	f7fd f9fe 	bl	8003650 <HAL_GetTick>
 8006254:	4602      	mov	r2, r0
 8006256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006258:	1a9b      	subs	r3, r3, r2
 800625a:	683a      	ldr	r2, [r7, #0]
 800625c:	4413      	add	r3, r2
 800625e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006260:	f7fd f9f6 	bl	8003650 <HAL_GetTick>
 8006264:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006266:	4b39      	ldr	r3, [pc, #228]	; (800634c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	015b      	lsls	r3, r3, #5
 800626c:	0d1b      	lsrs	r3, r3, #20
 800626e:	69fa      	ldr	r2, [r7, #28]
 8006270:	fb02 f303 	mul.w	r3, r2, r3
 8006274:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006276:	e054      	b.n	8006322 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800627e:	d050      	beq.n	8006322 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006280:	f7fd f9e6 	bl	8003650 <HAL_GetTick>
 8006284:	4602      	mov	r2, r0
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	1ad3      	subs	r3, r2, r3
 800628a:	69fa      	ldr	r2, [r7, #28]
 800628c:	429a      	cmp	r2, r3
 800628e:	d902      	bls.n	8006296 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d13d      	bne.n	8006312 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	685a      	ldr	r2, [r3, #4]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80062a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062ae:	d111      	bne.n	80062d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062b8:	d004      	beq.n	80062c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062c2:	d107      	bne.n	80062d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062dc:	d10f      	bne.n	80062fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062ec:	601a      	str	r2, [r3, #0]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2201      	movs	r2, #1
 8006302:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800630e:	2303      	movs	r3, #3
 8006310:	e017      	b.n	8006342 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d101      	bne.n	800631c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006318:	2300      	movs	r3, #0
 800631a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	3b01      	subs	r3, #1
 8006320:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	689a      	ldr	r2, [r3, #8]
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	4013      	ands	r3, r2
 800632c:	68ba      	ldr	r2, [r7, #8]
 800632e:	429a      	cmp	r2, r3
 8006330:	bf0c      	ite	eq
 8006332:	2301      	moveq	r3, #1
 8006334:	2300      	movne	r3, #0
 8006336:	b2db      	uxtb	r3, r3
 8006338:	461a      	mov	r2, r3
 800633a:	79fb      	ldrb	r3, [r7, #7]
 800633c:	429a      	cmp	r2, r3
 800633e:	d19b      	bne.n	8006278 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006340:	2300      	movs	r3, #0
}
 8006342:	4618      	mov	r0, r3
 8006344:	3720      	adds	r7, #32
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop
 800634c:	20000414 	.word	0x20000414

08006350 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b08a      	sub	sp, #40	; 0x28
 8006354:	af00      	add	r7, sp, #0
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	60b9      	str	r1, [r7, #8]
 800635a:	607a      	str	r2, [r7, #4]
 800635c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800635e:	2300      	movs	r3, #0
 8006360:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006362:	f7fd f975 	bl	8003650 <HAL_GetTick>
 8006366:	4602      	mov	r2, r0
 8006368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636a:	1a9b      	subs	r3, r3, r2
 800636c:	683a      	ldr	r2, [r7, #0]
 800636e:	4413      	add	r3, r2
 8006370:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006372:	f7fd f96d 	bl	8003650 <HAL_GetTick>
 8006376:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	330c      	adds	r3, #12
 800637e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006380:	4b3d      	ldr	r3, [pc, #244]	; (8006478 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	4613      	mov	r3, r2
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	4413      	add	r3, r2
 800638a:	00da      	lsls	r2, r3, #3
 800638c:	1ad3      	subs	r3, r2, r3
 800638e:	0d1b      	lsrs	r3, r3, #20
 8006390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006392:	fb02 f303 	mul.w	r3, r2, r3
 8006396:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006398:	e060      	b.n	800645c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80063a0:	d107      	bne.n	80063b2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d104      	bne.n	80063b2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80063b0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b8:	d050      	beq.n	800645c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80063ba:	f7fd f949 	bl	8003650 <HAL_GetTick>
 80063be:	4602      	mov	r2, r0
 80063c0:	6a3b      	ldr	r3, [r7, #32]
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d902      	bls.n	80063d0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80063ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d13d      	bne.n	800644c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	685a      	ldr	r2, [r3, #4]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80063de:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063e8:	d111      	bne.n	800640e <SPI_WaitFifoStateUntilTimeout+0xbe>
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063f2:	d004      	beq.n	80063fe <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063fc:	d107      	bne.n	800640e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800640c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006412:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006416:	d10f      	bne.n	8006438 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006426:	601a      	str	r2, [r3, #0]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006436:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2201      	movs	r2, #1
 800643c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2200      	movs	r2, #0
 8006444:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006448:	2303      	movs	r3, #3
 800644a:	e010      	b.n	800646e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800644c:	69bb      	ldr	r3, [r7, #24]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d101      	bne.n	8006456 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006452:	2300      	movs	r3, #0
 8006454:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	3b01      	subs	r3, #1
 800645a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	689a      	ldr	r2, [r3, #8]
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	4013      	ands	r3, r2
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	429a      	cmp	r2, r3
 800646a:	d196      	bne.n	800639a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800646c:	2300      	movs	r3, #0
}
 800646e:	4618      	mov	r0, r3
 8006470:	3728      	adds	r7, #40	; 0x28
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop
 8006478:	20000414 	.word	0x20000414

0800647c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b088      	sub	sp, #32
 8006480:	af02      	add	r7, sp, #8
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	60b9      	str	r1, [r7, #8]
 8006486:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	9300      	str	r3, [sp, #0]
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	2200      	movs	r2, #0
 8006490:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006494:	68f8      	ldr	r0, [r7, #12]
 8006496:	f7ff ff5b 	bl	8006350 <SPI_WaitFifoStateUntilTimeout>
 800649a:	4603      	mov	r3, r0
 800649c:	2b00      	cmp	r3, #0
 800649e:	d007      	beq.n	80064b0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064a4:	f043 0220 	orr.w	r2, r3, #32
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80064ac:	2303      	movs	r3, #3
 80064ae:	e046      	b.n	800653e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80064b0:	4b25      	ldr	r3, [pc, #148]	; (8006548 <SPI_EndRxTxTransaction+0xcc>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a25      	ldr	r2, [pc, #148]	; (800654c <SPI_EndRxTxTransaction+0xd0>)
 80064b6:	fba2 2303 	umull	r2, r3, r2, r3
 80064ba:	0d5b      	lsrs	r3, r3, #21
 80064bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80064c0:	fb02 f303 	mul.w	r3, r2, r3
 80064c4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064ce:	d112      	bne.n	80064f6 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	9300      	str	r3, [sp, #0]
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	2200      	movs	r2, #0
 80064d8:	2180      	movs	r1, #128	; 0x80
 80064da:	68f8      	ldr	r0, [r7, #12]
 80064dc:	f7ff feb0 	bl	8006240 <SPI_WaitFlagStateUntilTimeout>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d016      	beq.n	8006514 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064ea:	f043 0220 	orr.w	r2, r3, #32
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80064f2:	2303      	movs	r3, #3
 80064f4:	e023      	b.n	800653e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d00a      	beq.n	8006512 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	3b01      	subs	r3, #1
 8006500:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800650c:	2b80      	cmp	r3, #128	; 0x80
 800650e:	d0f2      	beq.n	80064f6 <SPI_EndRxTxTransaction+0x7a>
 8006510:	e000      	b.n	8006514 <SPI_EndRxTxTransaction+0x98>
        break;
 8006512:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	9300      	str	r3, [sp, #0]
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	2200      	movs	r2, #0
 800651c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006520:	68f8      	ldr	r0, [r7, #12]
 8006522:	f7ff ff15 	bl	8006350 <SPI_WaitFifoStateUntilTimeout>
 8006526:	4603      	mov	r3, r0
 8006528:	2b00      	cmp	r3, #0
 800652a:	d007      	beq.n	800653c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006530:	f043 0220 	orr.w	r2, r3, #32
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006538:	2303      	movs	r3, #3
 800653a:	e000      	b.n	800653e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800653c:	2300      	movs	r3, #0
}
 800653e:	4618      	mov	r0, r3
 8006540:	3718      	adds	r7, #24
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	20000414 	.word	0x20000414
 800654c:	165e9f81 	.word	0x165e9f81

08006550 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d101      	bne.n	8006562 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	e049      	b.n	80065f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006568:	b2db      	uxtb	r3, r3
 800656a:	2b00      	cmp	r3, #0
 800656c:	d106      	bne.n	800657c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f7fb ff68 	bl	800244c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2202      	movs	r2, #2
 8006580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	3304      	adds	r3, #4
 800658c:	4619      	mov	r1, r3
 800658e:	4610      	mov	r0, r2
 8006590:	f000 fa74 	bl	8006a7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2201      	movs	r2, #1
 80065a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2201      	movs	r2, #1
 80065b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2201      	movs	r2, #1
 80065c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2201      	movs	r2, #1
 80065c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3708      	adds	r7, #8
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}

080065fe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80065fe:	b580      	push	{r7, lr}
 8006600:	b082      	sub	sp, #8
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d101      	bne.n	8006610 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	e049      	b.n	80066a4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006616:	b2db      	uxtb	r3, r3
 8006618:	2b00      	cmp	r3, #0
 800661a:	d106      	bne.n	800662a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 f841 	bl	80066ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2202      	movs	r2, #2
 800662e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	3304      	adds	r3, #4
 800663a:	4619      	mov	r1, r3
 800663c:	4610      	mov	r0, r2
 800663e:	f000 fa1d 	bl	8006a7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2201      	movs	r2, #1
 8006646:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2201      	movs	r2, #1
 800664e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2201      	movs	r2, #1
 8006656:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2201      	movs	r2, #1
 800665e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2201      	movs	r2, #1
 8006666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2201      	movs	r2, #1
 800666e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2201      	movs	r2, #1
 8006676:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2201      	movs	r2, #1
 800667e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2201      	movs	r2, #1
 8006686:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2201      	movs	r2, #1
 800668e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2201      	movs	r2, #1
 8006696:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2201      	movs	r2, #1
 800669e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066a2:	2300      	movs	r3, #0
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3708      	adds	r7, #8
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}

080066ac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80066b4:	bf00      	nop
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b086      	sub	sp, #24
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066cc:	2300      	movs	r3, #0
 80066ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d101      	bne.n	80066de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80066da:	2302      	movs	r3, #2
 80066dc:	e0ff      	b.n	80068de <HAL_TIM_PWM_ConfigChannel+0x21e>
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2201      	movs	r2, #1
 80066e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2b14      	cmp	r3, #20
 80066ea:	f200 80f0 	bhi.w	80068ce <HAL_TIM_PWM_ConfigChannel+0x20e>
 80066ee:	a201      	add	r2, pc, #4	; (adr r2, 80066f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80066f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f4:	08006749 	.word	0x08006749
 80066f8:	080068cf 	.word	0x080068cf
 80066fc:	080068cf 	.word	0x080068cf
 8006700:	080068cf 	.word	0x080068cf
 8006704:	08006789 	.word	0x08006789
 8006708:	080068cf 	.word	0x080068cf
 800670c:	080068cf 	.word	0x080068cf
 8006710:	080068cf 	.word	0x080068cf
 8006714:	080067cb 	.word	0x080067cb
 8006718:	080068cf 	.word	0x080068cf
 800671c:	080068cf 	.word	0x080068cf
 8006720:	080068cf 	.word	0x080068cf
 8006724:	0800680b 	.word	0x0800680b
 8006728:	080068cf 	.word	0x080068cf
 800672c:	080068cf 	.word	0x080068cf
 8006730:	080068cf 	.word	0x080068cf
 8006734:	0800684d 	.word	0x0800684d
 8006738:	080068cf 	.word	0x080068cf
 800673c:	080068cf 	.word	0x080068cf
 8006740:	080068cf 	.word	0x080068cf
 8006744:	0800688d 	.word	0x0800688d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	68b9      	ldr	r1, [r7, #8]
 800674e:	4618      	mov	r0, r3
 8006750:	f000 fa34 	bl	8006bbc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	699a      	ldr	r2, [r3, #24]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f042 0208 	orr.w	r2, r2, #8
 8006762:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	699a      	ldr	r2, [r3, #24]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f022 0204 	bic.w	r2, r2, #4
 8006772:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	6999      	ldr	r1, [r3, #24]
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	691a      	ldr	r2, [r3, #16]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	430a      	orrs	r2, r1
 8006784:	619a      	str	r2, [r3, #24]
      break;
 8006786:	e0a5      	b.n	80068d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68b9      	ldr	r1, [r7, #8]
 800678e:	4618      	mov	r0, r3
 8006790:	f000 fa86 	bl	8006ca0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	699a      	ldr	r2, [r3, #24]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	699a      	ldr	r2, [r3, #24]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	6999      	ldr	r1, [r3, #24]
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	691b      	ldr	r3, [r3, #16]
 80067be:	021a      	lsls	r2, r3, #8
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	430a      	orrs	r2, r1
 80067c6:	619a      	str	r2, [r3, #24]
      break;
 80067c8:	e084      	b.n	80068d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	68b9      	ldr	r1, [r7, #8]
 80067d0:	4618      	mov	r0, r3
 80067d2:	f000 fadd 	bl	8006d90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	69da      	ldr	r2, [r3, #28]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f042 0208 	orr.w	r2, r2, #8
 80067e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	69da      	ldr	r2, [r3, #28]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f022 0204 	bic.w	r2, r2, #4
 80067f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	69d9      	ldr	r1, [r3, #28]
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	691a      	ldr	r2, [r3, #16]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	430a      	orrs	r2, r1
 8006806:	61da      	str	r2, [r3, #28]
      break;
 8006808:	e064      	b.n	80068d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	68b9      	ldr	r1, [r7, #8]
 8006810:	4618      	mov	r0, r3
 8006812:	f000 fb33 	bl	8006e7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	69da      	ldr	r2, [r3, #28]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006824:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	69da      	ldr	r2, [r3, #28]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006834:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	69d9      	ldr	r1, [r3, #28]
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	691b      	ldr	r3, [r3, #16]
 8006840:	021a      	lsls	r2, r3, #8
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	430a      	orrs	r2, r1
 8006848:	61da      	str	r2, [r3, #28]
      break;
 800684a:	e043      	b.n	80068d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	68b9      	ldr	r1, [r7, #8]
 8006852:	4618      	mov	r0, r3
 8006854:	f000 fb6a 	bl	8006f2c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f042 0208 	orr.w	r2, r2, #8
 8006866:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f022 0204 	bic.w	r2, r2, #4
 8006876:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	691a      	ldr	r2, [r3, #16]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	430a      	orrs	r2, r1
 8006888:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800688a:	e023      	b.n	80068d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	68b9      	ldr	r1, [r7, #8]
 8006892:	4618      	mov	r0, r3
 8006894:	f000 fb9c 	bl	8006fd0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	691b      	ldr	r3, [r3, #16]
 80068c2:	021a      	lsls	r2, r3, #8
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	430a      	orrs	r2, r1
 80068ca:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80068cc:	e002      	b.n	80068d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	75fb      	strb	r3, [r7, #23]
      break;
 80068d2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80068dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3718      	adds	r7, #24
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop

080068e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068f2:	2300      	movs	r3, #0
 80068f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d101      	bne.n	8006904 <HAL_TIM_ConfigClockSource+0x1c>
 8006900:	2302      	movs	r3, #2
 8006902:	e0b4      	b.n	8006a6e <HAL_TIM_ConfigClockSource+0x186>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2201      	movs	r2, #1
 8006908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2202      	movs	r2, #2
 8006910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800691c:	68ba      	ldr	r2, [r7, #8]
 800691e:	4b56      	ldr	r3, [pc, #344]	; (8006a78 <HAL_TIM_ConfigClockSource+0x190>)
 8006920:	4013      	ands	r3, r2
 8006922:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800692a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	68ba      	ldr	r2, [r7, #8]
 8006932:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800693c:	d03e      	beq.n	80069bc <HAL_TIM_ConfigClockSource+0xd4>
 800693e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006942:	f200 8087 	bhi.w	8006a54 <HAL_TIM_ConfigClockSource+0x16c>
 8006946:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800694a:	f000 8086 	beq.w	8006a5a <HAL_TIM_ConfigClockSource+0x172>
 800694e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006952:	d87f      	bhi.n	8006a54 <HAL_TIM_ConfigClockSource+0x16c>
 8006954:	2b70      	cmp	r3, #112	; 0x70
 8006956:	d01a      	beq.n	800698e <HAL_TIM_ConfigClockSource+0xa6>
 8006958:	2b70      	cmp	r3, #112	; 0x70
 800695a:	d87b      	bhi.n	8006a54 <HAL_TIM_ConfigClockSource+0x16c>
 800695c:	2b60      	cmp	r3, #96	; 0x60
 800695e:	d050      	beq.n	8006a02 <HAL_TIM_ConfigClockSource+0x11a>
 8006960:	2b60      	cmp	r3, #96	; 0x60
 8006962:	d877      	bhi.n	8006a54 <HAL_TIM_ConfigClockSource+0x16c>
 8006964:	2b50      	cmp	r3, #80	; 0x50
 8006966:	d03c      	beq.n	80069e2 <HAL_TIM_ConfigClockSource+0xfa>
 8006968:	2b50      	cmp	r3, #80	; 0x50
 800696a:	d873      	bhi.n	8006a54 <HAL_TIM_ConfigClockSource+0x16c>
 800696c:	2b40      	cmp	r3, #64	; 0x40
 800696e:	d058      	beq.n	8006a22 <HAL_TIM_ConfigClockSource+0x13a>
 8006970:	2b40      	cmp	r3, #64	; 0x40
 8006972:	d86f      	bhi.n	8006a54 <HAL_TIM_ConfigClockSource+0x16c>
 8006974:	2b30      	cmp	r3, #48	; 0x30
 8006976:	d064      	beq.n	8006a42 <HAL_TIM_ConfigClockSource+0x15a>
 8006978:	2b30      	cmp	r3, #48	; 0x30
 800697a:	d86b      	bhi.n	8006a54 <HAL_TIM_ConfigClockSource+0x16c>
 800697c:	2b20      	cmp	r3, #32
 800697e:	d060      	beq.n	8006a42 <HAL_TIM_ConfigClockSource+0x15a>
 8006980:	2b20      	cmp	r3, #32
 8006982:	d867      	bhi.n	8006a54 <HAL_TIM_ConfigClockSource+0x16c>
 8006984:	2b00      	cmp	r3, #0
 8006986:	d05c      	beq.n	8006a42 <HAL_TIM_ConfigClockSource+0x15a>
 8006988:	2b10      	cmp	r3, #16
 800698a:	d05a      	beq.n	8006a42 <HAL_TIM_ConfigClockSource+0x15a>
 800698c:	e062      	b.n	8006a54 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800699e:	f000 fbe5 	bl	800716c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80069b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	68ba      	ldr	r2, [r7, #8]
 80069b8:	609a      	str	r2, [r3, #8]
      break;
 80069ba:	e04f      	b.n	8006a5c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80069cc:	f000 fbce 	bl	800716c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	689a      	ldr	r2, [r3, #8]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80069de:	609a      	str	r2, [r3, #8]
      break;
 80069e0:	e03c      	b.n	8006a5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069ee:	461a      	mov	r2, r3
 80069f0:	f000 fb42 	bl	8007078 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2150      	movs	r1, #80	; 0x50
 80069fa:	4618      	mov	r0, r3
 80069fc:	f000 fb9b 	bl	8007136 <TIM_ITRx_SetConfig>
      break;
 8006a00:	e02c      	b.n	8006a5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a0e:	461a      	mov	r2, r3
 8006a10:	f000 fb61 	bl	80070d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2160      	movs	r1, #96	; 0x60
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f000 fb8b 	bl	8007136 <TIM_ITRx_SetConfig>
      break;
 8006a20:	e01c      	b.n	8006a5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a2e:	461a      	mov	r2, r3
 8006a30:	f000 fb22 	bl	8007078 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	2140      	movs	r1, #64	; 0x40
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f000 fb7b 	bl	8007136 <TIM_ITRx_SetConfig>
      break;
 8006a40:	e00c      	b.n	8006a5c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	4610      	mov	r0, r2
 8006a4e:	f000 fb72 	bl	8007136 <TIM_ITRx_SetConfig>
      break;
 8006a52:	e003      	b.n	8006a5c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	73fb      	strb	r3, [r7, #15]
      break;
 8006a58:	e000      	b.n	8006a5c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006a5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3710      	adds	r7, #16
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop
 8006a78:	fffeff88 	.word	0xfffeff88

08006a7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b085      	sub	sp, #20
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a40      	ldr	r2, [pc, #256]	; (8006b90 <TIM_Base_SetConfig+0x114>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d013      	beq.n	8006abc <TIM_Base_SetConfig+0x40>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a9a:	d00f      	beq.n	8006abc <TIM_Base_SetConfig+0x40>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4a3d      	ldr	r2, [pc, #244]	; (8006b94 <TIM_Base_SetConfig+0x118>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d00b      	beq.n	8006abc <TIM_Base_SetConfig+0x40>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a3c      	ldr	r2, [pc, #240]	; (8006b98 <TIM_Base_SetConfig+0x11c>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d007      	beq.n	8006abc <TIM_Base_SetConfig+0x40>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	4a3b      	ldr	r2, [pc, #236]	; (8006b9c <TIM_Base_SetConfig+0x120>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d003      	beq.n	8006abc <TIM_Base_SetConfig+0x40>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	4a3a      	ldr	r2, [pc, #232]	; (8006ba0 <TIM_Base_SetConfig+0x124>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d108      	bne.n	8006ace <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ac2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	68fa      	ldr	r2, [r7, #12]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	4a2f      	ldr	r2, [pc, #188]	; (8006b90 <TIM_Base_SetConfig+0x114>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d02b      	beq.n	8006b2e <TIM_Base_SetConfig+0xb2>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006adc:	d027      	beq.n	8006b2e <TIM_Base_SetConfig+0xb2>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	4a2c      	ldr	r2, [pc, #176]	; (8006b94 <TIM_Base_SetConfig+0x118>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d023      	beq.n	8006b2e <TIM_Base_SetConfig+0xb2>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4a2b      	ldr	r2, [pc, #172]	; (8006b98 <TIM_Base_SetConfig+0x11c>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d01f      	beq.n	8006b2e <TIM_Base_SetConfig+0xb2>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4a2a      	ldr	r2, [pc, #168]	; (8006b9c <TIM_Base_SetConfig+0x120>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d01b      	beq.n	8006b2e <TIM_Base_SetConfig+0xb2>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	4a29      	ldr	r2, [pc, #164]	; (8006ba0 <TIM_Base_SetConfig+0x124>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d017      	beq.n	8006b2e <TIM_Base_SetConfig+0xb2>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4a28      	ldr	r2, [pc, #160]	; (8006ba4 <TIM_Base_SetConfig+0x128>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d013      	beq.n	8006b2e <TIM_Base_SetConfig+0xb2>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	4a27      	ldr	r2, [pc, #156]	; (8006ba8 <TIM_Base_SetConfig+0x12c>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d00f      	beq.n	8006b2e <TIM_Base_SetConfig+0xb2>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	4a26      	ldr	r2, [pc, #152]	; (8006bac <TIM_Base_SetConfig+0x130>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d00b      	beq.n	8006b2e <TIM_Base_SetConfig+0xb2>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	4a25      	ldr	r2, [pc, #148]	; (8006bb0 <TIM_Base_SetConfig+0x134>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d007      	beq.n	8006b2e <TIM_Base_SetConfig+0xb2>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4a24      	ldr	r2, [pc, #144]	; (8006bb4 <TIM_Base_SetConfig+0x138>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d003      	beq.n	8006b2e <TIM_Base_SetConfig+0xb2>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4a23      	ldr	r2, [pc, #140]	; (8006bb8 <TIM_Base_SetConfig+0x13c>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d108      	bne.n	8006b40 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	68db      	ldr	r3, [r3, #12]
 8006b3a:	68fa      	ldr	r2, [r7, #12]
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	695b      	ldr	r3, [r3, #20]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	689a      	ldr	r2, [r3, #8]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	4a0a      	ldr	r2, [pc, #40]	; (8006b90 <TIM_Base_SetConfig+0x114>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d003      	beq.n	8006b74 <TIM_Base_SetConfig+0xf8>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	4a0c      	ldr	r2, [pc, #48]	; (8006ba0 <TIM_Base_SetConfig+0x124>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d103      	bne.n	8006b7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	691a      	ldr	r2, [r3, #16]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	615a      	str	r2, [r3, #20]
}
 8006b82:	bf00      	nop
 8006b84:	3714      	adds	r7, #20
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop
 8006b90:	40010000 	.word	0x40010000
 8006b94:	40000400 	.word	0x40000400
 8006b98:	40000800 	.word	0x40000800
 8006b9c:	40000c00 	.word	0x40000c00
 8006ba0:	40010400 	.word	0x40010400
 8006ba4:	40014000 	.word	0x40014000
 8006ba8:	40014400 	.word	0x40014400
 8006bac:	40014800 	.word	0x40014800
 8006bb0:	40001800 	.word	0x40001800
 8006bb4:	40001c00 	.word	0x40001c00
 8006bb8:	40002000 	.word	0x40002000

08006bbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b087      	sub	sp, #28
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a1b      	ldr	r3, [r3, #32]
 8006bca:	f023 0201 	bic.w	r2, r3, #1
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6a1b      	ldr	r3, [r3, #32]
 8006bd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	699b      	ldr	r3, [r3, #24]
 8006be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006be4:	68fa      	ldr	r2, [r7, #12]
 8006be6:	4b2b      	ldr	r3, [pc, #172]	; (8006c94 <TIM_OC1_SetConfig+0xd8>)
 8006be8:	4013      	ands	r3, r2
 8006bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f023 0303 	bic.w	r3, r3, #3
 8006bf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	f023 0302 	bic.w	r3, r3, #2
 8006c04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	697a      	ldr	r2, [r7, #20]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4a21      	ldr	r2, [pc, #132]	; (8006c98 <TIM_OC1_SetConfig+0xdc>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d003      	beq.n	8006c20 <TIM_OC1_SetConfig+0x64>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	4a20      	ldr	r2, [pc, #128]	; (8006c9c <TIM_OC1_SetConfig+0xe0>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d10c      	bne.n	8006c3a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	f023 0308 	bic.w	r3, r3, #8
 8006c26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	697a      	ldr	r2, [r7, #20]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	f023 0304 	bic.w	r3, r3, #4
 8006c38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4a16      	ldr	r2, [pc, #88]	; (8006c98 <TIM_OC1_SetConfig+0xdc>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d003      	beq.n	8006c4a <TIM_OC1_SetConfig+0x8e>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4a15      	ldr	r2, [pc, #84]	; (8006c9c <TIM_OC1_SetConfig+0xe0>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d111      	bne.n	8006c6e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	695b      	ldr	r3, [r3, #20]
 8006c5e:	693a      	ldr	r2, [r7, #16]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	699b      	ldr	r3, [r3, #24]
 8006c68:	693a      	ldr	r2, [r7, #16]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	693a      	ldr	r2, [r7, #16]
 8006c72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	68fa      	ldr	r2, [r7, #12]
 8006c78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	685a      	ldr	r2, [r3, #4]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	697a      	ldr	r2, [r7, #20]
 8006c86:	621a      	str	r2, [r3, #32]
}
 8006c88:	bf00      	nop
 8006c8a:	371c      	adds	r7, #28
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr
 8006c94:	fffeff8f 	.word	0xfffeff8f
 8006c98:	40010000 	.word	0x40010000
 8006c9c:	40010400 	.word	0x40010400

08006ca0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b087      	sub	sp, #28
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6a1b      	ldr	r3, [r3, #32]
 8006cae:	f023 0210 	bic.w	r2, r3, #16
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6a1b      	ldr	r3, [r3, #32]
 8006cba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	699b      	ldr	r3, [r3, #24]
 8006cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	4b2e      	ldr	r3, [pc, #184]	; (8006d84 <TIM_OC2_SetConfig+0xe4>)
 8006ccc:	4013      	ands	r3, r2
 8006cce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	021b      	lsls	r3, r3, #8
 8006cde:	68fa      	ldr	r2, [r7, #12]
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	f023 0320 	bic.w	r3, r3, #32
 8006cea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	011b      	lsls	r3, r3, #4
 8006cf2:	697a      	ldr	r2, [r7, #20]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	4a23      	ldr	r2, [pc, #140]	; (8006d88 <TIM_OC2_SetConfig+0xe8>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d003      	beq.n	8006d08 <TIM_OC2_SetConfig+0x68>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	4a22      	ldr	r2, [pc, #136]	; (8006d8c <TIM_OC2_SetConfig+0xec>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d10d      	bne.n	8006d24 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	011b      	lsls	r3, r3, #4
 8006d16:	697a      	ldr	r2, [r7, #20]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4a18      	ldr	r2, [pc, #96]	; (8006d88 <TIM_OC2_SetConfig+0xe8>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d003      	beq.n	8006d34 <TIM_OC2_SetConfig+0x94>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4a17      	ldr	r2, [pc, #92]	; (8006d8c <TIM_OC2_SetConfig+0xec>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d113      	bne.n	8006d5c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	695b      	ldr	r3, [r3, #20]
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	693a      	ldr	r2, [r7, #16]
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	699b      	ldr	r3, [r3, #24]
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	693a      	ldr	r2, [r7, #16]
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	693a      	ldr	r2, [r7, #16]
 8006d60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	68fa      	ldr	r2, [r7, #12]
 8006d66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	685a      	ldr	r2, [r3, #4]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	697a      	ldr	r2, [r7, #20]
 8006d74:	621a      	str	r2, [r3, #32]
}
 8006d76:	bf00      	nop
 8006d78:	371c      	adds	r7, #28
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr
 8006d82:	bf00      	nop
 8006d84:	feff8fff 	.word	0xfeff8fff
 8006d88:	40010000 	.word	0x40010000
 8006d8c:	40010400 	.word	0x40010400

08006d90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b087      	sub	sp, #28
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6a1b      	ldr	r3, [r3, #32]
 8006d9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6a1b      	ldr	r3, [r3, #32]
 8006daa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	69db      	ldr	r3, [r3, #28]
 8006db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006db8:	68fa      	ldr	r2, [r7, #12]
 8006dba:	4b2d      	ldr	r3, [pc, #180]	; (8006e70 <TIM_OC3_SetConfig+0xe0>)
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f023 0303 	bic.w	r3, r3, #3
 8006dc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006dd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	021b      	lsls	r3, r3, #8
 8006de0:	697a      	ldr	r2, [r7, #20]
 8006de2:	4313      	orrs	r3, r2
 8006de4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4a22      	ldr	r2, [pc, #136]	; (8006e74 <TIM_OC3_SetConfig+0xe4>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d003      	beq.n	8006df6 <TIM_OC3_SetConfig+0x66>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4a21      	ldr	r2, [pc, #132]	; (8006e78 <TIM_OC3_SetConfig+0xe8>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d10d      	bne.n	8006e12 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006dfc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	021b      	lsls	r3, r3, #8
 8006e04:	697a      	ldr	r2, [r7, #20]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	4a17      	ldr	r2, [pc, #92]	; (8006e74 <TIM_OC3_SetConfig+0xe4>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d003      	beq.n	8006e22 <TIM_OC3_SetConfig+0x92>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	4a16      	ldr	r2, [pc, #88]	; (8006e78 <TIM_OC3_SetConfig+0xe8>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d113      	bne.n	8006e4a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	695b      	ldr	r3, [r3, #20]
 8006e36:	011b      	lsls	r3, r3, #4
 8006e38:	693a      	ldr	r2, [r7, #16]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	699b      	ldr	r3, [r3, #24]
 8006e42:	011b      	lsls	r3, r3, #4
 8006e44:	693a      	ldr	r2, [r7, #16]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	693a      	ldr	r2, [r7, #16]
 8006e4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	68fa      	ldr	r2, [r7, #12]
 8006e54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	685a      	ldr	r2, [r3, #4]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	697a      	ldr	r2, [r7, #20]
 8006e62:	621a      	str	r2, [r3, #32]
}
 8006e64:	bf00      	nop
 8006e66:	371c      	adds	r7, #28
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr
 8006e70:	fffeff8f 	.word	0xfffeff8f
 8006e74:	40010000 	.word	0x40010000
 8006e78:	40010400 	.word	0x40010400

08006e7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b087      	sub	sp, #28
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6a1b      	ldr	r3, [r3, #32]
 8006e8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6a1b      	ldr	r3, [r3, #32]
 8006e96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	69db      	ldr	r3, [r3, #28]
 8006ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ea4:	68fa      	ldr	r2, [r7, #12]
 8006ea6:	4b1e      	ldr	r3, [pc, #120]	; (8006f20 <TIM_OC4_SetConfig+0xa4>)
 8006ea8:	4013      	ands	r3, r2
 8006eaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006eb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	021b      	lsls	r3, r3, #8
 8006eba:	68fa      	ldr	r2, [r7, #12]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ec6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	031b      	lsls	r3, r3, #12
 8006ece:	693a      	ldr	r2, [r7, #16]
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	4a13      	ldr	r2, [pc, #76]	; (8006f24 <TIM_OC4_SetConfig+0xa8>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d003      	beq.n	8006ee4 <TIM_OC4_SetConfig+0x68>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	4a12      	ldr	r2, [pc, #72]	; (8006f28 <TIM_OC4_SetConfig+0xac>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d109      	bne.n	8006ef8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006eea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	695b      	ldr	r3, [r3, #20]
 8006ef0:	019b      	lsls	r3, r3, #6
 8006ef2:	697a      	ldr	r2, [r7, #20]
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	697a      	ldr	r2, [r7, #20]
 8006efc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	68fa      	ldr	r2, [r7, #12]
 8006f02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	685a      	ldr	r2, [r3, #4]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	693a      	ldr	r2, [r7, #16]
 8006f10:	621a      	str	r2, [r3, #32]
}
 8006f12:	bf00      	nop
 8006f14:	371c      	adds	r7, #28
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr
 8006f1e:	bf00      	nop
 8006f20:	feff8fff 	.word	0xfeff8fff
 8006f24:	40010000 	.word	0x40010000
 8006f28:	40010400 	.word	0x40010400

08006f2c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b087      	sub	sp, #28
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a1b      	ldr	r3, [r3, #32]
 8006f3a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6a1b      	ldr	r3, [r3, #32]
 8006f46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006f54:	68fa      	ldr	r2, [r7, #12]
 8006f56:	4b1b      	ldr	r3, [pc, #108]	; (8006fc4 <TIM_OC5_SetConfig+0x98>)
 8006f58:	4013      	ands	r3, r2
 8006f5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	68fa      	ldr	r2, [r7, #12]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006f6c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	041b      	lsls	r3, r3, #16
 8006f74:	693a      	ldr	r2, [r7, #16]
 8006f76:	4313      	orrs	r3, r2
 8006f78:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	4a12      	ldr	r2, [pc, #72]	; (8006fc8 <TIM_OC5_SetConfig+0x9c>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d003      	beq.n	8006f8a <TIM_OC5_SetConfig+0x5e>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4a11      	ldr	r2, [pc, #68]	; (8006fcc <TIM_OC5_SetConfig+0xa0>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d109      	bne.n	8006f9e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f90:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	695b      	ldr	r3, [r3, #20]
 8006f96:	021b      	lsls	r3, r3, #8
 8006f98:	697a      	ldr	r2, [r7, #20]
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	697a      	ldr	r2, [r7, #20]
 8006fa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	68fa      	ldr	r2, [r7, #12]
 8006fa8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	685a      	ldr	r2, [r3, #4]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	693a      	ldr	r2, [r7, #16]
 8006fb6:	621a      	str	r2, [r3, #32]
}
 8006fb8:	bf00      	nop
 8006fba:	371c      	adds	r7, #28
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr
 8006fc4:	fffeff8f 	.word	0xfffeff8f
 8006fc8:	40010000 	.word	0x40010000
 8006fcc:	40010400 	.word	0x40010400

08006fd0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b087      	sub	sp, #28
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a1b      	ldr	r3, [r3, #32]
 8006fde:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6a1b      	ldr	r3, [r3, #32]
 8006fea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006ff8:	68fa      	ldr	r2, [r7, #12]
 8006ffa:	4b1c      	ldr	r3, [pc, #112]	; (800706c <TIM_OC6_SetConfig+0x9c>)
 8006ffc:	4013      	ands	r3, r2
 8006ffe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	021b      	lsls	r3, r3, #8
 8007006:	68fa      	ldr	r2, [r7, #12]
 8007008:	4313      	orrs	r3, r2
 800700a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007012:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	051b      	lsls	r3, r3, #20
 800701a:	693a      	ldr	r2, [r7, #16]
 800701c:	4313      	orrs	r3, r2
 800701e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	4a13      	ldr	r2, [pc, #76]	; (8007070 <TIM_OC6_SetConfig+0xa0>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d003      	beq.n	8007030 <TIM_OC6_SetConfig+0x60>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4a12      	ldr	r2, [pc, #72]	; (8007074 <TIM_OC6_SetConfig+0xa4>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d109      	bne.n	8007044 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007036:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	695b      	ldr	r3, [r3, #20]
 800703c:	029b      	lsls	r3, r3, #10
 800703e:	697a      	ldr	r2, [r7, #20]
 8007040:	4313      	orrs	r3, r2
 8007042:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	697a      	ldr	r2, [r7, #20]
 8007048:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	68fa      	ldr	r2, [r7, #12]
 800704e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	685a      	ldr	r2, [r3, #4]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	693a      	ldr	r2, [r7, #16]
 800705c:	621a      	str	r2, [r3, #32]
}
 800705e:	bf00      	nop
 8007060:	371c      	adds	r7, #28
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr
 800706a:	bf00      	nop
 800706c:	feff8fff 	.word	0xfeff8fff
 8007070:	40010000 	.word	0x40010000
 8007074:	40010400 	.word	0x40010400

08007078 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007078:	b480      	push	{r7}
 800707a:	b087      	sub	sp, #28
 800707c:	af00      	add	r7, sp, #0
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	60b9      	str	r1, [r7, #8]
 8007082:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	6a1b      	ldr	r3, [r3, #32]
 8007088:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	6a1b      	ldr	r3, [r3, #32]
 800708e:	f023 0201 	bic.w	r2, r3, #1
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	699b      	ldr	r3, [r3, #24]
 800709a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80070a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	011b      	lsls	r3, r3, #4
 80070a8:	693a      	ldr	r2, [r7, #16]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	f023 030a 	bic.w	r3, r3, #10
 80070b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80070b6:	697a      	ldr	r2, [r7, #20]
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	693a      	ldr	r2, [r7, #16]
 80070c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	697a      	ldr	r2, [r7, #20]
 80070c8:	621a      	str	r2, [r3, #32]
}
 80070ca:	bf00      	nop
 80070cc:	371c      	adds	r7, #28
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr

080070d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070d6:	b480      	push	{r7}
 80070d8:	b087      	sub	sp, #28
 80070da:	af00      	add	r7, sp, #0
 80070dc:	60f8      	str	r0, [r7, #12]
 80070de:	60b9      	str	r1, [r7, #8]
 80070e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	6a1b      	ldr	r3, [r3, #32]
 80070e6:	f023 0210 	bic.w	r2, r3, #16
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	699b      	ldr	r3, [r3, #24]
 80070f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	6a1b      	ldr	r3, [r3, #32]
 80070f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007100:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	031b      	lsls	r3, r3, #12
 8007106:	697a      	ldr	r2, [r7, #20]
 8007108:	4313      	orrs	r3, r2
 800710a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007112:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	011b      	lsls	r3, r3, #4
 8007118:	693a      	ldr	r2, [r7, #16]
 800711a:	4313      	orrs	r3, r2
 800711c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	697a      	ldr	r2, [r7, #20]
 8007122:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	693a      	ldr	r2, [r7, #16]
 8007128:	621a      	str	r2, [r3, #32]
}
 800712a:	bf00      	nop
 800712c:	371c      	adds	r7, #28
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr

08007136 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007136:	b480      	push	{r7}
 8007138:	b085      	sub	sp, #20
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
 800713e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800714c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800714e:	683a      	ldr	r2, [r7, #0]
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	4313      	orrs	r3, r2
 8007154:	f043 0307 	orr.w	r3, r3, #7
 8007158:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	68fa      	ldr	r2, [r7, #12]
 800715e:	609a      	str	r2, [r3, #8]
}
 8007160:	bf00      	nop
 8007162:	3714      	adds	r7, #20
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr

0800716c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800716c:	b480      	push	{r7}
 800716e:	b087      	sub	sp, #28
 8007170:	af00      	add	r7, sp, #0
 8007172:	60f8      	str	r0, [r7, #12]
 8007174:	60b9      	str	r1, [r7, #8]
 8007176:	607a      	str	r2, [r7, #4]
 8007178:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007186:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	021a      	lsls	r2, r3, #8
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	431a      	orrs	r2, r3
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	4313      	orrs	r3, r2
 8007194:	697a      	ldr	r2, [r7, #20]
 8007196:	4313      	orrs	r3, r2
 8007198:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	697a      	ldr	r2, [r7, #20]
 800719e:	609a      	str	r2, [r3, #8]
}
 80071a0:	bf00      	nop
 80071a2:	371c      	adds	r7, #28
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b085      	sub	sp, #20
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d101      	bne.n	80071c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80071c0:	2302      	movs	r3, #2
 80071c2:	e06d      	b.n	80072a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2202      	movs	r2, #2
 80071d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a30      	ldr	r2, [pc, #192]	; (80072ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d004      	beq.n	80071f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a2f      	ldr	r2, [pc, #188]	; (80072b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d108      	bne.n	800720a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80071fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	68fa      	ldr	r2, [r7, #12]
 8007206:	4313      	orrs	r3, r2
 8007208:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007210:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	68fa      	ldr	r2, [r7, #12]
 8007218:	4313      	orrs	r3, r2
 800721a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	68fa      	ldr	r2, [r7, #12]
 8007222:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a20      	ldr	r2, [pc, #128]	; (80072ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d022      	beq.n	8007274 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007236:	d01d      	beq.n	8007274 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a1d      	ldr	r2, [pc, #116]	; (80072b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d018      	beq.n	8007274 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a1c      	ldr	r2, [pc, #112]	; (80072b8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d013      	beq.n	8007274 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a1a      	ldr	r2, [pc, #104]	; (80072bc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d00e      	beq.n	8007274 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a15      	ldr	r2, [pc, #84]	; (80072b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d009      	beq.n	8007274 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a16      	ldr	r2, [pc, #88]	; (80072c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d004      	beq.n	8007274 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a15      	ldr	r2, [pc, #84]	; (80072c4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d10c      	bne.n	800728e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800727a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	68ba      	ldr	r2, [r7, #8]
 8007282:	4313      	orrs	r3, r2
 8007284:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	68ba      	ldr	r2, [r7, #8]
 800728c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2201      	movs	r2, #1
 8007292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2200      	movs	r2, #0
 800729a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800729e:	2300      	movs	r3, #0
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3714      	adds	r7, #20
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr
 80072ac:	40010000 	.word	0x40010000
 80072b0:	40010400 	.word	0x40010400
 80072b4:	40000400 	.word	0x40000400
 80072b8:	40000800 	.word	0x40000800
 80072bc:	40000c00 	.word	0x40000c00
 80072c0:	40014000 	.word	0x40014000
 80072c4:	40001800 	.word	0x40001800

080072c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b082      	sub	sp, #8
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d101      	bne.n	80072da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	e040      	b.n	800735c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d106      	bne.n	80072f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f7fb f97a 	bl	80025e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2224      	movs	r2, #36	; 0x24
 80072f4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f022 0201 	bic.w	r2, r2, #1
 8007304:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 fbc2 	bl	8007a90 <UART_SetConfig>
 800730c:	4603      	mov	r3, r0
 800730e:	2b01      	cmp	r3, #1
 8007310:	d101      	bne.n	8007316 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	e022      	b.n	800735c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800731a:	2b00      	cmp	r3, #0
 800731c:	d002      	beq.n	8007324 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 fe1a 	bl	8007f58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	685a      	ldr	r2, [r3, #4]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007332:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	689a      	ldr	r2, [r3, #8]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007342:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f042 0201 	orr.w	r2, r2, #1
 8007352:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 fea1 	bl	800809c <UART_CheckIdleState>
 800735a:	4603      	mov	r3, r0
}
 800735c:	4618      	mov	r0, r3
 800735e:	3708      	adds	r7, #8
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}

08007364 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b08a      	sub	sp, #40	; 0x28
 8007368:	af02      	add	r7, sp, #8
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	603b      	str	r3, [r7, #0]
 8007370:	4613      	mov	r3, r2
 8007372:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007378:	2b20      	cmp	r3, #32
 800737a:	d171      	bne.n	8007460 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d002      	beq.n	8007388 <HAL_UART_Transmit+0x24>
 8007382:	88fb      	ldrh	r3, [r7, #6]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d101      	bne.n	800738c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007388:	2301      	movs	r3, #1
 800738a:	e06a      	b.n	8007462 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2200      	movs	r2, #0
 8007390:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2221      	movs	r2, #33	; 0x21
 8007398:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800739a:	f7fc f959 	bl	8003650 <HAL_GetTick>
 800739e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	88fa      	ldrh	r2, [r7, #6]
 80073a4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	88fa      	ldrh	r2, [r7, #6]
 80073ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073b8:	d108      	bne.n	80073cc <HAL_UART_Transmit+0x68>
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	691b      	ldr	r3, [r3, #16]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d104      	bne.n	80073cc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80073c2:	2300      	movs	r3, #0
 80073c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	61bb      	str	r3, [r7, #24]
 80073ca:	e003      	b.n	80073d4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80073d0:	2300      	movs	r3, #0
 80073d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80073d4:	e02c      	b.n	8007430 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	9300      	str	r3, [sp, #0]
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	2200      	movs	r2, #0
 80073de:	2180      	movs	r1, #128	; 0x80
 80073e0:	68f8      	ldr	r0, [r7, #12]
 80073e2:	f000 fea8 	bl	8008136 <UART_WaitOnFlagUntilTimeout>
 80073e6:	4603      	mov	r3, r0
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d001      	beq.n	80073f0 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80073ec:	2303      	movs	r3, #3
 80073ee:	e038      	b.n	8007462 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80073f0:	69fb      	ldr	r3, [r7, #28]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d10b      	bne.n	800740e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80073f6:	69bb      	ldr	r3, [r7, #24]
 80073f8:	881b      	ldrh	r3, [r3, #0]
 80073fa:	461a      	mov	r2, r3
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007404:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007406:	69bb      	ldr	r3, [r7, #24]
 8007408:	3302      	adds	r3, #2
 800740a:	61bb      	str	r3, [r7, #24]
 800740c:	e007      	b.n	800741e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800740e:	69fb      	ldr	r3, [r7, #28]
 8007410:	781a      	ldrb	r2, [r3, #0]
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007418:	69fb      	ldr	r3, [r7, #28]
 800741a:	3301      	adds	r3, #1
 800741c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007424:	b29b      	uxth	r3, r3
 8007426:	3b01      	subs	r3, #1
 8007428:	b29a      	uxth	r2, r3
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007436:	b29b      	uxth	r3, r3
 8007438:	2b00      	cmp	r3, #0
 800743a:	d1cc      	bne.n	80073d6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	9300      	str	r3, [sp, #0]
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	2200      	movs	r2, #0
 8007444:	2140      	movs	r1, #64	; 0x40
 8007446:	68f8      	ldr	r0, [r7, #12]
 8007448:	f000 fe75 	bl	8008136 <UART_WaitOnFlagUntilTimeout>
 800744c:	4603      	mov	r3, r0
 800744e:	2b00      	cmp	r3, #0
 8007450:	d001      	beq.n	8007456 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8007452:	2303      	movs	r3, #3
 8007454:	e005      	b.n	8007462 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2220      	movs	r2, #32
 800745a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800745c:	2300      	movs	r3, #0
 800745e:	e000      	b.n	8007462 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007460:	2302      	movs	r3, #2
  }
}
 8007462:	4618      	mov	r0, r3
 8007464:	3720      	adds	r7, #32
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
	...

0800746c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b0ba      	sub	sp, #232	; 0xe8
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	69db      	ldr	r3, [r3, #28]
 800747a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007492:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007496:	f640 030f 	movw	r3, #2063	; 0x80f
 800749a:	4013      	ands	r3, r2
 800749c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80074a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d115      	bne.n	80074d4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80074a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074ac:	f003 0320 	and.w	r3, r3, #32
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d00f      	beq.n	80074d4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80074b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074b8:	f003 0320 	and.w	r3, r3, #32
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d009      	beq.n	80074d4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	f000 82ac 	beq.w	8007a22 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	4798      	blx	r3
      }
      return;
 80074d2:	e2a6      	b.n	8007a22 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80074d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80074d8:	2b00      	cmp	r3, #0
 80074da:	f000 8117 	beq.w	800770c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80074de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074e2:	f003 0301 	and.w	r3, r3, #1
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d106      	bne.n	80074f8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80074ea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80074ee:	4b85      	ldr	r3, [pc, #532]	; (8007704 <HAL_UART_IRQHandler+0x298>)
 80074f0:	4013      	ands	r3, r2
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	f000 810a 	beq.w	800770c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80074f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074fc:	f003 0301 	and.w	r3, r3, #1
 8007500:	2b00      	cmp	r3, #0
 8007502:	d011      	beq.n	8007528 <HAL_UART_IRQHandler+0xbc>
 8007504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800750c:	2b00      	cmp	r3, #0
 800750e:	d00b      	beq.n	8007528 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	2201      	movs	r2, #1
 8007516:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800751e:	f043 0201 	orr.w	r2, r3, #1
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007528:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800752c:	f003 0302 	and.w	r3, r3, #2
 8007530:	2b00      	cmp	r3, #0
 8007532:	d011      	beq.n	8007558 <HAL_UART_IRQHandler+0xec>
 8007534:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007538:	f003 0301 	and.w	r3, r3, #1
 800753c:	2b00      	cmp	r3, #0
 800753e:	d00b      	beq.n	8007558 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	2202      	movs	r2, #2
 8007546:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800754e:	f043 0204 	orr.w	r2, r3, #4
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800755c:	f003 0304 	and.w	r3, r3, #4
 8007560:	2b00      	cmp	r3, #0
 8007562:	d011      	beq.n	8007588 <HAL_UART_IRQHandler+0x11c>
 8007564:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007568:	f003 0301 	and.w	r3, r3, #1
 800756c:	2b00      	cmp	r3, #0
 800756e:	d00b      	beq.n	8007588 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2204      	movs	r2, #4
 8007576:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800757e:	f043 0202 	orr.w	r2, r3, #2
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800758c:	f003 0308 	and.w	r3, r3, #8
 8007590:	2b00      	cmp	r3, #0
 8007592:	d017      	beq.n	80075c4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007598:	f003 0320 	and.w	r3, r3, #32
 800759c:	2b00      	cmp	r3, #0
 800759e:	d105      	bne.n	80075ac <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80075a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075a4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00b      	beq.n	80075c4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	2208      	movs	r2, #8
 80075b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075ba:	f043 0208 	orr.w	r2, r3, #8
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80075c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d012      	beq.n	80075f6 <HAL_UART_IRQHandler+0x18a>
 80075d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d00c      	beq.n	80075f6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80075e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075ec:	f043 0220 	orr.w	r2, r3, #32
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	f000 8212 	beq.w	8007a26 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007606:	f003 0320 	and.w	r3, r3, #32
 800760a:	2b00      	cmp	r3, #0
 800760c:	d00d      	beq.n	800762a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800760e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007612:	f003 0320 	and.w	r3, r3, #32
 8007616:	2b00      	cmp	r3, #0
 8007618:	d007      	beq.n	800762a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800761e:	2b00      	cmp	r3, #0
 8007620:	d003      	beq.n	800762a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007630:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800763e:	2b40      	cmp	r3, #64	; 0x40
 8007640:	d005      	beq.n	800764e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007642:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007646:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800764a:	2b00      	cmp	r3, #0
 800764c:	d04f      	beq.n	80076ee <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 fe37 	bl	80082c2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800765e:	2b40      	cmp	r3, #64	; 0x40
 8007660:	d141      	bne.n	80076e6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	3308      	adds	r3, #8
 8007668:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800766c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007670:	e853 3f00 	ldrex	r3, [r3]
 8007674:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007678:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800767c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007680:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	3308      	adds	r3, #8
 800768a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800768e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007692:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007696:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800769a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800769e:	e841 2300 	strex	r3, r2, [r1]
 80076a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80076a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d1d9      	bne.n	8007662 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d013      	beq.n	80076de <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076ba:	4a13      	ldr	r2, [pc, #76]	; (8007708 <HAL_UART_IRQHandler+0x29c>)
 80076bc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076c2:	4618      	mov	r0, r3
 80076c4:	f7fc fdae 	bl	8004224 <HAL_DMA_Abort_IT>
 80076c8:	4603      	mov	r3, r0
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d017      	beq.n	80076fe <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80076d8:	4610      	mov	r0, r2
 80076da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076dc:	e00f      	b.n	80076fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 f9b6 	bl	8007a50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076e4:	e00b      	b.n	80076fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 f9b2 	bl	8007a50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076ec:	e007      	b.n	80076fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 f9ae 	bl	8007a50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80076fc:	e193      	b.n	8007a26 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076fe:	bf00      	nop
    return;
 8007700:	e191      	b.n	8007a26 <HAL_UART_IRQHandler+0x5ba>
 8007702:	bf00      	nop
 8007704:	04000120 	.word	0x04000120
 8007708:	0800838b 	.word	0x0800838b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007710:	2b01      	cmp	r3, #1
 8007712:	f040 814c 	bne.w	80079ae <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800771a:	f003 0310 	and.w	r3, r3, #16
 800771e:	2b00      	cmp	r3, #0
 8007720:	f000 8145 	beq.w	80079ae <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007728:	f003 0310 	and.w	r3, r3, #16
 800772c:	2b00      	cmp	r3, #0
 800772e:	f000 813e 	beq.w	80079ae <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	2210      	movs	r2, #16
 8007738:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007744:	2b40      	cmp	r3, #64	; 0x40
 8007746:	f040 80b6 	bne.w	80078b6 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007756:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800775a:	2b00      	cmp	r3, #0
 800775c:	f000 8165 	beq.w	8007a2a <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007766:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800776a:	429a      	cmp	r2, r3
 800776c:	f080 815d 	bcs.w	8007a2a <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007776:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800777e:	69db      	ldr	r3, [r3, #28]
 8007780:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007784:	f000 8086 	beq.w	8007894 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007790:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007794:	e853 3f00 	ldrex	r3, [r3]
 8007798:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800779c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80077a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	461a      	mov	r2, r3
 80077ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80077b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80077b6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80077be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80077c2:	e841 2300 	strex	r3, r2, [r1]
 80077c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80077ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d1da      	bne.n	8007788 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	3308      	adds	r3, #8
 80077d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077dc:	e853 3f00 	ldrex	r3, [r3]
 80077e0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80077e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80077e4:	f023 0301 	bic.w	r3, r3, #1
 80077e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	3308      	adds	r3, #8
 80077f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80077f6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80077fa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077fc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80077fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007802:	e841 2300 	strex	r3, r2, [r1]
 8007806:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007808:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800780a:	2b00      	cmp	r3, #0
 800780c:	d1e1      	bne.n	80077d2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	3308      	adds	r3, #8
 8007814:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007816:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007818:	e853 3f00 	ldrex	r3, [r3]
 800781c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800781e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007820:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007824:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	3308      	adds	r3, #8
 800782e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007832:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007834:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007836:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007838:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800783a:	e841 2300 	strex	r3, r2, [r1]
 800783e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007840:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007842:	2b00      	cmp	r3, #0
 8007844:	d1e3      	bne.n	800780e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2220      	movs	r2, #32
 800784a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800785a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800785c:	e853 3f00 	ldrex	r3, [r3]
 8007860:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007862:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007864:	f023 0310 	bic.w	r3, r3, #16
 8007868:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	461a      	mov	r2, r3
 8007872:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007876:	65bb      	str	r3, [r7, #88]	; 0x58
 8007878:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800787a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800787c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800787e:	e841 2300 	strex	r3, r2, [r1]
 8007882:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007884:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007886:	2b00      	cmp	r3, #0
 8007888:	d1e4      	bne.n	8007854 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800788e:	4618      	mov	r0, r3
 8007890:	f7fc fc58 	bl	8004144 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2202      	movs	r2, #2
 8007898:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	1ad3      	subs	r3, r2, r3
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	4619      	mov	r1, r3
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 f8d8 	bl	8007a64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80078b4:	e0b9      	b.n	8007a2a <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	1ad3      	subs	r3, r2, r3
 80078c6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	f000 80ab 	beq.w	8007a2e <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80078d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80078dc:	2b00      	cmp	r3, #0
 80078de:	f000 80a6 	beq.w	8007a2e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ea:	e853 3f00 	ldrex	r3, [r3]
 80078ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80078f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80078f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	461a      	mov	r2, r3
 8007900:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007904:	647b      	str	r3, [r7, #68]	; 0x44
 8007906:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007908:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800790a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800790c:	e841 2300 	strex	r3, r2, [r1]
 8007910:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007914:	2b00      	cmp	r3, #0
 8007916:	d1e4      	bne.n	80078e2 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	3308      	adds	r3, #8
 800791e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007922:	e853 3f00 	ldrex	r3, [r3]
 8007926:	623b      	str	r3, [r7, #32]
   return(result);
 8007928:	6a3b      	ldr	r3, [r7, #32]
 800792a:	f023 0301 	bic.w	r3, r3, #1
 800792e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	3308      	adds	r3, #8
 8007938:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800793c:	633a      	str	r2, [r7, #48]	; 0x30
 800793e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007940:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007942:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007944:	e841 2300 	strex	r3, r2, [r1]
 8007948:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800794a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800794c:	2b00      	cmp	r3, #0
 800794e:	d1e3      	bne.n	8007918 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2220      	movs	r2, #32
 8007954:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2200      	movs	r2, #0
 800795c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2200      	movs	r2, #0
 8007962:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	e853 3f00 	ldrex	r3, [r3]
 8007970:	60fb      	str	r3, [r7, #12]
   return(result);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	f023 0310 	bic.w	r3, r3, #16
 8007978:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	461a      	mov	r2, r3
 8007982:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007986:	61fb      	str	r3, [r7, #28]
 8007988:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798a:	69b9      	ldr	r1, [r7, #24]
 800798c:	69fa      	ldr	r2, [r7, #28]
 800798e:	e841 2300 	strex	r3, r2, [r1]
 8007992:	617b      	str	r3, [r7, #20]
   return(result);
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d1e4      	bne.n	8007964 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2202      	movs	r2, #2
 800799e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80079a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80079a4:	4619      	mov	r1, r3
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 f85c 	bl	8007a64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80079ac:	e03f      	b.n	8007a2e <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80079ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d00e      	beq.n	80079d8 <HAL_UART_IRQHandler+0x56c>
 80079ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d008      	beq.n	80079d8 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80079ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 f853 	bl	8007a7c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80079d6:	e02d      	b.n	8007a34 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80079d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d00e      	beq.n	8007a02 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80079e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d008      	beq.n	8007a02 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d01c      	beq.n	8007a32 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	4798      	blx	r3
    }
    return;
 8007a00:	e017      	b.n	8007a32 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d012      	beq.n	8007a34 <HAL_UART_IRQHandler+0x5c8>
 8007a0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d00c      	beq.n	8007a34 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 fccb 	bl	80083b6 <UART_EndTransmit_IT>
    return;
 8007a20:	e008      	b.n	8007a34 <HAL_UART_IRQHandler+0x5c8>
      return;
 8007a22:	bf00      	nop
 8007a24:	e006      	b.n	8007a34 <HAL_UART_IRQHandler+0x5c8>
    return;
 8007a26:	bf00      	nop
 8007a28:	e004      	b.n	8007a34 <HAL_UART_IRQHandler+0x5c8>
      return;
 8007a2a:	bf00      	nop
 8007a2c:	e002      	b.n	8007a34 <HAL_UART_IRQHandler+0x5c8>
      return;
 8007a2e:	bf00      	nop
 8007a30:	e000      	b.n	8007a34 <HAL_UART_IRQHandler+0x5c8>
    return;
 8007a32:	bf00      	nop
  }

}
 8007a34:	37e8      	adds	r7, #232	; 0xe8
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop

08007a3c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b083      	sub	sp, #12
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007a44:	bf00      	nop
 8007a46:	370c      	adds	r7, #12
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr

08007a50 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b083      	sub	sp, #12
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007a58:	bf00      	nop
 8007a5a:	370c      	adds	r7, #12
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a62:	4770      	bx	lr

08007a64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b083      	sub	sp, #12
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	460b      	mov	r3, r1
 8007a6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007a70:	bf00      	nop
 8007a72:	370c      	adds	r7, #12
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr

08007a7c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b083      	sub	sp, #12
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007a84:	bf00      	nop
 8007a86:	370c      	adds	r7, #12
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr

08007a90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b088      	sub	sp, #32
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	689a      	ldr	r2, [r3, #8]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	691b      	ldr	r3, [r3, #16]
 8007aa4:	431a      	orrs	r2, r3
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	695b      	ldr	r3, [r3, #20]
 8007aaa:	431a      	orrs	r2, r3
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	69db      	ldr	r3, [r3, #28]
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	4ba6      	ldr	r3, [pc, #664]	; (8007d54 <UART_SetConfig+0x2c4>)
 8007abc:	4013      	ands	r3, r2
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	6812      	ldr	r2, [r2, #0]
 8007ac2:	6979      	ldr	r1, [r7, #20]
 8007ac4:	430b      	orrs	r3, r1
 8007ac6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	68da      	ldr	r2, [r3, #12]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	430a      	orrs	r2, r1
 8007adc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	699b      	ldr	r3, [r3, #24]
 8007ae2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6a1b      	ldr	r3, [r3, #32]
 8007ae8:	697a      	ldr	r2, [r7, #20]
 8007aea:	4313      	orrs	r3, r2
 8007aec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	697a      	ldr	r2, [r7, #20]
 8007afe:	430a      	orrs	r2, r1
 8007b00:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a94      	ldr	r2, [pc, #592]	; (8007d58 <UART_SetConfig+0x2c8>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d120      	bne.n	8007b4e <UART_SetConfig+0xbe>
 8007b0c:	4b93      	ldr	r3, [pc, #588]	; (8007d5c <UART_SetConfig+0x2cc>)
 8007b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b12:	f003 0303 	and.w	r3, r3, #3
 8007b16:	2b03      	cmp	r3, #3
 8007b18:	d816      	bhi.n	8007b48 <UART_SetConfig+0xb8>
 8007b1a:	a201      	add	r2, pc, #4	; (adr r2, 8007b20 <UART_SetConfig+0x90>)
 8007b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b20:	08007b31 	.word	0x08007b31
 8007b24:	08007b3d 	.word	0x08007b3d
 8007b28:	08007b37 	.word	0x08007b37
 8007b2c:	08007b43 	.word	0x08007b43
 8007b30:	2301      	movs	r3, #1
 8007b32:	77fb      	strb	r3, [r7, #31]
 8007b34:	e150      	b.n	8007dd8 <UART_SetConfig+0x348>
 8007b36:	2302      	movs	r3, #2
 8007b38:	77fb      	strb	r3, [r7, #31]
 8007b3a:	e14d      	b.n	8007dd8 <UART_SetConfig+0x348>
 8007b3c:	2304      	movs	r3, #4
 8007b3e:	77fb      	strb	r3, [r7, #31]
 8007b40:	e14a      	b.n	8007dd8 <UART_SetConfig+0x348>
 8007b42:	2308      	movs	r3, #8
 8007b44:	77fb      	strb	r3, [r7, #31]
 8007b46:	e147      	b.n	8007dd8 <UART_SetConfig+0x348>
 8007b48:	2310      	movs	r3, #16
 8007b4a:	77fb      	strb	r3, [r7, #31]
 8007b4c:	e144      	b.n	8007dd8 <UART_SetConfig+0x348>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a83      	ldr	r2, [pc, #524]	; (8007d60 <UART_SetConfig+0x2d0>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d132      	bne.n	8007bbe <UART_SetConfig+0x12e>
 8007b58:	4b80      	ldr	r3, [pc, #512]	; (8007d5c <UART_SetConfig+0x2cc>)
 8007b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b5e:	f003 030c 	and.w	r3, r3, #12
 8007b62:	2b0c      	cmp	r3, #12
 8007b64:	d828      	bhi.n	8007bb8 <UART_SetConfig+0x128>
 8007b66:	a201      	add	r2, pc, #4	; (adr r2, 8007b6c <UART_SetConfig+0xdc>)
 8007b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b6c:	08007ba1 	.word	0x08007ba1
 8007b70:	08007bb9 	.word	0x08007bb9
 8007b74:	08007bb9 	.word	0x08007bb9
 8007b78:	08007bb9 	.word	0x08007bb9
 8007b7c:	08007bad 	.word	0x08007bad
 8007b80:	08007bb9 	.word	0x08007bb9
 8007b84:	08007bb9 	.word	0x08007bb9
 8007b88:	08007bb9 	.word	0x08007bb9
 8007b8c:	08007ba7 	.word	0x08007ba7
 8007b90:	08007bb9 	.word	0x08007bb9
 8007b94:	08007bb9 	.word	0x08007bb9
 8007b98:	08007bb9 	.word	0x08007bb9
 8007b9c:	08007bb3 	.word	0x08007bb3
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	77fb      	strb	r3, [r7, #31]
 8007ba4:	e118      	b.n	8007dd8 <UART_SetConfig+0x348>
 8007ba6:	2302      	movs	r3, #2
 8007ba8:	77fb      	strb	r3, [r7, #31]
 8007baa:	e115      	b.n	8007dd8 <UART_SetConfig+0x348>
 8007bac:	2304      	movs	r3, #4
 8007bae:	77fb      	strb	r3, [r7, #31]
 8007bb0:	e112      	b.n	8007dd8 <UART_SetConfig+0x348>
 8007bb2:	2308      	movs	r3, #8
 8007bb4:	77fb      	strb	r3, [r7, #31]
 8007bb6:	e10f      	b.n	8007dd8 <UART_SetConfig+0x348>
 8007bb8:	2310      	movs	r3, #16
 8007bba:	77fb      	strb	r3, [r7, #31]
 8007bbc:	e10c      	b.n	8007dd8 <UART_SetConfig+0x348>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a68      	ldr	r2, [pc, #416]	; (8007d64 <UART_SetConfig+0x2d4>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d120      	bne.n	8007c0a <UART_SetConfig+0x17a>
 8007bc8:	4b64      	ldr	r3, [pc, #400]	; (8007d5c <UART_SetConfig+0x2cc>)
 8007bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007bd2:	2b30      	cmp	r3, #48	; 0x30
 8007bd4:	d013      	beq.n	8007bfe <UART_SetConfig+0x16e>
 8007bd6:	2b30      	cmp	r3, #48	; 0x30
 8007bd8:	d814      	bhi.n	8007c04 <UART_SetConfig+0x174>
 8007bda:	2b20      	cmp	r3, #32
 8007bdc:	d009      	beq.n	8007bf2 <UART_SetConfig+0x162>
 8007bde:	2b20      	cmp	r3, #32
 8007be0:	d810      	bhi.n	8007c04 <UART_SetConfig+0x174>
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d002      	beq.n	8007bec <UART_SetConfig+0x15c>
 8007be6:	2b10      	cmp	r3, #16
 8007be8:	d006      	beq.n	8007bf8 <UART_SetConfig+0x168>
 8007bea:	e00b      	b.n	8007c04 <UART_SetConfig+0x174>
 8007bec:	2300      	movs	r3, #0
 8007bee:	77fb      	strb	r3, [r7, #31]
 8007bf0:	e0f2      	b.n	8007dd8 <UART_SetConfig+0x348>
 8007bf2:	2302      	movs	r3, #2
 8007bf4:	77fb      	strb	r3, [r7, #31]
 8007bf6:	e0ef      	b.n	8007dd8 <UART_SetConfig+0x348>
 8007bf8:	2304      	movs	r3, #4
 8007bfa:	77fb      	strb	r3, [r7, #31]
 8007bfc:	e0ec      	b.n	8007dd8 <UART_SetConfig+0x348>
 8007bfe:	2308      	movs	r3, #8
 8007c00:	77fb      	strb	r3, [r7, #31]
 8007c02:	e0e9      	b.n	8007dd8 <UART_SetConfig+0x348>
 8007c04:	2310      	movs	r3, #16
 8007c06:	77fb      	strb	r3, [r7, #31]
 8007c08:	e0e6      	b.n	8007dd8 <UART_SetConfig+0x348>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a56      	ldr	r2, [pc, #344]	; (8007d68 <UART_SetConfig+0x2d8>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d120      	bne.n	8007c56 <UART_SetConfig+0x1c6>
 8007c14:	4b51      	ldr	r3, [pc, #324]	; (8007d5c <UART_SetConfig+0x2cc>)
 8007c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c1a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007c1e:	2bc0      	cmp	r3, #192	; 0xc0
 8007c20:	d013      	beq.n	8007c4a <UART_SetConfig+0x1ba>
 8007c22:	2bc0      	cmp	r3, #192	; 0xc0
 8007c24:	d814      	bhi.n	8007c50 <UART_SetConfig+0x1c0>
 8007c26:	2b80      	cmp	r3, #128	; 0x80
 8007c28:	d009      	beq.n	8007c3e <UART_SetConfig+0x1ae>
 8007c2a:	2b80      	cmp	r3, #128	; 0x80
 8007c2c:	d810      	bhi.n	8007c50 <UART_SetConfig+0x1c0>
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d002      	beq.n	8007c38 <UART_SetConfig+0x1a8>
 8007c32:	2b40      	cmp	r3, #64	; 0x40
 8007c34:	d006      	beq.n	8007c44 <UART_SetConfig+0x1b4>
 8007c36:	e00b      	b.n	8007c50 <UART_SetConfig+0x1c0>
 8007c38:	2300      	movs	r3, #0
 8007c3a:	77fb      	strb	r3, [r7, #31]
 8007c3c:	e0cc      	b.n	8007dd8 <UART_SetConfig+0x348>
 8007c3e:	2302      	movs	r3, #2
 8007c40:	77fb      	strb	r3, [r7, #31]
 8007c42:	e0c9      	b.n	8007dd8 <UART_SetConfig+0x348>
 8007c44:	2304      	movs	r3, #4
 8007c46:	77fb      	strb	r3, [r7, #31]
 8007c48:	e0c6      	b.n	8007dd8 <UART_SetConfig+0x348>
 8007c4a:	2308      	movs	r3, #8
 8007c4c:	77fb      	strb	r3, [r7, #31]
 8007c4e:	e0c3      	b.n	8007dd8 <UART_SetConfig+0x348>
 8007c50:	2310      	movs	r3, #16
 8007c52:	77fb      	strb	r3, [r7, #31]
 8007c54:	e0c0      	b.n	8007dd8 <UART_SetConfig+0x348>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a44      	ldr	r2, [pc, #272]	; (8007d6c <UART_SetConfig+0x2dc>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d125      	bne.n	8007cac <UART_SetConfig+0x21c>
 8007c60:	4b3e      	ldr	r3, [pc, #248]	; (8007d5c <UART_SetConfig+0x2cc>)
 8007c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c6e:	d017      	beq.n	8007ca0 <UART_SetConfig+0x210>
 8007c70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c74:	d817      	bhi.n	8007ca6 <UART_SetConfig+0x216>
 8007c76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c7a:	d00b      	beq.n	8007c94 <UART_SetConfig+0x204>
 8007c7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c80:	d811      	bhi.n	8007ca6 <UART_SetConfig+0x216>
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d003      	beq.n	8007c8e <UART_SetConfig+0x1fe>
 8007c86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c8a:	d006      	beq.n	8007c9a <UART_SetConfig+0x20a>
 8007c8c:	e00b      	b.n	8007ca6 <UART_SetConfig+0x216>
 8007c8e:	2300      	movs	r3, #0
 8007c90:	77fb      	strb	r3, [r7, #31]
 8007c92:	e0a1      	b.n	8007dd8 <UART_SetConfig+0x348>
 8007c94:	2302      	movs	r3, #2
 8007c96:	77fb      	strb	r3, [r7, #31]
 8007c98:	e09e      	b.n	8007dd8 <UART_SetConfig+0x348>
 8007c9a:	2304      	movs	r3, #4
 8007c9c:	77fb      	strb	r3, [r7, #31]
 8007c9e:	e09b      	b.n	8007dd8 <UART_SetConfig+0x348>
 8007ca0:	2308      	movs	r3, #8
 8007ca2:	77fb      	strb	r3, [r7, #31]
 8007ca4:	e098      	b.n	8007dd8 <UART_SetConfig+0x348>
 8007ca6:	2310      	movs	r3, #16
 8007ca8:	77fb      	strb	r3, [r7, #31]
 8007caa:	e095      	b.n	8007dd8 <UART_SetConfig+0x348>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a2f      	ldr	r2, [pc, #188]	; (8007d70 <UART_SetConfig+0x2e0>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d125      	bne.n	8007d02 <UART_SetConfig+0x272>
 8007cb6:	4b29      	ldr	r3, [pc, #164]	; (8007d5c <UART_SetConfig+0x2cc>)
 8007cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cbc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007cc0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007cc4:	d017      	beq.n	8007cf6 <UART_SetConfig+0x266>
 8007cc6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007cca:	d817      	bhi.n	8007cfc <UART_SetConfig+0x26c>
 8007ccc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cd0:	d00b      	beq.n	8007cea <UART_SetConfig+0x25a>
 8007cd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cd6:	d811      	bhi.n	8007cfc <UART_SetConfig+0x26c>
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d003      	beq.n	8007ce4 <UART_SetConfig+0x254>
 8007cdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ce0:	d006      	beq.n	8007cf0 <UART_SetConfig+0x260>
 8007ce2:	e00b      	b.n	8007cfc <UART_SetConfig+0x26c>
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	77fb      	strb	r3, [r7, #31]
 8007ce8:	e076      	b.n	8007dd8 <UART_SetConfig+0x348>
 8007cea:	2302      	movs	r3, #2
 8007cec:	77fb      	strb	r3, [r7, #31]
 8007cee:	e073      	b.n	8007dd8 <UART_SetConfig+0x348>
 8007cf0:	2304      	movs	r3, #4
 8007cf2:	77fb      	strb	r3, [r7, #31]
 8007cf4:	e070      	b.n	8007dd8 <UART_SetConfig+0x348>
 8007cf6:	2308      	movs	r3, #8
 8007cf8:	77fb      	strb	r3, [r7, #31]
 8007cfa:	e06d      	b.n	8007dd8 <UART_SetConfig+0x348>
 8007cfc:	2310      	movs	r3, #16
 8007cfe:	77fb      	strb	r3, [r7, #31]
 8007d00:	e06a      	b.n	8007dd8 <UART_SetConfig+0x348>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a1b      	ldr	r2, [pc, #108]	; (8007d74 <UART_SetConfig+0x2e4>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d138      	bne.n	8007d7e <UART_SetConfig+0x2ee>
 8007d0c:	4b13      	ldr	r3, [pc, #76]	; (8007d5c <UART_SetConfig+0x2cc>)
 8007d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d12:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007d16:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d1a:	d017      	beq.n	8007d4c <UART_SetConfig+0x2bc>
 8007d1c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d20:	d82a      	bhi.n	8007d78 <UART_SetConfig+0x2e8>
 8007d22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d26:	d00b      	beq.n	8007d40 <UART_SetConfig+0x2b0>
 8007d28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d2c:	d824      	bhi.n	8007d78 <UART_SetConfig+0x2e8>
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d003      	beq.n	8007d3a <UART_SetConfig+0x2aa>
 8007d32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d36:	d006      	beq.n	8007d46 <UART_SetConfig+0x2b6>
 8007d38:	e01e      	b.n	8007d78 <UART_SetConfig+0x2e8>
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	77fb      	strb	r3, [r7, #31]
 8007d3e:	e04b      	b.n	8007dd8 <UART_SetConfig+0x348>
 8007d40:	2302      	movs	r3, #2
 8007d42:	77fb      	strb	r3, [r7, #31]
 8007d44:	e048      	b.n	8007dd8 <UART_SetConfig+0x348>
 8007d46:	2304      	movs	r3, #4
 8007d48:	77fb      	strb	r3, [r7, #31]
 8007d4a:	e045      	b.n	8007dd8 <UART_SetConfig+0x348>
 8007d4c:	2308      	movs	r3, #8
 8007d4e:	77fb      	strb	r3, [r7, #31]
 8007d50:	e042      	b.n	8007dd8 <UART_SetConfig+0x348>
 8007d52:	bf00      	nop
 8007d54:	efff69f3 	.word	0xefff69f3
 8007d58:	40011000 	.word	0x40011000
 8007d5c:	40023800 	.word	0x40023800
 8007d60:	40004400 	.word	0x40004400
 8007d64:	40004800 	.word	0x40004800
 8007d68:	40004c00 	.word	0x40004c00
 8007d6c:	40005000 	.word	0x40005000
 8007d70:	40011400 	.word	0x40011400
 8007d74:	40007800 	.word	0x40007800
 8007d78:	2310      	movs	r3, #16
 8007d7a:	77fb      	strb	r3, [r7, #31]
 8007d7c:	e02c      	b.n	8007dd8 <UART_SetConfig+0x348>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a72      	ldr	r2, [pc, #456]	; (8007f4c <UART_SetConfig+0x4bc>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d125      	bne.n	8007dd4 <UART_SetConfig+0x344>
 8007d88:	4b71      	ldr	r3, [pc, #452]	; (8007f50 <UART_SetConfig+0x4c0>)
 8007d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d8e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007d92:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007d96:	d017      	beq.n	8007dc8 <UART_SetConfig+0x338>
 8007d98:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007d9c:	d817      	bhi.n	8007dce <UART_SetConfig+0x33e>
 8007d9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007da2:	d00b      	beq.n	8007dbc <UART_SetConfig+0x32c>
 8007da4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007da8:	d811      	bhi.n	8007dce <UART_SetConfig+0x33e>
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d003      	beq.n	8007db6 <UART_SetConfig+0x326>
 8007dae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007db2:	d006      	beq.n	8007dc2 <UART_SetConfig+0x332>
 8007db4:	e00b      	b.n	8007dce <UART_SetConfig+0x33e>
 8007db6:	2300      	movs	r3, #0
 8007db8:	77fb      	strb	r3, [r7, #31]
 8007dba:	e00d      	b.n	8007dd8 <UART_SetConfig+0x348>
 8007dbc:	2302      	movs	r3, #2
 8007dbe:	77fb      	strb	r3, [r7, #31]
 8007dc0:	e00a      	b.n	8007dd8 <UART_SetConfig+0x348>
 8007dc2:	2304      	movs	r3, #4
 8007dc4:	77fb      	strb	r3, [r7, #31]
 8007dc6:	e007      	b.n	8007dd8 <UART_SetConfig+0x348>
 8007dc8:	2308      	movs	r3, #8
 8007dca:	77fb      	strb	r3, [r7, #31]
 8007dcc:	e004      	b.n	8007dd8 <UART_SetConfig+0x348>
 8007dce:	2310      	movs	r3, #16
 8007dd0:	77fb      	strb	r3, [r7, #31]
 8007dd2:	e001      	b.n	8007dd8 <UART_SetConfig+0x348>
 8007dd4:	2310      	movs	r3, #16
 8007dd6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	69db      	ldr	r3, [r3, #28]
 8007ddc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007de0:	d15b      	bne.n	8007e9a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007de2:	7ffb      	ldrb	r3, [r7, #31]
 8007de4:	2b08      	cmp	r3, #8
 8007de6:	d828      	bhi.n	8007e3a <UART_SetConfig+0x3aa>
 8007de8:	a201      	add	r2, pc, #4	; (adr r2, 8007df0 <UART_SetConfig+0x360>)
 8007dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dee:	bf00      	nop
 8007df0:	08007e15 	.word	0x08007e15
 8007df4:	08007e1d 	.word	0x08007e1d
 8007df8:	08007e25 	.word	0x08007e25
 8007dfc:	08007e3b 	.word	0x08007e3b
 8007e00:	08007e2b 	.word	0x08007e2b
 8007e04:	08007e3b 	.word	0x08007e3b
 8007e08:	08007e3b 	.word	0x08007e3b
 8007e0c:	08007e3b 	.word	0x08007e3b
 8007e10:	08007e33 	.word	0x08007e33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e14:	f7fd fb80 	bl	8005518 <HAL_RCC_GetPCLK1Freq>
 8007e18:	61b8      	str	r0, [r7, #24]
        break;
 8007e1a:	e013      	b.n	8007e44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e1c:	f7fd fb90 	bl	8005540 <HAL_RCC_GetPCLK2Freq>
 8007e20:	61b8      	str	r0, [r7, #24]
        break;
 8007e22:	e00f      	b.n	8007e44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e24:	4b4b      	ldr	r3, [pc, #300]	; (8007f54 <UART_SetConfig+0x4c4>)
 8007e26:	61bb      	str	r3, [r7, #24]
        break;
 8007e28:	e00c      	b.n	8007e44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e2a:	f7fd fa63 	bl	80052f4 <HAL_RCC_GetSysClockFreq>
 8007e2e:	61b8      	str	r0, [r7, #24]
        break;
 8007e30:	e008      	b.n	8007e44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e36:	61bb      	str	r3, [r7, #24]
        break;
 8007e38:	e004      	b.n	8007e44 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	77bb      	strb	r3, [r7, #30]
        break;
 8007e42:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007e44:	69bb      	ldr	r3, [r7, #24]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d074      	beq.n	8007f34 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007e4a:	69bb      	ldr	r3, [r7, #24]
 8007e4c:	005a      	lsls	r2, r3, #1
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	085b      	lsrs	r3, r3, #1
 8007e54:	441a      	add	r2, r3
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e5e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	2b0f      	cmp	r3, #15
 8007e64:	d916      	bls.n	8007e94 <UART_SetConfig+0x404>
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e6c:	d212      	bcs.n	8007e94 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	f023 030f 	bic.w	r3, r3, #15
 8007e76:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	085b      	lsrs	r3, r3, #1
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	f003 0307 	and.w	r3, r3, #7
 8007e82:	b29a      	uxth	r2, r3
 8007e84:	89fb      	ldrh	r3, [r7, #14]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	89fa      	ldrh	r2, [r7, #14]
 8007e90:	60da      	str	r2, [r3, #12]
 8007e92:	e04f      	b.n	8007f34 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007e94:	2301      	movs	r3, #1
 8007e96:	77bb      	strb	r3, [r7, #30]
 8007e98:	e04c      	b.n	8007f34 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007e9a:	7ffb      	ldrb	r3, [r7, #31]
 8007e9c:	2b08      	cmp	r3, #8
 8007e9e:	d828      	bhi.n	8007ef2 <UART_SetConfig+0x462>
 8007ea0:	a201      	add	r2, pc, #4	; (adr r2, 8007ea8 <UART_SetConfig+0x418>)
 8007ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ea6:	bf00      	nop
 8007ea8:	08007ecd 	.word	0x08007ecd
 8007eac:	08007ed5 	.word	0x08007ed5
 8007eb0:	08007edd 	.word	0x08007edd
 8007eb4:	08007ef3 	.word	0x08007ef3
 8007eb8:	08007ee3 	.word	0x08007ee3
 8007ebc:	08007ef3 	.word	0x08007ef3
 8007ec0:	08007ef3 	.word	0x08007ef3
 8007ec4:	08007ef3 	.word	0x08007ef3
 8007ec8:	08007eeb 	.word	0x08007eeb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ecc:	f7fd fb24 	bl	8005518 <HAL_RCC_GetPCLK1Freq>
 8007ed0:	61b8      	str	r0, [r7, #24]
        break;
 8007ed2:	e013      	b.n	8007efc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ed4:	f7fd fb34 	bl	8005540 <HAL_RCC_GetPCLK2Freq>
 8007ed8:	61b8      	str	r0, [r7, #24]
        break;
 8007eda:	e00f      	b.n	8007efc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007edc:	4b1d      	ldr	r3, [pc, #116]	; (8007f54 <UART_SetConfig+0x4c4>)
 8007ede:	61bb      	str	r3, [r7, #24]
        break;
 8007ee0:	e00c      	b.n	8007efc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ee2:	f7fd fa07 	bl	80052f4 <HAL_RCC_GetSysClockFreq>
 8007ee6:	61b8      	str	r0, [r7, #24]
        break;
 8007ee8:	e008      	b.n	8007efc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007eea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007eee:	61bb      	str	r3, [r7, #24]
        break;
 8007ef0:	e004      	b.n	8007efc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	77bb      	strb	r3, [r7, #30]
        break;
 8007efa:	bf00      	nop
    }

    if (pclk != 0U)
 8007efc:	69bb      	ldr	r3, [r7, #24]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d018      	beq.n	8007f34 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	085a      	lsrs	r2, r3, #1
 8007f08:	69bb      	ldr	r3, [r7, #24]
 8007f0a:	441a      	add	r2, r3
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f14:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	2b0f      	cmp	r3, #15
 8007f1a:	d909      	bls.n	8007f30 <UART_SetConfig+0x4a0>
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f22:	d205      	bcs.n	8007f30 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	b29a      	uxth	r2, r3
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	60da      	str	r2, [r3, #12]
 8007f2e:	e001      	b.n	8007f34 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007f30:	2301      	movs	r3, #1
 8007f32:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2200      	movs	r2, #0
 8007f38:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007f40:	7fbb      	ldrb	r3, [r7, #30]
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3720      	adds	r7, #32
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	bf00      	nop
 8007f4c:	40007c00 	.word	0x40007c00
 8007f50:	40023800 	.word	0x40023800
 8007f54:	00f42400 	.word	0x00f42400

08007f58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f64:	f003 0301 	and.w	r3, r3, #1
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d00a      	beq.n	8007f82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	430a      	orrs	r2, r1
 8007f80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f86:	f003 0302 	and.w	r3, r3, #2
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d00a      	beq.n	8007fa4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	430a      	orrs	r2, r1
 8007fa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa8:	f003 0304 	and.w	r3, r3, #4
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d00a      	beq.n	8007fc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	430a      	orrs	r2, r1
 8007fc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fca:	f003 0308 	and.w	r3, r3, #8
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d00a      	beq.n	8007fe8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	430a      	orrs	r2, r1
 8007fe6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fec:	f003 0310 	and.w	r3, r3, #16
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d00a      	beq.n	800800a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	689b      	ldr	r3, [r3, #8]
 8007ffa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	430a      	orrs	r2, r1
 8008008:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800800e:	f003 0320 	and.w	r3, r3, #32
 8008012:	2b00      	cmp	r3, #0
 8008014:	d00a      	beq.n	800802c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	430a      	orrs	r2, r1
 800802a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008034:	2b00      	cmp	r3, #0
 8008036:	d01a      	beq.n	800806e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	430a      	orrs	r2, r1
 800804c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008052:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008056:	d10a      	bne.n	800806e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	430a      	orrs	r2, r1
 800806c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008076:	2b00      	cmp	r3, #0
 8008078:	d00a      	beq.n	8008090 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	430a      	orrs	r2, r1
 800808e:	605a      	str	r2, [r3, #4]
  }
}
 8008090:	bf00      	nop
 8008092:	370c      	adds	r7, #12
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr

0800809c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b086      	sub	sp, #24
 80080a0:	af02      	add	r7, sp, #8
 80080a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2200      	movs	r2, #0
 80080a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80080ac:	f7fb fad0 	bl	8003650 <HAL_GetTick>
 80080b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f003 0308 	and.w	r3, r3, #8
 80080bc:	2b08      	cmp	r3, #8
 80080be:	d10e      	bne.n	80080de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80080c4:	9300      	str	r3, [sp, #0]
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2200      	movs	r2, #0
 80080ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 f831 	bl	8008136 <UART_WaitOnFlagUntilTimeout>
 80080d4:	4603      	mov	r3, r0
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d001      	beq.n	80080de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80080da:	2303      	movs	r3, #3
 80080dc:	e027      	b.n	800812e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f003 0304 	and.w	r3, r3, #4
 80080e8:	2b04      	cmp	r3, #4
 80080ea:	d10e      	bne.n	800810a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80080f0:	9300      	str	r3, [sp, #0]
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2200      	movs	r2, #0
 80080f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 f81b 	bl	8008136 <UART_WaitOnFlagUntilTimeout>
 8008100:	4603      	mov	r3, r0
 8008102:	2b00      	cmp	r3, #0
 8008104:	d001      	beq.n	800810a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008106:	2303      	movs	r3, #3
 8008108:	e011      	b.n	800812e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2220      	movs	r2, #32
 800810e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2220      	movs	r2, #32
 8008114:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2200      	movs	r2, #0
 800811c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2200      	movs	r2, #0
 8008122:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2200      	movs	r2, #0
 8008128:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800812c:	2300      	movs	r3, #0
}
 800812e:	4618      	mov	r0, r3
 8008130:	3710      	adds	r7, #16
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}

08008136 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008136:	b580      	push	{r7, lr}
 8008138:	b09c      	sub	sp, #112	; 0x70
 800813a:	af00      	add	r7, sp, #0
 800813c:	60f8      	str	r0, [r7, #12]
 800813e:	60b9      	str	r1, [r7, #8]
 8008140:	603b      	str	r3, [r7, #0]
 8008142:	4613      	mov	r3, r2
 8008144:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008146:	e0a7      	b.n	8008298 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008148:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800814a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800814e:	f000 80a3 	beq.w	8008298 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008152:	f7fb fa7d 	bl	8003650 <HAL_GetTick>
 8008156:	4602      	mov	r2, r0
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	1ad3      	subs	r3, r2, r3
 800815c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800815e:	429a      	cmp	r2, r3
 8008160:	d302      	bcc.n	8008168 <UART_WaitOnFlagUntilTimeout+0x32>
 8008162:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008164:	2b00      	cmp	r3, #0
 8008166:	d13f      	bne.n	80081e8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800816e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008170:	e853 3f00 	ldrex	r3, [r3]
 8008174:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008176:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008178:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800817c:	667b      	str	r3, [r7, #100]	; 0x64
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	461a      	mov	r2, r3
 8008184:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008186:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008188:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800818a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800818c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800818e:	e841 2300 	strex	r3, r2, [r1]
 8008192:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008194:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008196:	2b00      	cmp	r3, #0
 8008198:	d1e6      	bne.n	8008168 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	3308      	adds	r3, #8
 80081a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081a4:	e853 3f00 	ldrex	r3, [r3]
 80081a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80081aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ac:	f023 0301 	bic.w	r3, r3, #1
 80081b0:	663b      	str	r3, [r7, #96]	; 0x60
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	3308      	adds	r3, #8
 80081b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80081ba:	64ba      	str	r2, [r7, #72]	; 0x48
 80081bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80081c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081c2:	e841 2300 	strex	r3, r2, [r1]
 80081c6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80081c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d1e5      	bne.n	800819a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2220      	movs	r2, #32
 80081d2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2220      	movs	r2, #32
 80081d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	2200      	movs	r2, #0
 80081e0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80081e4:	2303      	movs	r3, #3
 80081e6:	e068      	b.n	80082ba <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f003 0304 	and.w	r3, r3, #4
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d050      	beq.n	8008298 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	69db      	ldr	r3, [r3, #28]
 80081fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008200:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008204:	d148      	bne.n	8008298 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800820e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008218:	e853 3f00 	ldrex	r3, [r3]
 800821c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800821e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008220:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008224:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	461a      	mov	r2, r3
 800822c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800822e:	637b      	str	r3, [r7, #52]	; 0x34
 8008230:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008232:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008234:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008236:	e841 2300 	strex	r3, r2, [r1]
 800823a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800823c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800823e:	2b00      	cmp	r3, #0
 8008240:	d1e6      	bne.n	8008210 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	3308      	adds	r3, #8
 8008248:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	e853 3f00 	ldrex	r3, [r3]
 8008250:	613b      	str	r3, [r7, #16]
   return(result);
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	f023 0301 	bic.w	r3, r3, #1
 8008258:	66bb      	str	r3, [r7, #104]	; 0x68
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	3308      	adds	r3, #8
 8008260:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008262:	623a      	str	r2, [r7, #32]
 8008264:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008266:	69f9      	ldr	r1, [r7, #28]
 8008268:	6a3a      	ldr	r2, [r7, #32]
 800826a:	e841 2300 	strex	r3, r2, [r1]
 800826e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008270:	69bb      	ldr	r3, [r7, #24]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d1e5      	bne.n	8008242 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2220      	movs	r2, #32
 800827a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2220      	movs	r2, #32
 8008280:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2220      	movs	r2, #32
 8008288:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2200      	movs	r2, #0
 8008290:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008294:	2303      	movs	r3, #3
 8008296:	e010      	b.n	80082ba <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	69da      	ldr	r2, [r3, #28]
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	4013      	ands	r3, r2
 80082a2:	68ba      	ldr	r2, [r7, #8]
 80082a4:	429a      	cmp	r2, r3
 80082a6:	bf0c      	ite	eq
 80082a8:	2301      	moveq	r3, #1
 80082aa:	2300      	movne	r3, #0
 80082ac:	b2db      	uxtb	r3, r3
 80082ae:	461a      	mov	r2, r3
 80082b0:	79fb      	ldrb	r3, [r7, #7]
 80082b2:	429a      	cmp	r2, r3
 80082b4:	f43f af48 	beq.w	8008148 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80082b8:	2300      	movs	r3, #0
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3770      	adds	r7, #112	; 0x70
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}

080082c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80082c2:	b480      	push	{r7}
 80082c4:	b095      	sub	sp, #84	; 0x54
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082d2:	e853 3f00 	ldrex	r3, [r3]
 80082d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80082d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80082de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	461a      	mov	r2, r3
 80082e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082e8:	643b      	str	r3, [r7, #64]	; 0x40
 80082ea:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80082ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80082f0:	e841 2300 	strex	r3, r2, [r1]
 80082f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80082f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d1e6      	bne.n	80082ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	3308      	adds	r3, #8
 8008302:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008304:	6a3b      	ldr	r3, [r7, #32]
 8008306:	e853 3f00 	ldrex	r3, [r3]
 800830a:	61fb      	str	r3, [r7, #28]
   return(result);
 800830c:	69fb      	ldr	r3, [r7, #28]
 800830e:	f023 0301 	bic.w	r3, r3, #1
 8008312:	64bb      	str	r3, [r7, #72]	; 0x48
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	3308      	adds	r3, #8
 800831a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800831c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800831e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008320:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008322:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008324:	e841 2300 	strex	r3, r2, [r1]
 8008328:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800832a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832c:	2b00      	cmp	r3, #0
 800832e:	d1e5      	bne.n	80082fc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008334:	2b01      	cmp	r3, #1
 8008336:	d118      	bne.n	800836a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	e853 3f00 	ldrex	r3, [r3]
 8008344:	60bb      	str	r3, [r7, #8]
   return(result);
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	f023 0310 	bic.w	r3, r3, #16
 800834c:	647b      	str	r3, [r7, #68]	; 0x44
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	461a      	mov	r2, r3
 8008354:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008356:	61bb      	str	r3, [r7, #24]
 8008358:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800835a:	6979      	ldr	r1, [r7, #20]
 800835c:	69ba      	ldr	r2, [r7, #24]
 800835e:	e841 2300 	strex	r3, r2, [r1]
 8008362:	613b      	str	r3, [r7, #16]
   return(result);
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d1e6      	bne.n	8008338 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2220      	movs	r2, #32
 800836e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2200      	movs	r2, #0
 800837c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800837e:	bf00      	nop
 8008380:	3754      	adds	r7, #84	; 0x54
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr

0800838a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800838a:	b580      	push	{r7, lr}
 800838c:	b084      	sub	sp, #16
 800838e:	af00      	add	r7, sp, #0
 8008390:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008396:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2200      	movs	r2, #0
 800839c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2200      	movs	r2, #0
 80083a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80083a8:	68f8      	ldr	r0, [r7, #12]
 80083aa:	f7ff fb51 	bl	8007a50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083ae:	bf00      	nop
 80083b0:	3710      	adds	r7, #16
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}

080083b6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80083b6:	b580      	push	{r7, lr}
 80083b8:	b088      	sub	sp, #32
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	e853 3f00 	ldrex	r3, [r3]
 80083ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083d2:	61fb      	str	r3, [r7, #28]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	461a      	mov	r2, r3
 80083da:	69fb      	ldr	r3, [r7, #28]
 80083dc:	61bb      	str	r3, [r7, #24]
 80083de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e0:	6979      	ldr	r1, [r7, #20]
 80083e2:	69ba      	ldr	r2, [r7, #24]
 80083e4:	e841 2300 	strex	r3, r2, [r1]
 80083e8:	613b      	str	r3, [r7, #16]
   return(result);
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d1e6      	bne.n	80083be <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2220      	movs	r2, #32
 80083f4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2200      	movs	r2, #0
 80083fa:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f7ff fb1d 	bl	8007a3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008402:	bf00      	nop
 8008404:	3720      	adds	r7, #32
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
	...

0800840c <rand>:
 800840c:	4b16      	ldr	r3, [pc, #88]	; (8008468 <rand+0x5c>)
 800840e:	b510      	push	{r4, lr}
 8008410:	681c      	ldr	r4, [r3, #0]
 8008412:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008414:	b9b3      	cbnz	r3, 8008444 <rand+0x38>
 8008416:	2018      	movs	r0, #24
 8008418:	f001 fc76 	bl	8009d08 <malloc>
 800841c:	4602      	mov	r2, r0
 800841e:	6320      	str	r0, [r4, #48]	; 0x30
 8008420:	b920      	cbnz	r0, 800842c <rand+0x20>
 8008422:	4b12      	ldr	r3, [pc, #72]	; (800846c <rand+0x60>)
 8008424:	4812      	ldr	r0, [pc, #72]	; (8008470 <rand+0x64>)
 8008426:	2152      	movs	r1, #82	; 0x52
 8008428:	f000 fe0e 	bl	8009048 <__assert_func>
 800842c:	4911      	ldr	r1, [pc, #68]	; (8008474 <rand+0x68>)
 800842e:	4b12      	ldr	r3, [pc, #72]	; (8008478 <rand+0x6c>)
 8008430:	e9c0 1300 	strd	r1, r3, [r0]
 8008434:	4b11      	ldr	r3, [pc, #68]	; (800847c <rand+0x70>)
 8008436:	6083      	str	r3, [r0, #8]
 8008438:	230b      	movs	r3, #11
 800843a:	8183      	strh	r3, [r0, #12]
 800843c:	2100      	movs	r1, #0
 800843e:	2001      	movs	r0, #1
 8008440:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8008444:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008446:	480e      	ldr	r0, [pc, #56]	; (8008480 <rand+0x74>)
 8008448:	690b      	ldr	r3, [r1, #16]
 800844a:	694c      	ldr	r4, [r1, #20]
 800844c:	4a0d      	ldr	r2, [pc, #52]	; (8008484 <rand+0x78>)
 800844e:	4358      	muls	r0, r3
 8008450:	fb02 0004 	mla	r0, r2, r4, r0
 8008454:	fba3 3202 	umull	r3, r2, r3, r2
 8008458:	3301      	adds	r3, #1
 800845a:	eb40 0002 	adc.w	r0, r0, r2
 800845e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8008462:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008466:	bd10      	pop	{r4, pc}
 8008468:	2000047c 	.word	0x2000047c
 800846c:	0800b378 	.word	0x0800b378
 8008470:	0800b38f 	.word	0x0800b38f
 8008474:	abcd330e 	.word	0xabcd330e
 8008478:	e66d1234 	.word	0xe66d1234
 800847c:	0005deec 	.word	0x0005deec
 8008480:	5851f42d 	.word	0x5851f42d
 8008484:	4c957f2d 	.word	0x4c957f2d

08008488 <__cvt>:
 8008488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800848a:	ed2d 8b02 	vpush	{d8}
 800848e:	eeb0 8b40 	vmov.f64	d8, d0
 8008492:	b085      	sub	sp, #20
 8008494:	4617      	mov	r7, r2
 8008496:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8008498:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800849a:	ee18 2a90 	vmov	r2, s17
 800849e:	f025 0520 	bic.w	r5, r5, #32
 80084a2:	2a00      	cmp	r2, #0
 80084a4:	bfb6      	itet	lt
 80084a6:	222d      	movlt	r2, #45	; 0x2d
 80084a8:	2200      	movge	r2, #0
 80084aa:	eeb1 8b40 	vneglt.f64	d8, d0
 80084ae:	2d46      	cmp	r5, #70	; 0x46
 80084b0:	460c      	mov	r4, r1
 80084b2:	701a      	strb	r2, [r3, #0]
 80084b4:	d004      	beq.n	80084c0 <__cvt+0x38>
 80084b6:	2d45      	cmp	r5, #69	; 0x45
 80084b8:	d100      	bne.n	80084bc <__cvt+0x34>
 80084ba:	3401      	adds	r4, #1
 80084bc:	2102      	movs	r1, #2
 80084be:	e000      	b.n	80084c2 <__cvt+0x3a>
 80084c0:	2103      	movs	r1, #3
 80084c2:	ab03      	add	r3, sp, #12
 80084c4:	9301      	str	r3, [sp, #4]
 80084c6:	ab02      	add	r3, sp, #8
 80084c8:	9300      	str	r3, [sp, #0]
 80084ca:	4622      	mov	r2, r4
 80084cc:	4633      	mov	r3, r6
 80084ce:	eeb0 0b48 	vmov.f64	d0, d8
 80084d2:	f000 fe61 	bl	8009198 <_dtoa_r>
 80084d6:	2d47      	cmp	r5, #71	; 0x47
 80084d8:	d101      	bne.n	80084de <__cvt+0x56>
 80084da:	07fb      	lsls	r3, r7, #31
 80084dc:	d51a      	bpl.n	8008514 <__cvt+0x8c>
 80084de:	2d46      	cmp	r5, #70	; 0x46
 80084e0:	eb00 0204 	add.w	r2, r0, r4
 80084e4:	d10c      	bne.n	8008500 <__cvt+0x78>
 80084e6:	7803      	ldrb	r3, [r0, #0]
 80084e8:	2b30      	cmp	r3, #48	; 0x30
 80084ea:	d107      	bne.n	80084fc <__cvt+0x74>
 80084ec:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80084f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084f4:	bf1c      	itt	ne
 80084f6:	f1c4 0401 	rsbne	r4, r4, #1
 80084fa:	6034      	strne	r4, [r6, #0]
 80084fc:	6833      	ldr	r3, [r6, #0]
 80084fe:	441a      	add	r2, r3
 8008500:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008508:	bf08      	it	eq
 800850a:	9203      	streq	r2, [sp, #12]
 800850c:	2130      	movs	r1, #48	; 0x30
 800850e:	9b03      	ldr	r3, [sp, #12]
 8008510:	4293      	cmp	r3, r2
 8008512:	d307      	bcc.n	8008524 <__cvt+0x9c>
 8008514:	9b03      	ldr	r3, [sp, #12]
 8008516:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008518:	1a1b      	subs	r3, r3, r0
 800851a:	6013      	str	r3, [r2, #0]
 800851c:	b005      	add	sp, #20
 800851e:	ecbd 8b02 	vpop	{d8}
 8008522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008524:	1c5c      	adds	r4, r3, #1
 8008526:	9403      	str	r4, [sp, #12]
 8008528:	7019      	strb	r1, [r3, #0]
 800852a:	e7f0      	b.n	800850e <__cvt+0x86>

0800852c <__exponent>:
 800852c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800852e:	4603      	mov	r3, r0
 8008530:	2900      	cmp	r1, #0
 8008532:	bfb8      	it	lt
 8008534:	4249      	neglt	r1, r1
 8008536:	f803 2b02 	strb.w	r2, [r3], #2
 800853a:	bfb4      	ite	lt
 800853c:	222d      	movlt	r2, #45	; 0x2d
 800853e:	222b      	movge	r2, #43	; 0x2b
 8008540:	2909      	cmp	r1, #9
 8008542:	7042      	strb	r2, [r0, #1]
 8008544:	dd2a      	ble.n	800859c <__exponent+0x70>
 8008546:	f10d 0207 	add.w	r2, sp, #7
 800854a:	4617      	mov	r7, r2
 800854c:	260a      	movs	r6, #10
 800854e:	4694      	mov	ip, r2
 8008550:	fb91 f5f6 	sdiv	r5, r1, r6
 8008554:	fb06 1415 	mls	r4, r6, r5, r1
 8008558:	3430      	adds	r4, #48	; 0x30
 800855a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800855e:	460c      	mov	r4, r1
 8008560:	2c63      	cmp	r4, #99	; 0x63
 8008562:	f102 32ff 	add.w	r2, r2, #4294967295
 8008566:	4629      	mov	r1, r5
 8008568:	dcf1      	bgt.n	800854e <__exponent+0x22>
 800856a:	3130      	adds	r1, #48	; 0x30
 800856c:	f1ac 0402 	sub.w	r4, ip, #2
 8008570:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008574:	1c41      	adds	r1, r0, #1
 8008576:	4622      	mov	r2, r4
 8008578:	42ba      	cmp	r2, r7
 800857a:	d30a      	bcc.n	8008592 <__exponent+0x66>
 800857c:	f10d 0209 	add.w	r2, sp, #9
 8008580:	eba2 020c 	sub.w	r2, r2, ip
 8008584:	42bc      	cmp	r4, r7
 8008586:	bf88      	it	hi
 8008588:	2200      	movhi	r2, #0
 800858a:	4413      	add	r3, r2
 800858c:	1a18      	subs	r0, r3, r0
 800858e:	b003      	add	sp, #12
 8008590:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008592:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008596:	f801 5f01 	strb.w	r5, [r1, #1]!
 800859a:	e7ed      	b.n	8008578 <__exponent+0x4c>
 800859c:	2330      	movs	r3, #48	; 0x30
 800859e:	3130      	adds	r1, #48	; 0x30
 80085a0:	7083      	strb	r3, [r0, #2]
 80085a2:	70c1      	strb	r1, [r0, #3]
 80085a4:	1d03      	adds	r3, r0, #4
 80085a6:	e7f1      	b.n	800858c <__exponent+0x60>

080085a8 <_printf_float>:
 80085a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085ac:	b08b      	sub	sp, #44	; 0x2c
 80085ae:	460c      	mov	r4, r1
 80085b0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80085b4:	4616      	mov	r6, r2
 80085b6:	461f      	mov	r7, r3
 80085b8:	4605      	mov	r5, r0
 80085ba:	f000 fccd 	bl	8008f58 <_localeconv_r>
 80085be:	f8d0 b000 	ldr.w	fp, [r0]
 80085c2:	4658      	mov	r0, fp
 80085c4:	f7f7 fe8c 	bl	80002e0 <strlen>
 80085c8:	2300      	movs	r3, #0
 80085ca:	9308      	str	r3, [sp, #32]
 80085cc:	f8d8 3000 	ldr.w	r3, [r8]
 80085d0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80085d4:	6822      	ldr	r2, [r4, #0]
 80085d6:	3307      	adds	r3, #7
 80085d8:	f023 0307 	bic.w	r3, r3, #7
 80085dc:	f103 0108 	add.w	r1, r3, #8
 80085e0:	f8c8 1000 	str.w	r1, [r8]
 80085e4:	ed93 0b00 	vldr	d0, [r3]
 80085e8:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8008848 <_printf_float+0x2a0>
 80085ec:	eeb0 7bc0 	vabs.f64	d7, d0
 80085f0:	eeb4 7b46 	vcmp.f64	d7, d6
 80085f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085f8:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 80085fc:	4682      	mov	sl, r0
 80085fe:	dd24      	ble.n	800864a <_printf_float+0xa2>
 8008600:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008608:	d502      	bpl.n	8008610 <_printf_float+0x68>
 800860a:	232d      	movs	r3, #45	; 0x2d
 800860c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008610:	498f      	ldr	r1, [pc, #572]	; (8008850 <_printf_float+0x2a8>)
 8008612:	4b90      	ldr	r3, [pc, #576]	; (8008854 <_printf_float+0x2ac>)
 8008614:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008618:	bf94      	ite	ls
 800861a:	4688      	movls	r8, r1
 800861c:	4698      	movhi	r8, r3
 800861e:	2303      	movs	r3, #3
 8008620:	6123      	str	r3, [r4, #16]
 8008622:	f022 0204 	bic.w	r2, r2, #4
 8008626:	2300      	movs	r3, #0
 8008628:	6022      	str	r2, [r4, #0]
 800862a:	9304      	str	r3, [sp, #16]
 800862c:	9700      	str	r7, [sp, #0]
 800862e:	4633      	mov	r3, r6
 8008630:	aa09      	add	r2, sp, #36	; 0x24
 8008632:	4621      	mov	r1, r4
 8008634:	4628      	mov	r0, r5
 8008636:	f000 f9d1 	bl	80089dc <_printf_common>
 800863a:	3001      	adds	r0, #1
 800863c:	f040 808a 	bne.w	8008754 <_printf_float+0x1ac>
 8008640:	f04f 30ff 	mov.w	r0, #4294967295
 8008644:	b00b      	add	sp, #44	; 0x2c
 8008646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800864a:	eeb4 0b40 	vcmp.f64	d0, d0
 800864e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008652:	d709      	bvc.n	8008668 <_printf_float+0xc0>
 8008654:	ee10 3a90 	vmov	r3, s1
 8008658:	2b00      	cmp	r3, #0
 800865a:	bfbc      	itt	lt
 800865c:	232d      	movlt	r3, #45	; 0x2d
 800865e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008662:	497d      	ldr	r1, [pc, #500]	; (8008858 <_printf_float+0x2b0>)
 8008664:	4b7d      	ldr	r3, [pc, #500]	; (800885c <_printf_float+0x2b4>)
 8008666:	e7d5      	b.n	8008614 <_printf_float+0x6c>
 8008668:	6863      	ldr	r3, [r4, #4]
 800866a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800866e:	9104      	str	r1, [sp, #16]
 8008670:	1c59      	adds	r1, r3, #1
 8008672:	d13c      	bne.n	80086ee <_printf_float+0x146>
 8008674:	2306      	movs	r3, #6
 8008676:	6063      	str	r3, [r4, #4]
 8008678:	2300      	movs	r3, #0
 800867a:	9303      	str	r3, [sp, #12]
 800867c:	ab08      	add	r3, sp, #32
 800867e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8008682:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008686:	ab07      	add	r3, sp, #28
 8008688:	6861      	ldr	r1, [r4, #4]
 800868a:	9300      	str	r3, [sp, #0]
 800868c:	6022      	str	r2, [r4, #0]
 800868e:	f10d 031b 	add.w	r3, sp, #27
 8008692:	4628      	mov	r0, r5
 8008694:	f7ff fef8 	bl	8008488 <__cvt>
 8008698:	9b04      	ldr	r3, [sp, #16]
 800869a:	9907      	ldr	r1, [sp, #28]
 800869c:	2b47      	cmp	r3, #71	; 0x47
 800869e:	4680      	mov	r8, r0
 80086a0:	d108      	bne.n	80086b4 <_printf_float+0x10c>
 80086a2:	1cc8      	adds	r0, r1, #3
 80086a4:	db02      	blt.n	80086ac <_printf_float+0x104>
 80086a6:	6863      	ldr	r3, [r4, #4]
 80086a8:	4299      	cmp	r1, r3
 80086aa:	dd41      	ble.n	8008730 <_printf_float+0x188>
 80086ac:	f1a9 0902 	sub.w	r9, r9, #2
 80086b0:	fa5f f989 	uxtb.w	r9, r9
 80086b4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80086b8:	d820      	bhi.n	80086fc <_printf_float+0x154>
 80086ba:	3901      	subs	r1, #1
 80086bc:	464a      	mov	r2, r9
 80086be:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80086c2:	9107      	str	r1, [sp, #28]
 80086c4:	f7ff ff32 	bl	800852c <__exponent>
 80086c8:	9a08      	ldr	r2, [sp, #32]
 80086ca:	9004      	str	r0, [sp, #16]
 80086cc:	1813      	adds	r3, r2, r0
 80086ce:	2a01      	cmp	r2, #1
 80086d0:	6123      	str	r3, [r4, #16]
 80086d2:	dc02      	bgt.n	80086da <_printf_float+0x132>
 80086d4:	6822      	ldr	r2, [r4, #0]
 80086d6:	07d2      	lsls	r2, r2, #31
 80086d8:	d501      	bpl.n	80086de <_printf_float+0x136>
 80086da:	3301      	adds	r3, #1
 80086dc:	6123      	str	r3, [r4, #16]
 80086de:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d0a2      	beq.n	800862c <_printf_float+0x84>
 80086e6:	232d      	movs	r3, #45	; 0x2d
 80086e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086ec:	e79e      	b.n	800862c <_printf_float+0x84>
 80086ee:	9904      	ldr	r1, [sp, #16]
 80086f0:	2947      	cmp	r1, #71	; 0x47
 80086f2:	d1c1      	bne.n	8008678 <_printf_float+0xd0>
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d1bf      	bne.n	8008678 <_printf_float+0xd0>
 80086f8:	2301      	movs	r3, #1
 80086fa:	e7bc      	b.n	8008676 <_printf_float+0xce>
 80086fc:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008700:	d118      	bne.n	8008734 <_printf_float+0x18c>
 8008702:	2900      	cmp	r1, #0
 8008704:	6863      	ldr	r3, [r4, #4]
 8008706:	dd0b      	ble.n	8008720 <_printf_float+0x178>
 8008708:	6121      	str	r1, [r4, #16]
 800870a:	b913      	cbnz	r3, 8008712 <_printf_float+0x16a>
 800870c:	6822      	ldr	r2, [r4, #0]
 800870e:	07d0      	lsls	r0, r2, #31
 8008710:	d502      	bpl.n	8008718 <_printf_float+0x170>
 8008712:	3301      	adds	r3, #1
 8008714:	440b      	add	r3, r1
 8008716:	6123      	str	r3, [r4, #16]
 8008718:	2300      	movs	r3, #0
 800871a:	65a1      	str	r1, [r4, #88]	; 0x58
 800871c:	9304      	str	r3, [sp, #16]
 800871e:	e7de      	b.n	80086de <_printf_float+0x136>
 8008720:	b913      	cbnz	r3, 8008728 <_printf_float+0x180>
 8008722:	6822      	ldr	r2, [r4, #0]
 8008724:	07d2      	lsls	r2, r2, #31
 8008726:	d501      	bpl.n	800872c <_printf_float+0x184>
 8008728:	3302      	adds	r3, #2
 800872a:	e7f4      	b.n	8008716 <_printf_float+0x16e>
 800872c:	2301      	movs	r3, #1
 800872e:	e7f2      	b.n	8008716 <_printf_float+0x16e>
 8008730:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008734:	9b08      	ldr	r3, [sp, #32]
 8008736:	4299      	cmp	r1, r3
 8008738:	db05      	blt.n	8008746 <_printf_float+0x19e>
 800873a:	6823      	ldr	r3, [r4, #0]
 800873c:	6121      	str	r1, [r4, #16]
 800873e:	07d8      	lsls	r0, r3, #31
 8008740:	d5ea      	bpl.n	8008718 <_printf_float+0x170>
 8008742:	1c4b      	adds	r3, r1, #1
 8008744:	e7e7      	b.n	8008716 <_printf_float+0x16e>
 8008746:	2900      	cmp	r1, #0
 8008748:	bfd4      	ite	le
 800874a:	f1c1 0202 	rsble	r2, r1, #2
 800874e:	2201      	movgt	r2, #1
 8008750:	4413      	add	r3, r2
 8008752:	e7e0      	b.n	8008716 <_printf_float+0x16e>
 8008754:	6823      	ldr	r3, [r4, #0]
 8008756:	055a      	lsls	r2, r3, #21
 8008758:	d407      	bmi.n	800876a <_printf_float+0x1c2>
 800875a:	6923      	ldr	r3, [r4, #16]
 800875c:	4642      	mov	r2, r8
 800875e:	4631      	mov	r1, r6
 8008760:	4628      	mov	r0, r5
 8008762:	47b8      	blx	r7
 8008764:	3001      	adds	r0, #1
 8008766:	d12a      	bne.n	80087be <_printf_float+0x216>
 8008768:	e76a      	b.n	8008640 <_printf_float+0x98>
 800876a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800876e:	f240 80e0 	bls.w	8008932 <_printf_float+0x38a>
 8008772:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008776:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800877a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800877e:	d133      	bne.n	80087e8 <_printf_float+0x240>
 8008780:	4a37      	ldr	r2, [pc, #220]	; (8008860 <_printf_float+0x2b8>)
 8008782:	2301      	movs	r3, #1
 8008784:	4631      	mov	r1, r6
 8008786:	4628      	mov	r0, r5
 8008788:	47b8      	blx	r7
 800878a:	3001      	adds	r0, #1
 800878c:	f43f af58 	beq.w	8008640 <_printf_float+0x98>
 8008790:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008794:	429a      	cmp	r2, r3
 8008796:	db02      	blt.n	800879e <_printf_float+0x1f6>
 8008798:	6823      	ldr	r3, [r4, #0]
 800879a:	07d8      	lsls	r0, r3, #31
 800879c:	d50f      	bpl.n	80087be <_printf_float+0x216>
 800879e:	4653      	mov	r3, sl
 80087a0:	465a      	mov	r2, fp
 80087a2:	4631      	mov	r1, r6
 80087a4:	4628      	mov	r0, r5
 80087a6:	47b8      	blx	r7
 80087a8:	3001      	adds	r0, #1
 80087aa:	f43f af49 	beq.w	8008640 <_printf_float+0x98>
 80087ae:	f04f 0800 	mov.w	r8, #0
 80087b2:	f104 091a 	add.w	r9, r4, #26
 80087b6:	9b08      	ldr	r3, [sp, #32]
 80087b8:	3b01      	subs	r3, #1
 80087ba:	4543      	cmp	r3, r8
 80087bc:	dc09      	bgt.n	80087d2 <_printf_float+0x22a>
 80087be:	6823      	ldr	r3, [r4, #0]
 80087c0:	079b      	lsls	r3, r3, #30
 80087c2:	f100 8106 	bmi.w	80089d2 <_printf_float+0x42a>
 80087c6:	68e0      	ldr	r0, [r4, #12]
 80087c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087ca:	4298      	cmp	r0, r3
 80087cc:	bfb8      	it	lt
 80087ce:	4618      	movlt	r0, r3
 80087d0:	e738      	b.n	8008644 <_printf_float+0x9c>
 80087d2:	2301      	movs	r3, #1
 80087d4:	464a      	mov	r2, r9
 80087d6:	4631      	mov	r1, r6
 80087d8:	4628      	mov	r0, r5
 80087da:	47b8      	blx	r7
 80087dc:	3001      	adds	r0, #1
 80087de:	f43f af2f 	beq.w	8008640 <_printf_float+0x98>
 80087e2:	f108 0801 	add.w	r8, r8, #1
 80087e6:	e7e6      	b.n	80087b6 <_printf_float+0x20e>
 80087e8:	9b07      	ldr	r3, [sp, #28]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	dc3a      	bgt.n	8008864 <_printf_float+0x2bc>
 80087ee:	4a1c      	ldr	r2, [pc, #112]	; (8008860 <_printf_float+0x2b8>)
 80087f0:	2301      	movs	r3, #1
 80087f2:	4631      	mov	r1, r6
 80087f4:	4628      	mov	r0, r5
 80087f6:	47b8      	blx	r7
 80087f8:	3001      	adds	r0, #1
 80087fa:	f43f af21 	beq.w	8008640 <_printf_float+0x98>
 80087fe:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8008802:	4313      	orrs	r3, r2
 8008804:	d102      	bne.n	800880c <_printf_float+0x264>
 8008806:	6823      	ldr	r3, [r4, #0]
 8008808:	07d9      	lsls	r1, r3, #31
 800880a:	d5d8      	bpl.n	80087be <_printf_float+0x216>
 800880c:	4653      	mov	r3, sl
 800880e:	465a      	mov	r2, fp
 8008810:	4631      	mov	r1, r6
 8008812:	4628      	mov	r0, r5
 8008814:	47b8      	blx	r7
 8008816:	3001      	adds	r0, #1
 8008818:	f43f af12 	beq.w	8008640 <_printf_float+0x98>
 800881c:	f04f 0900 	mov.w	r9, #0
 8008820:	f104 0a1a 	add.w	sl, r4, #26
 8008824:	9b07      	ldr	r3, [sp, #28]
 8008826:	425b      	negs	r3, r3
 8008828:	454b      	cmp	r3, r9
 800882a:	dc01      	bgt.n	8008830 <_printf_float+0x288>
 800882c:	9b08      	ldr	r3, [sp, #32]
 800882e:	e795      	b.n	800875c <_printf_float+0x1b4>
 8008830:	2301      	movs	r3, #1
 8008832:	4652      	mov	r2, sl
 8008834:	4631      	mov	r1, r6
 8008836:	4628      	mov	r0, r5
 8008838:	47b8      	blx	r7
 800883a:	3001      	adds	r0, #1
 800883c:	f43f af00 	beq.w	8008640 <_printf_float+0x98>
 8008840:	f109 0901 	add.w	r9, r9, #1
 8008844:	e7ee      	b.n	8008824 <_printf_float+0x27c>
 8008846:	bf00      	nop
 8008848:	ffffffff 	.word	0xffffffff
 800884c:	7fefffff 	.word	0x7fefffff
 8008850:	0800b3e7 	.word	0x0800b3e7
 8008854:	0800b3eb 	.word	0x0800b3eb
 8008858:	0800b3ef 	.word	0x0800b3ef
 800885c:	0800b3f3 	.word	0x0800b3f3
 8008860:	0800b3f7 	.word	0x0800b3f7
 8008864:	9a08      	ldr	r2, [sp, #32]
 8008866:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008868:	429a      	cmp	r2, r3
 800886a:	bfa8      	it	ge
 800886c:	461a      	movge	r2, r3
 800886e:	2a00      	cmp	r2, #0
 8008870:	4691      	mov	r9, r2
 8008872:	dc38      	bgt.n	80088e6 <_printf_float+0x33e>
 8008874:	2300      	movs	r3, #0
 8008876:	9305      	str	r3, [sp, #20]
 8008878:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800887c:	f104 021a 	add.w	r2, r4, #26
 8008880:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008882:	9905      	ldr	r1, [sp, #20]
 8008884:	9304      	str	r3, [sp, #16]
 8008886:	eba3 0309 	sub.w	r3, r3, r9
 800888a:	428b      	cmp	r3, r1
 800888c:	dc33      	bgt.n	80088f6 <_printf_float+0x34e>
 800888e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008892:	429a      	cmp	r2, r3
 8008894:	db3c      	blt.n	8008910 <_printf_float+0x368>
 8008896:	6823      	ldr	r3, [r4, #0]
 8008898:	07da      	lsls	r2, r3, #31
 800889a:	d439      	bmi.n	8008910 <_printf_float+0x368>
 800889c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80088a0:	eba2 0903 	sub.w	r9, r2, r3
 80088a4:	9b04      	ldr	r3, [sp, #16]
 80088a6:	1ad2      	subs	r2, r2, r3
 80088a8:	4591      	cmp	r9, r2
 80088aa:	bfa8      	it	ge
 80088ac:	4691      	movge	r9, r2
 80088ae:	f1b9 0f00 	cmp.w	r9, #0
 80088b2:	dc35      	bgt.n	8008920 <_printf_float+0x378>
 80088b4:	f04f 0800 	mov.w	r8, #0
 80088b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80088bc:	f104 0a1a 	add.w	sl, r4, #26
 80088c0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80088c4:	1a9b      	subs	r3, r3, r2
 80088c6:	eba3 0309 	sub.w	r3, r3, r9
 80088ca:	4543      	cmp	r3, r8
 80088cc:	f77f af77 	ble.w	80087be <_printf_float+0x216>
 80088d0:	2301      	movs	r3, #1
 80088d2:	4652      	mov	r2, sl
 80088d4:	4631      	mov	r1, r6
 80088d6:	4628      	mov	r0, r5
 80088d8:	47b8      	blx	r7
 80088da:	3001      	adds	r0, #1
 80088dc:	f43f aeb0 	beq.w	8008640 <_printf_float+0x98>
 80088e0:	f108 0801 	add.w	r8, r8, #1
 80088e4:	e7ec      	b.n	80088c0 <_printf_float+0x318>
 80088e6:	4613      	mov	r3, r2
 80088e8:	4631      	mov	r1, r6
 80088ea:	4642      	mov	r2, r8
 80088ec:	4628      	mov	r0, r5
 80088ee:	47b8      	blx	r7
 80088f0:	3001      	adds	r0, #1
 80088f2:	d1bf      	bne.n	8008874 <_printf_float+0x2cc>
 80088f4:	e6a4      	b.n	8008640 <_printf_float+0x98>
 80088f6:	2301      	movs	r3, #1
 80088f8:	4631      	mov	r1, r6
 80088fa:	4628      	mov	r0, r5
 80088fc:	9204      	str	r2, [sp, #16]
 80088fe:	47b8      	blx	r7
 8008900:	3001      	adds	r0, #1
 8008902:	f43f ae9d 	beq.w	8008640 <_printf_float+0x98>
 8008906:	9b05      	ldr	r3, [sp, #20]
 8008908:	9a04      	ldr	r2, [sp, #16]
 800890a:	3301      	adds	r3, #1
 800890c:	9305      	str	r3, [sp, #20]
 800890e:	e7b7      	b.n	8008880 <_printf_float+0x2d8>
 8008910:	4653      	mov	r3, sl
 8008912:	465a      	mov	r2, fp
 8008914:	4631      	mov	r1, r6
 8008916:	4628      	mov	r0, r5
 8008918:	47b8      	blx	r7
 800891a:	3001      	adds	r0, #1
 800891c:	d1be      	bne.n	800889c <_printf_float+0x2f4>
 800891e:	e68f      	b.n	8008640 <_printf_float+0x98>
 8008920:	9a04      	ldr	r2, [sp, #16]
 8008922:	464b      	mov	r3, r9
 8008924:	4442      	add	r2, r8
 8008926:	4631      	mov	r1, r6
 8008928:	4628      	mov	r0, r5
 800892a:	47b8      	blx	r7
 800892c:	3001      	adds	r0, #1
 800892e:	d1c1      	bne.n	80088b4 <_printf_float+0x30c>
 8008930:	e686      	b.n	8008640 <_printf_float+0x98>
 8008932:	9a08      	ldr	r2, [sp, #32]
 8008934:	2a01      	cmp	r2, #1
 8008936:	dc01      	bgt.n	800893c <_printf_float+0x394>
 8008938:	07db      	lsls	r3, r3, #31
 800893a:	d537      	bpl.n	80089ac <_printf_float+0x404>
 800893c:	2301      	movs	r3, #1
 800893e:	4642      	mov	r2, r8
 8008940:	4631      	mov	r1, r6
 8008942:	4628      	mov	r0, r5
 8008944:	47b8      	blx	r7
 8008946:	3001      	adds	r0, #1
 8008948:	f43f ae7a 	beq.w	8008640 <_printf_float+0x98>
 800894c:	4653      	mov	r3, sl
 800894e:	465a      	mov	r2, fp
 8008950:	4631      	mov	r1, r6
 8008952:	4628      	mov	r0, r5
 8008954:	47b8      	blx	r7
 8008956:	3001      	adds	r0, #1
 8008958:	f43f ae72 	beq.w	8008640 <_printf_float+0x98>
 800895c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008960:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008968:	9b08      	ldr	r3, [sp, #32]
 800896a:	d01a      	beq.n	80089a2 <_printf_float+0x3fa>
 800896c:	3b01      	subs	r3, #1
 800896e:	f108 0201 	add.w	r2, r8, #1
 8008972:	4631      	mov	r1, r6
 8008974:	4628      	mov	r0, r5
 8008976:	47b8      	blx	r7
 8008978:	3001      	adds	r0, #1
 800897a:	d10e      	bne.n	800899a <_printf_float+0x3f2>
 800897c:	e660      	b.n	8008640 <_printf_float+0x98>
 800897e:	2301      	movs	r3, #1
 8008980:	464a      	mov	r2, r9
 8008982:	4631      	mov	r1, r6
 8008984:	4628      	mov	r0, r5
 8008986:	47b8      	blx	r7
 8008988:	3001      	adds	r0, #1
 800898a:	f43f ae59 	beq.w	8008640 <_printf_float+0x98>
 800898e:	f108 0801 	add.w	r8, r8, #1
 8008992:	9b08      	ldr	r3, [sp, #32]
 8008994:	3b01      	subs	r3, #1
 8008996:	4543      	cmp	r3, r8
 8008998:	dcf1      	bgt.n	800897e <_printf_float+0x3d6>
 800899a:	9b04      	ldr	r3, [sp, #16]
 800899c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80089a0:	e6dd      	b.n	800875e <_printf_float+0x1b6>
 80089a2:	f04f 0800 	mov.w	r8, #0
 80089a6:	f104 091a 	add.w	r9, r4, #26
 80089aa:	e7f2      	b.n	8008992 <_printf_float+0x3ea>
 80089ac:	2301      	movs	r3, #1
 80089ae:	4642      	mov	r2, r8
 80089b0:	e7df      	b.n	8008972 <_printf_float+0x3ca>
 80089b2:	2301      	movs	r3, #1
 80089b4:	464a      	mov	r2, r9
 80089b6:	4631      	mov	r1, r6
 80089b8:	4628      	mov	r0, r5
 80089ba:	47b8      	blx	r7
 80089bc:	3001      	adds	r0, #1
 80089be:	f43f ae3f 	beq.w	8008640 <_printf_float+0x98>
 80089c2:	f108 0801 	add.w	r8, r8, #1
 80089c6:	68e3      	ldr	r3, [r4, #12]
 80089c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80089ca:	1a5b      	subs	r3, r3, r1
 80089cc:	4543      	cmp	r3, r8
 80089ce:	dcf0      	bgt.n	80089b2 <_printf_float+0x40a>
 80089d0:	e6f9      	b.n	80087c6 <_printf_float+0x21e>
 80089d2:	f04f 0800 	mov.w	r8, #0
 80089d6:	f104 0919 	add.w	r9, r4, #25
 80089da:	e7f4      	b.n	80089c6 <_printf_float+0x41e>

080089dc <_printf_common>:
 80089dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089e0:	4616      	mov	r6, r2
 80089e2:	4699      	mov	r9, r3
 80089e4:	688a      	ldr	r2, [r1, #8]
 80089e6:	690b      	ldr	r3, [r1, #16]
 80089e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80089ec:	4293      	cmp	r3, r2
 80089ee:	bfb8      	it	lt
 80089f0:	4613      	movlt	r3, r2
 80089f2:	6033      	str	r3, [r6, #0]
 80089f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80089f8:	4607      	mov	r7, r0
 80089fa:	460c      	mov	r4, r1
 80089fc:	b10a      	cbz	r2, 8008a02 <_printf_common+0x26>
 80089fe:	3301      	adds	r3, #1
 8008a00:	6033      	str	r3, [r6, #0]
 8008a02:	6823      	ldr	r3, [r4, #0]
 8008a04:	0699      	lsls	r1, r3, #26
 8008a06:	bf42      	ittt	mi
 8008a08:	6833      	ldrmi	r3, [r6, #0]
 8008a0a:	3302      	addmi	r3, #2
 8008a0c:	6033      	strmi	r3, [r6, #0]
 8008a0e:	6825      	ldr	r5, [r4, #0]
 8008a10:	f015 0506 	ands.w	r5, r5, #6
 8008a14:	d106      	bne.n	8008a24 <_printf_common+0x48>
 8008a16:	f104 0a19 	add.w	sl, r4, #25
 8008a1a:	68e3      	ldr	r3, [r4, #12]
 8008a1c:	6832      	ldr	r2, [r6, #0]
 8008a1e:	1a9b      	subs	r3, r3, r2
 8008a20:	42ab      	cmp	r3, r5
 8008a22:	dc26      	bgt.n	8008a72 <_printf_common+0x96>
 8008a24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008a28:	1e13      	subs	r3, r2, #0
 8008a2a:	6822      	ldr	r2, [r4, #0]
 8008a2c:	bf18      	it	ne
 8008a2e:	2301      	movne	r3, #1
 8008a30:	0692      	lsls	r2, r2, #26
 8008a32:	d42b      	bmi.n	8008a8c <_printf_common+0xb0>
 8008a34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a38:	4649      	mov	r1, r9
 8008a3a:	4638      	mov	r0, r7
 8008a3c:	47c0      	blx	r8
 8008a3e:	3001      	adds	r0, #1
 8008a40:	d01e      	beq.n	8008a80 <_printf_common+0xa4>
 8008a42:	6823      	ldr	r3, [r4, #0]
 8008a44:	6922      	ldr	r2, [r4, #16]
 8008a46:	f003 0306 	and.w	r3, r3, #6
 8008a4a:	2b04      	cmp	r3, #4
 8008a4c:	bf02      	ittt	eq
 8008a4e:	68e5      	ldreq	r5, [r4, #12]
 8008a50:	6833      	ldreq	r3, [r6, #0]
 8008a52:	1aed      	subeq	r5, r5, r3
 8008a54:	68a3      	ldr	r3, [r4, #8]
 8008a56:	bf0c      	ite	eq
 8008a58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a5c:	2500      	movne	r5, #0
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	bfc4      	itt	gt
 8008a62:	1a9b      	subgt	r3, r3, r2
 8008a64:	18ed      	addgt	r5, r5, r3
 8008a66:	2600      	movs	r6, #0
 8008a68:	341a      	adds	r4, #26
 8008a6a:	42b5      	cmp	r5, r6
 8008a6c:	d11a      	bne.n	8008aa4 <_printf_common+0xc8>
 8008a6e:	2000      	movs	r0, #0
 8008a70:	e008      	b.n	8008a84 <_printf_common+0xa8>
 8008a72:	2301      	movs	r3, #1
 8008a74:	4652      	mov	r2, sl
 8008a76:	4649      	mov	r1, r9
 8008a78:	4638      	mov	r0, r7
 8008a7a:	47c0      	blx	r8
 8008a7c:	3001      	adds	r0, #1
 8008a7e:	d103      	bne.n	8008a88 <_printf_common+0xac>
 8008a80:	f04f 30ff 	mov.w	r0, #4294967295
 8008a84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a88:	3501      	adds	r5, #1
 8008a8a:	e7c6      	b.n	8008a1a <_printf_common+0x3e>
 8008a8c:	18e1      	adds	r1, r4, r3
 8008a8e:	1c5a      	adds	r2, r3, #1
 8008a90:	2030      	movs	r0, #48	; 0x30
 8008a92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a96:	4422      	add	r2, r4
 8008a98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008aa0:	3302      	adds	r3, #2
 8008aa2:	e7c7      	b.n	8008a34 <_printf_common+0x58>
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	4622      	mov	r2, r4
 8008aa8:	4649      	mov	r1, r9
 8008aaa:	4638      	mov	r0, r7
 8008aac:	47c0      	blx	r8
 8008aae:	3001      	adds	r0, #1
 8008ab0:	d0e6      	beq.n	8008a80 <_printf_common+0xa4>
 8008ab2:	3601      	adds	r6, #1
 8008ab4:	e7d9      	b.n	8008a6a <_printf_common+0x8e>
	...

08008ab8 <_printf_i>:
 8008ab8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008abc:	7e0f      	ldrb	r7, [r1, #24]
 8008abe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008ac0:	2f78      	cmp	r7, #120	; 0x78
 8008ac2:	4691      	mov	r9, r2
 8008ac4:	4680      	mov	r8, r0
 8008ac6:	460c      	mov	r4, r1
 8008ac8:	469a      	mov	sl, r3
 8008aca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008ace:	d807      	bhi.n	8008ae0 <_printf_i+0x28>
 8008ad0:	2f62      	cmp	r7, #98	; 0x62
 8008ad2:	d80a      	bhi.n	8008aea <_printf_i+0x32>
 8008ad4:	2f00      	cmp	r7, #0
 8008ad6:	f000 80d4 	beq.w	8008c82 <_printf_i+0x1ca>
 8008ada:	2f58      	cmp	r7, #88	; 0x58
 8008adc:	f000 80c0 	beq.w	8008c60 <_printf_i+0x1a8>
 8008ae0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ae4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008ae8:	e03a      	b.n	8008b60 <_printf_i+0xa8>
 8008aea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008aee:	2b15      	cmp	r3, #21
 8008af0:	d8f6      	bhi.n	8008ae0 <_printf_i+0x28>
 8008af2:	a101      	add	r1, pc, #4	; (adr r1, 8008af8 <_printf_i+0x40>)
 8008af4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008af8:	08008b51 	.word	0x08008b51
 8008afc:	08008b65 	.word	0x08008b65
 8008b00:	08008ae1 	.word	0x08008ae1
 8008b04:	08008ae1 	.word	0x08008ae1
 8008b08:	08008ae1 	.word	0x08008ae1
 8008b0c:	08008ae1 	.word	0x08008ae1
 8008b10:	08008b65 	.word	0x08008b65
 8008b14:	08008ae1 	.word	0x08008ae1
 8008b18:	08008ae1 	.word	0x08008ae1
 8008b1c:	08008ae1 	.word	0x08008ae1
 8008b20:	08008ae1 	.word	0x08008ae1
 8008b24:	08008c69 	.word	0x08008c69
 8008b28:	08008b91 	.word	0x08008b91
 8008b2c:	08008c23 	.word	0x08008c23
 8008b30:	08008ae1 	.word	0x08008ae1
 8008b34:	08008ae1 	.word	0x08008ae1
 8008b38:	08008c8b 	.word	0x08008c8b
 8008b3c:	08008ae1 	.word	0x08008ae1
 8008b40:	08008b91 	.word	0x08008b91
 8008b44:	08008ae1 	.word	0x08008ae1
 8008b48:	08008ae1 	.word	0x08008ae1
 8008b4c:	08008c2b 	.word	0x08008c2b
 8008b50:	682b      	ldr	r3, [r5, #0]
 8008b52:	1d1a      	adds	r2, r3, #4
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	602a      	str	r2, [r5, #0]
 8008b58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b60:	2301      	movs	r3, #1
 8008b62:	e09f      	b.n	8008ca4 <_printf_i+0x1ec>
 8008b64:	6820      	ldr	r0, [r4, #0]
 8008b66:	682b      	ldr	r3, [r5, #0]
 8008b68:	0607      	lsls	r7, r0, #24
 8008b6a:	f103 0104 	add.w	r1, r3, #4
 8008b6e:	6029      	str	r1, [r5, #0]
 8008b70:	d501      	bpl.n	8008b76 <_printf_i+0xbe>
 8008b72:	681e      	ldr	r6, [r3, #0]
 8008b74:	e003      	b.n	8008b7e <_printf_i+0xc6>
 8008b76:	0646      	lsls	r6, r0, #25
 8008b78:	d5fb      	bpl.n	8008b72 <_printf_i+0xba>
 8008b7a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008b7e:	2e00      	cmp	r6, #0
 8008b80:	da03      	bge.n	8008b8a <_printf_i+0xd2>
 8008b82:	232d      	movs	r3, #45	; 0x2d
 8008b84:	4276      	negs	r6, r6
 8008b86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b8a:	485a      	ldr	r0, [pc, #360]	; (8008cf4 <_printf_i+0x23c>)
 8008b8c:	230a      	movs	r3, #10
 8008b8e:	e012      	b.n	8008bb6 <_printf_i+0xfe>
 8008b90:	682b      	ldr	r3, [r5, #0]
 8008b92:	6820      	ldr	r0, [r4, #0]
 8008b94:	1d19      	adds	r1, r3, #4
 8008b96:	6029      	str	r1, [r5, #0]
 8008b98:	0605      	lsls	r5, r0, #24
 8008b9a:	d501      	bpl.n	8008ba0 <_printf_i+0xe8>
 8008b9c:	681e      	ldr	r6, [r3, #0]
 8008b9e:	e002      	b.n	8008ba6 <_printf_i+0xee>
 8008ba0:	0641      	lsls	r1, r0, #25
 8008ba2:	d5fb      	bpl.n	8008b9c <_printf_i+0xe4>
 8008ba4:	881e      	ldrh	r6, [r3, #0]
 8008ba6:	4853      	ldr	r0, [pc, #332]	; (8008cf4 <_printf_i+0x23c>)
 8008ba8:	2f6f      	cmp	r7, #111	; 0x6f
 8008baa:	bf0c      	ite	eq
 8008bac:	2308      	moveq	r3, #8
 8008bae:	230a      	movne	r3, #10
 8008bb0:	2100      	movs	r1, #0
 8008bb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008bb6:	6865      	ldr	r5, [r4, #4]
 8008bb8:	60a5      	str	r5, [r4, #8]
 8008bba:	2d00      	cmp	r5, #0
 8008bbc:	bfa2      	ittt	ge
 8008bbe:	6821      	ldrge	r1, [r4, #0]
 8008bc0:	f021 0104 	bicge.w	r1, r1, #4
 8008bc4:	6021      	strge	r1, [r4, #0]
 8008bc6:	b90e      	cbnz	r6, 8008bcc <_printf_i+0x114>
 8008bc8:	2d00      	cmp	r5, #0
 8008bca:	d04b      	beq.n	8008c64 <_printf_i+0x1ac>
 8008bcc:	4615      	mov	r5, r2
 8008bce:	fbb6 f1f3 	udiv	r1, r6, r3
 8008bd2:	fb03 6711 	mls	r7, r3, r1, r6
 8008bd6:	5dc7      	ldrb	r7, [r0, r7]
 8008bd8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008bdc:	4637      	mov	r7, r6
 8008bde:	42bb      	cmp	r3, r7
 8008be0:	460e      	mov	r6, r1
 8008be2:	d9f4      	bls.n	8008bce <_printf_i+0x116>
 8008be4:	2b08      	cmp	r3, #8
 8008be6:	d10b      	bne.n	8008c00 <_printf_i+0x148>
 8008be8:	6823      	ldr	r3, [r4, #0]
 8008bea:	07de      	lsls	r6, r3, #31
 8008bec:	d508      	bpl.n	8008c00 <_printf_i+0x148>
 8008bee:	6923      	ldr	r3, [r4, #16]
 8008bf0:	6861      	ldr	r1, [r4, #4]
 8008bf2:	4299      	cmp	r1, r3
 8008bf4:	bfde      	ittt	le
 8008bf6:	2330      	movle	r3, #48	; 0x30
 8008bf8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008bfc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008c00:	1b52      	subs	r2, r2, r5
 8008c02:	6122      	str	r2, [r4, #16]
 8008c04:	f8cd a000 	str.w	sl, [sp]
 8008c08:	464b      	mov	r3, r9
 8008c0a:	aa03      	add	r2, sp, #12
 8008c0c:	4621      	mov	r1, r4
 8008c0e:	4640      	mov	r0, r8
 8008c10:	f7ff fee4 	bl	80089dc <_printf_common>
 8008c14:	3001      	adds	r0, #1
 8008c16:	d14a      	bne.n	8008cae <_printf_i+0x1f6>
 8008c18:	f04f 30ff 	mov.w	r0, #4294967295
 8008c1c:	b004      	add	sp, #16
 8008c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c22:	6823      	ldr	r3, [r4, #0]
 8008c24:	f043 0320 	orr.w	r3, r3, #32
 8008c28:	6023      	str	r3, [r4, #0]
 8008c2a:	4833      	ldr	r0, [pc, #204]	; (8008cf8 <_printf_i+0x240>)
 8008c2c:	2778      	movs	r7, #120	; 0x78
 8008c2e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008c32:	6823      	ldr	r3, [r4, #0]
 8008c34:	6829      	ldr	r1, [r5, #0]
 8008c36:	061f      	lsls	r7, r3, #24
 8008c38:	f851 6b04 	ldr.w	r6, [r1], #4
 8008c3c:	d402      	bmi.n	8008c44 <_printf_i+0x18c>
 8008c3e:	065f      	lsls	r7, r3, #25
 8008c40:	bf48      	it	mi
 8008c42:	b2b6      	uxthmi	r6, r6
 8008c44:	07df      	lsls	r7, r3, #31
 8008c46:	bf48      	it	mi
 8008c48:	f043 0320 	orrmi.w	r3, r3, #32
 8008c4c:	6029      	str	r1, [r5, #0]
 8008c4e:	bf48      	it	mi
 8008c50:	6023      	strmi	r3, [r4, #0]
 8008c52:	b91e      	cbnz	r6, 8008c5c <_printf_i+0x1a4>
 8008c54:	6823      	ldr	r3, [r4, #0]
 8008c56:	f023 0320 	bic.w	r3, r3, #32
 8008c5a:	6023      	str	r3, [r4, #0]
 8008c5c:	2310      	movs	r3, #16
 8008c5e:	e7a7      	b.n	8008bb0 <_printf_i+0xf8>
 8008c60:	4824      	ldr	r0, [pc, #144]	; (8008cf4 <_printf_i+0x23c>)
 8008c62:	e7e4      	b.n	8008c2e <_printf_i+0x176>
 8008c64:	4615      	mov	r5, r2
 8008c66:	e7bd      	b.n	8008be4 <_printf_i+0x12c>
 8008c68:	682b      	ldr	r3, [r5, #0]
 8008c6a:	6826      	ldr	r6, [r4, #0]
 8008c6c:	6961      	ldr	r1, [r4, #20]
 8008c6e:	1d18      	adds	r0, r3, #4
 8008c70:	6028      	str	r0, [r5, #0]
 8008c72:	0635      	lsls	r5, r6, #24
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	d501      	bpl.n	8008c7c <_printf_i+0x1c4>
 8008c78:	6019      	str	r1, [r3, #0]
 8008c7a:	e002      	b.n	8008c82 <_printf_i+0x1ca>
 8008c7c:	0670      	lsls	r0, r6, #25
 8008c7e:	d5fb      	bpl.n	8008c78 <_printf_i+0x1c0>
 8008c80:	8019      	strh	r1, [r3, #0]
 8008c82:	2300      	movs	r3, #0
 8008c84:	6123      	str	r3, [r4, #16]
 8008c86:	4615      	mov	r5, r2
 8008c88:	e7bc      	b.n	8008c04 <_printf_i+0x14c>
 8008c8a:	682b      	ldr	r3, [r5, #0]
 8008c8c:	1d1a      	adds	r2, r3, #4
 8008c8e:	602a      	str	r2, [r5, #0]
 8008c90:	681d      	ldr	r5, [r3, #0]
 8008c92:	6862      	ldr	r2, [r4, #4]
 8008c94:	2100      	movs	r1, #0
 8008c96:	4628      	mov	r0, r5
 8008c98:	f7f7 fad2 	bl	8000240 <memchr>
 8008c9c:	b108      	cbz	r0, 8008ca2 <_printf_i+0x1ea>
 8008c9e:	1b40      	subs	r0, r0, r5
 8008ca0:	6060      	str	r0, [r4, #4]
 8008ca2:	6863      	ldr	r3, [r4, #4]
 8008ca4:	6123      	str	r3, [r4, #16]
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cac:	e7aa      	b.n	8008c04 <_printf_i+0x14c>
 8008cae:	6923      	ldr	r3, [r4, #16]
 8008cb0:	462a      	mov	r2, r5
 8008cb2:	4649      	mov	r1, r9
 8008cb4:	4640      	mov	r0, r8
 8008cb6:	47d0      	blx	sl
 8008cb8:	3001      	adds	r0, #1
 8008cba:	d0ad      	beq.n	8008c18 <_printf_i+0x160>
 8008cbc:	6823      	ldr	r3, [r4, #0]
 8008cbe:	079b      	lsls	r3, r3, #30
 8008cc0:	d413      	bmi.n	8008cea <_printf_i+0x232>
 8008cc2:	68e0      	ldr	r0, [r4, #12]
 8008cc4:	9b03      	ldr	r3, [sp, #12]
 8008cc6:	4298      	cmp	r0, r3
 8008cc8:	bfb8      	it	lt
 8008cca:	4618      	movlt	r0, r3
 8008ccc:	e7a6      	b.n	8008c1c <_printf_i+0x164>
 8008cce:	2301      	movs	r3, #1
 8008cd0:	4632      	mov	r2, r6
 8008cd2:	4649      	mov	r1, r9
 8008cd4:	4640      	mov	r0, r8
 8008cd6:	47d0      	blx	sl
 8008cd8:	3001      	adds	r0, #1
 8008cda:	d09d      	beq.n	8008c18 <_printf_i+0x160>
 8008cdc:	3501      	adds	r5, #1
 8008cde:	68e3      	ldr	r3, [r4, #12]
 8008ce0:	9903      	ldr	r1, [sp, #12]
 8008ce2:	1a5b      	subs	r3, r3, r1
 8008ce4:	42ab      	cmp	r3, r5
 8008ce6:	dcf2      	bgt.n	8008cce <_printf_i+0x216>
 8008ce8:	e7eb      	b.n	8008cc2 <_printf_i+0x20a>
 8008cea:	2500      	movs	r5, #0
 8008cec:	f104 0619 	add.w	r6, r4, #25
 8008cf0:	e7f5      	b.n	8008cde <_printf_i+0x226>
 8008cf2:	bf00      	nop
 8008cf4:	0800b3f9 	.word	0x0800b3f9
 8008cf8:	0800b40a 	.word	0x0800b40a

08008cfc <std>:
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	b510      	push	{r4, lr}
 8008d00:	4604      	mov	r4, r0
 8008d02:	e9c0 3300 	strd	r3, r3, [r0]
 8008d06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d0a:	6083      	str	r3, [r0, #8]
 8008d0c:	8181      	strh	r1, [r0, #12]
 8008d0e:	6643      	str	r3, [r0, #100]	; 0x64
 8008d10:	81c2      	strh	r2, [r0, #14]
 8008d12:	6183      	str	r3, [r0, #24]
 8008d14:	4619      	mov	r1, r3
 8008d16:	2208      	movs	r2, #8
 8008d18:	305c      	adds	r0, #92	; 0x5c
 8008d1a:	f000 f914 	bl	8008f46 <memset>
 8008d1e:	4b0d      	ldr	r3, [pc, #52]	; (8008d54 <std+0x58>)
 8008d20:	6263      	str	r3, [r4, #36]	; 0x24
 8008d22:	4b0d      	ldr	r3, [pc, #52]	; (8008d58 <std+0x5c>)
 8008d24:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d26:	4b0d      	ldr	r3, [pc, #52]	; (8008d5c <std+0x60>)
 8008d28:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008d2a:	4b0d      	ldr	r3, [pc, #52]	; (8008d60 <std+0x64>)
 8008d2c:	6323      	str	r3, [r4, #48]	; 0x30
 8008d2e:	4b0d      	ldr	r3, [pc, #52]	; (8008d64 <std+0x68>)
 8008d30:	6224      	str	r4, [r4, #32]
 8008d32:	429c      	cmp	r4, r3
 8008d34:	d006      	beq.n	8008d44 <std+0x48>
 8008d36:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008d3a:	4294      	cmp	r4, r2
 8008d3c:	d002      	beq.n	8008d44 <std+0x48>
 8008d3e:	33d0      	adds	r3, #208	; 0xd0
 8008d40:	429c      	cmp	r4, r3
 8008d42:	d105      	bne.n	8008d50 <std+0x54>
 8008d44:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d4c:	f000 b978 	b.w	8009040 <__retarget_lock_init_recursive>
 8008d50:	bd10      	pop	{r4, pc}
 8008d52:	bf00      	nop
 8008d54:	08008ec1 	.word	0x08008ec1
 8008d58:	08008ee3 	.word	0x08008ee3
 8008d5c:	08008f1b 	.word	0x08008f1b
 8008d60:	08008f3f 	.word	0x08008f3f
 8008d64:	200009dc 	.word	0x200009dc

08008d68 <stdio_exit_handler>:
 8008d68:	4a02      	ldr	r2, [pc, #8]	; (8008d74 <stdio_exit_handler+0xc>)
 8008d6a:	4903      	ldr	r1, [pc, #12]	; (8008d78 <stdio_exit_handler+0x10>)
 8008d6c:	4803      	ldr	r0, [pc, #12]	; (8008d7c <stdio_exit_handler+0x14>)
 8008d6e:	f000 b869 	b.w	8008e44 <_fwalk_sglue>
 8008d72:	bf00      	nop
 8008d74:	20000424 	.word	0x20000424
 8008d78:	0800a925 	.word	0x0800a925
 8008d7c:	20000430 	.word	0x20000430

08008d80 <cleanup_stdio>:
 8008d80:	6841      	ldr	r1, [r0, #4]
 8008d82:	4b0c      	ldr	r3, [pc, #48]	; (8008db4 <cleanup_stdio+0x34>)
 8008d84:	4299      	cmp	r1, r3
 8008d86:	b510      	push	{r4, lr}
 8008d88:	4604      	mov	r4, r0
 8008d8a:	d001      	beq.n	8008d90 <cleanup_stdio+0x10>
 8008d8c:	f001 fdca 	bl	800a924 <_fflush_r>
 8008d90:	68a1      	ldr	r1, [r4, #8]
 8008d92:	4b09      	ldr	r3, [pc, #36]	; (8008db8 <cleanup_stdio+0x38>)
 8008d94:	4299      	cmp	r1, r3
 8008d96:	d002      	beq.n	8008d9e <cleanup_stdio+0x1e>
 8008d98:	4620      	mov	r0, r4
 8008d9a:	f001 fdc3 	bl	800a924 <_fflush_r>
 8008d9e:	68e1      	ldr	r1, [r4, #12]
 8008da0:	4b06      	ldr	r3, [pc, #24]	; (8008dbc <cleanup_stdio+0x3c>)
 8008da2:	4299      	cmp	r1, r3
 8008da4:	d004      	beq.n	8008db0 <cleanup_stdio+0x30>
 8008da6:	4620      	mov	r0, r4
 8008da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008dac:	f001 bdba 	b.w	800a924 <_fflush_r>
 8008db0:	bd10      	pop	{r4, pc}
 8008db2:	bf00      	nop
 8008db4:	200009dc 	.word	0x200009dc
 8008db8:	20000a44 	.word	0x20000a44
 8008dbc:	20000aac 	.word	0x20000aac

08008dc0 <global_stdio_init.part.0>:
 8008dc0:	b510      	push	{r4, lr}
 8008dc2:	4b0b      	ldr	r3, [pc, #44]	; (8008df0 <global_stdio_init.part.0+0x30>)
 8008dc4:	4c0b      	ldr	r4, [pc, #44]	; (8008df4 <global_stdio_init.part.0+0x34>)
 8008dc6:	4a0c      	ldr	r2, [pc, #48]	; (8008df8 <global_stdio_init.part.0+0x38>)
 8008dc8:	601a      	str	r2, [r3, #0]
 8008dca:	4620      	mov	r0, r4
 8008dcc:	2200      	movs	r2, #0
 8008dce:	2104      	movs	r1, #4
 8008dd0:	f7ff ff94 	bl	8008cfc <std>
 8008dd4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008dd8:	2201      	movs	r2, #1
 8008dda:	2109      	movs	r1, #9
 8008ddc:	f7ff ff8e 	bl	8008cfc <std>
 8008de0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008de4:	2202      	movs	r2, #2
 8008de6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008dea:	2112      	movs	r1, #18
 8008dec:	f7ff bf86 	b.w	8008cfc <std>
 8008df0:	20000b14 	.word	0x20000b14
 8008df4:	200009dc 	.word	0x200009dc
 8008df8:	08008d69 	.word	0x08008d69

08008dfc <__sfp_lock_acquire>:
 8008dfc:	4801      	ldr	r0, [pc, #4]	; (8008e04 <__sfp_lock_acquire+0x8>)
 8008dfe:	f000 b920 	b.w	8009042 <__retarget_lock_acquire_recursive>
 8008e02:	bf00      	nop
 8008e04:	20000b1d 	.word	0x20000b1d

08008e08 <__sfp_lock_release>:
 8008e08:	4801      	ldr	r0, [pc, #4]	; (8008e10 <__sfp_lock_release+0x8>)
 8008e0a:	f000 b91b 	b.w	8009044 <__retarget_lock_release_recursive>
 8008e0e:	bf00      	nop
 8008e10:	20000b1d 	.word	0x20000b1d

08008e14 <__sinit>:
 8008e14:	b510      	push	{r4, lr}
 8008e16:	4604      	mov	r4, r0
 8008e18:	f7ff fff0 	bl	8008dfc <__sfp_lock_acquire>
 8008e1c:	6a23      	ldr	r3, [r4, #32]
 8008e1e:	b11b      	cbz	r3, 8008e28 <__sinit+0x14>
 8008e20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e24:	f7ff bff0 	b.w	8008e08 <__sfp_lock_release>
 8008e28:	4b04      	ldr	r3, [pc, #16]	; (8008e3c <__sinit+0x28>)
 8008e2a:	6223      	str	r3, [r4, #32]
 8008e2c:	4b04      	ldr	r3, [pc, #16]	; (8008e40 <__sinit+0x2c>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d1f5      	bne.n	8008e20 <__sinit+0xc>
 8008e34:	f7ff ffc4 	bl	8008dc0 <global_stdio_init.part.0>
 8008e38:	e7f2      	b.n	8008e20 <__sinit+0xc>
 8008e3a:	bf00      	nop
 8008e3c:	08008d81 	.word	0x08008d81
 8008e40:	20000b14 	.word	0x20000b14

08008e44 <_fwalk_sglue>:
 8008e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e48:	4607      	mov	r7, r0
 8008e4a:	4688      	mov	r8, r1
 8008e4c:	4614      	mov	r4, r2
 8008e4e:	2600      	movs	r6, #0
 8008e50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008e54:	f1b9 0901 	subs.w	r9, r9, #1
 8008e58:	d505      	bpl.n	8008e66 <_fwalk_sglue+0x22>
 8008e5a:	6824      	ldr	r4, [r4, #0]
 8008e5c:	2c00      	cmp	r4, #0
 8008e5e:	d1f7      	bne.n	8008e50 <_fwalk_sglue+0xc>
 8008e60:	4630      	mov	r0, r6
 8008e62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e66:	89ab      	ldrh	r3, [r5, #12]
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d907      	bls.n	8008e7c <_fwalk_sglue+0x38>
 8008e6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e70:	3301      	adds	r3, #1
 8008e72:	d003      	beq.n	8008e7c <_fwalk_sglue+0x38>
 8008e74:	4629      	mov	r1, r5
 8008e76:	4638      	mov	r0, r7
 8008e78:	47c0      	blx	r8
 8008e7a:	4306      	orrs	r6, r0
 8008e7c:	3568      	adds	r5, #104	; 0x68
 8008e7e:	e7e9      	b.n	8008e54 <_fwalk_sglue+0x10>

08008e80 <siprintf>:
 8008e80:	b40e      	push	{r1, r2, r3}
 8008e82:	b500      	push	{lr}
 8008e84:	b09c      	sub	sp, #112	; 0x70
 8008e86:	ab1d      	add	r3, sp, #116	; 0x74
 8008e88:	9002      	str	r0, [sp, #8]
 8008e8a:	9006      	str	r0, [sp, #24]
 8008e8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008e90:	4809      	ldr	r0, [pc, #36]	; (8008eb8 <siprintf+0x38>)
 8008e92:	9107      	str	r1, [sp, #28]
 8008e94:	9104      	str	r1, [sp, #16]
 8008e96:	4909      	ldr	r1, [pc, #36]	; (8008ebc <siprintf+0x3c>)
 8008e98:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e9c:	9105      	str	r1, [sp, #20]
 8008e9e:	6800      	ldr	r0, [r0, #0]
 8008ea0:	9301      	str	r3, [sp, #4]
 8008ea2:	a902      	add	r1, sp, #8
 8008ea4:	f001 fbba 	bl	800a61c <_svfiprintf_r>
 8008ea8:	9b02      	ldr	r3, [sp, #8]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	701a      	strb	r2, [r3, #0]
 8008eae:	b01c      	add	sp, #112	; 0x70
 8008eb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008eb4:	b003      	add	sp, #12
 8008eb6:	4770      	bx	lr
 8008eb8:	2000047c 	.word	0x2000047c
 8008ebc:	ffff0208 	.word	0xffff0208

08008ec0 <__sread>:
 8008ec0:	b510      	push	{r4, lr}
 8008ec2:	460c      	mov	r4, r1
 8008ec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ec8:	f000 f86c 	bl	8008fa4 <_read_r>
 8008ecc:	2800      	cmp	r0, #0
 8008ece:	bfab      	itete	ge
 8008ed0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008ed2:	89a3      	ldrhlt	r3, [r4, #12]
 8008ed4:	181b      	addge	r3, r3, r0
 8008ed6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008eda:	bfac      	ite	ge
 8008edc:	6563      	strge	r3, [r4, #84]	; 0x54
 8008ede:	81a3      	strhlt	r3, [r4, #12]
 8008ee0:	bd10      	pop	{r4, pc}

08008ee2 <__swrite>:
 8008ee2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ee6:	461f      	mov	r7, r3
 8008ee8:	898b      	ldrh	r3, [r1, #12]
 8008eea:	05db      	lsls	r3, r3, #23
 8008eec:	4605      	mov	r5, r0
 8008eee:	460c      	mov	r4, r1
 8008ef0:	4616      	mov	r6, r2
 8008ef2:	d505      	bpl.n	8008f00 <__swrite+0x1e>
 8008ef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ef8:	2302      	movs	r3, #2
 8008efa:	2200      	movs	r2, #0
 8008efc:	f000 f840 	bl	8008f80 <_lseek_r>
 8008f00:	89a3      	ldrh	r3, [r4, #12]
 8008f02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f0a:	81a3      	strh	r3, [r4, #12]
 8008f0c:	4632      	mov	r2, r6
 8008f0e:	463b      	mov	r3, r7
 8008f10:	4628      	mov	r0, r5
 8008f12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f16:	f000 b857 	b.w	8008fc8 <_write_r>

08008f1a <__sseek>:
 8008f1a:	b510      	push	{r4, lr}
 8008f1c:	460c      	mov	r4, r1
 8008f1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f22:	f000 f82d 	bl	8008f80 <_lseek_r>
 8008f26:	1c43      	adds	r3, r0, #1
 8008f28:	89a3      	ldrh	r3, [r4, #12]
 8008f2a:	bf15      	itete	ne
 8008f2c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008f2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008f32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008f36:	81a3      	strheq	r3, [r4, #12]
 8008f38:	bf18      	it	ne
 8008f3a:	81a3      	strhne	r3, [r4, #12]
 8008f3c:	bd10      	pop	{r4, pc}

08008f3e <__sclose>:
 8008f3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f42:	f000 b80d 	b.w	8008f60 <_close_r>

08008f46 <memset>:
 8008f46:	4402      	add	r2, r0
 8008f48:	4603      	mov	r3, r0
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d100      	bne.n	8008f50 <memset+0xa>
 8008f4e:	4770      	bx	lr
 8008f50:	f803 1b01 	strb.w	r1, [r3], #1
 8008f54:	e7f9      	b.n	8008f4a <memset+0x4>
	...

08008f58 <_localeconv_r>:
 8008f58:	4800      	ldr	r0, [pc, #0]	; (8008f5c <_localeconv_r+0x4>)
 8008f5a:	4770      	bx	lr
 8008f5c:	20000570 	.word	0x20000570

08008f60 <_close_r>:
 8008f60:	b538      	push	{r3, r4, r5, lr}
 8008f62:	4d06      	ldr	r5, [pc, #24]	; (8008f7c <_close_r+0x1c>)
 8008f64:	2300      	movs	r3, #0
 8008f66:	4604      	mov	r4, r0
 8008f68:	4608      	mov	r0, r1
 8008f6a:	602b      	str	r3, [r5, #0]
 8008f6c:	f7f9 f901 	bl	8002172 <_close>
 8008f70:	1c43      	adds	r3, r0, #1
 8008f72:	d102      	bne.n	8008f7a <_close_r+0x1a>
 8008f74:	682b      	ldr	r3, [r5, #0]
 8008f76:	b103      	cbz	r3, 8008f7a <_close_r+0x1a>
 8008f78:	6023      	str	r3, [r4, #0]
 8008f7a:	bd38      	pop	{r3, r4, r5, pc}
 8008f7c:	20000b18 	.word	0x20000b18

08008f80 <_lseek_r>:
 8008f80:	b538      	push	{r3, r4, r5, lr}
 8008f82:	4d07      	ldr	r5, [pc, #28]	; (8008fa0 <_lseek_r+0x20>)
 8008f84:	4604      	mov	r4, r0
 8008f86:	4608      	mov	r0, r1
 8008f88:	4611      	mov	r1, r2
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	602a      	str	r2, [r5, #0]
 8008f8e:	461a      	mov	r2, r3
 8008f90:	f7f9 f916 	bl	80021c0 <_lseek>
 8008f94:	1c43      	adds	r3, r0, #1
 8008f96:	d102      	bne.n	8008f9e <_lseek_r+0x1e>
 8008f98:	682b      	ldr	r3, [r5, #0]
 8008f9a:	b103      	cbz	r3, 8008f9e <_lseek_r+0x1e>
 8008f9c:	6023      	str	r3, [r4, #0]
 8008f9e:	bd38      	pop	{r3, r4, r5, pc}
 8008fa0:	20000b18 	.word	0x20000b18

08008fa4 <_read_r>:
 8008fa4:	b538      	push	{r3, r4, r5, lr}
 8008fa6:	4d07      	ldr	r5, [pc, #28]	; (8008fc4 <_read_r+0x20>)
 8008fa8:	4604      	mov	r4, r0
 8008faa:	4608      	mov	r0, r1
 8008fac:	4611      	mov	r1, r2
 8008fae:	2200      	movs	r2, #0
 8008fb0:	602a      	str	r2, [r5, #0]
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	f7f9 f8a4 	bl	8002100 <_read>
 8008fb8:	1c43      	adds	r3, r0, #1
 8008fba:	d102      	bne.n	8008fc2 <_read_r+0x1e>
 8008fbc:	682b      	ldr	r3, [r5, #0]
 8008fbe:	b103      	cbz	r3, 8008fc2 <_read_r+0x1e>
 8008fc0:	6023      	str	r3, [r4, #0]
 8008fc2:	bd38      	pop	{r3, r4, r5, pc}
 8008fc4:	20000b18 	.word	0x20000b18

08008fc8 <_write_r>:
 8008fc8:	b538      	push	{r3, r4, r5, lr}
 8008fca:	4d07      	ldr	r5, [pc, #28]	; (8008fe8 <_write_r+0x20>)
 8008fcc:	4604      	mov	r4, r0
 8008fce:	4608      	mov	r0, r1
 8008fd0:	4611      	mov	r1, r2
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	602a      	str	r2, [r5, #0]
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	f7f9 f8af 	bl	800213a <_write>
 8008fdc:	1c43      	adds	r3, r0, #1
 8008fde:	d102      	bne.n	8008fe6 <_write_r+0x1e>
 8008fe0:	682b      	ldr	r3, [r5, #0]
 8008fe2:	b103      	cbz	r3, 8008fe6 <_write_r+0x1e>
 8008fe4:	6023      	str	r3, [r4, #0]
 8008fe6:	bd38      	pop	{r3, r4, r5, pc}
 8008fe8:	20000b18 	.word	0x20000b18

08008fec <__errno>:
 8008fec:	4b01      	ldr	r3, [pc, #4]	; (8008ff4 <__errno+0x8>)
 8008fee:	6818      	ldr	r0, [r3, #0]
 8008ff0:	4770      	bx	lr
 8008ff2:	bf00      	nop
 8008ff4:	2000047c 	.word	0x2000047c

08008ff8 <__libc_init_array>:
 8008ff8:	b570      	push	{r4, r5, r6, lr}
 8008ffa:	4d0d      	ldr	r5, [pc, #52]	; (8009030 <__libc_init_array+0x38>)
 8008ffc:	4c0d      	ldr	r4, [pc, #52]	; (8009034 <__libc_init_array+0x3c>)
 8008ffe:	1b64      	subs	r4, r4, r5
 8009000:	10a4      	asrs	r4, r4, #2
 8009002:	2600      	movs	r6, #0
 8009004:	42a6      	cmp	r6, r4
 8009006:	d109      	bne.n	800901c <__libc_init_array+0x24>
 8009008:	4d0b      	ldr	r5, [pc, #44]	; (8009038 <__libc_init_array+0x40>)
 800900a:	4c0c      	ldr	r4, [pc, #48]	; (800903c <__libc_init_array+0x44>)
 800900c:	f002 f810 	bl	800b030 <_init>
 8009010:	1b64      	subs	r4, r4, r5
 8009012:	10a4      	asrs	r4, r4, #2
 8009014:	2600      	movs	r6, #0
 8009016:	42a6      	cmp	r6, r4
 8009018:	d105      	bne.n	8009026 <__libc_init_array+0x2e>
 800901a:	bd70      	pop	{r4, r5, r6, pc}
 800901c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009020:	4798      	blx	r3
 8009022:	3601      	adds	r6, #1
 8009024:	e7ee      	b.n	8009004 <__libc_init_array+0xc>
 8009026:	f855 3b04 	ldr.w	r3, [r5], #4
 800902a:	4798      	blx	r3
 800902c:	3601      	adds	r6, #1
 800902e:	e7f2      	b.n	8009016 <__libc_init_array+0x1e>
 8009030:	0800b748 	.word	0x0800b748
 8009034:	0800b748 	.word	0x0800b748
 8009038:	0800b748 	.word	0x0800b748
 800903c:	0800b74c 	.word	0x0800b74c

08009040 <__retarget_lock_init_recursive>:
 8009040:	4770      	bx	lr

08009042 <__retarget_lock_acquire_recursive>:
 8009042:	4770      	bx	lr

08009044 <__retarget_lock_release_recursive>:
 8009044:	4770      	bx	lr
	...

08009048 <__assert_func>:
 8009048:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800904a:	4614      	mov	r4, r2
 800904c:	461a      	mov	r2, r3
 800904e:	4b09      	ldr	r3, [pc, #36]	; (8009074 <__assert_func+0x2c>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	4605      	mov	r5, r0
 8009054:	68d8      	ldr	r0, [r3, #12]
 8009056:	b14c      	cbz	r4, 800906c <__assert_func+0x24>
 8009058:	4b07      	ldr	r3, [pc, #28]	; (8009078 <__assert_func+0x30>)
 800905a:	9100      	str	r1, [sp, #0]
 800905c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009060:	4906      	ldr	r1, [pc, #24]	; (800907c <__assert_func+0x34>)
 8009062:	462b      	mov	r3, r5
 8009064:	f001 fc86 	bl	800a974 <fiprintf>
 8009068:	f001 fcce 	bl	800aa08 <abort>
 800906c:	4b04      	ldr	r3, [pc, #16]	; (8009080 <__assert_func+0x38>)
 800906e:	461c      	mov	r4, r3
 8009070:	e7f3      	b.n	800905a <__assert_func+0x12>
 8009072:	bf00      	nop
 8009074:	2000047c 	.word	0x2000047c
 8009078:	0800b41b 	.word	0x0800b41b
 800907c:	0800b428 	.word	0x0800b428
 8009080:	0800b456 	.word	0x0800b456

08009084 <quorem>:
 8009084:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009088:	6903      	ldr	r3, [r0, #16]
 800908a:	690c      	ldr	r4, [r1, #16]
 800908c:	42a3      	cmp	r3, r4
 800908e:	4607      	mov	r7, r0
 8009090:	db7e      	blt.n	8009190 <quorem+0x10c>
 8009092:	3c01      	subs	r4, #1
 8009094:	f101 0814 	add.w	r8, r1, #20
 8009098:	f100 0514 	add.w	r5, r0, #20
 800909c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80090a0:	9301      	str	r3, [sp, #4]
 80090a2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80090a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80090aa:	3301      	adds	r3, #1
 80090ac:	429a      	cmp	r2, r3
 80090ae:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80090b2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80090b6:	fbb2 f6f3 	udiv	r6, r2, r3
 80090ba:	d331      	bcc.n	8009120 <quorem+0x9c>
 80090bc:	f04f 0e00 	mov.w	lr, #0
 80090c0:	4640      	mov	r0, r8
 80090c2:	46ac      	mov	ip, r5
 80090c4:	46f2      	mov	sl, lr
 80090c6:	f850 2b04 	ldr.w	r2, [r0], #4
 80090ca:	b293      	uxth	r3, r2
 80090cc:	fb06 e303 	mla	r3, r6, r3, lr
 80090d0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80090d4:	0c1a      	lsrs	r2, r3, #16
 80090d6:	b29b      	uxth	r3, r3
 80090d8:	ebaa 0303 	sub.w	r3, sl, r3
 80090dc:	f8dc a000 	ldr.w	sl, [ip]
 80090e0:	fa13 f38a 	uxtah	r3, r3, sl
 80090e4:	fb06 220e 	mla	r2, r6, lr, r2
 80090e8:	9300      	str	r3, [sp, #0]
 80090ea:	9b00      	ldr	r3, [sp, #0]
 80090ec:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80090f0:	b292      	uxth	r2, r2
 80090f2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80090f6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80090fa:	f8bd 3000 	ldrh.w	r3, [sp]
 80090fe:	4581      	cmp	r9, r0
 8009100:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009104:	f84c 3b04 	str.w	r3, [ip], #4
 8009108:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800910c:	d2db      	bcs.n	80090c6 <quorem+0x42>
 800910e:	f855 300b 	ldr.w	r3, [r5, fp]
 8009112:	b92b      	cbnz	r3, 8009120 <quorem+0x9c>
 8009114:	9b01      	ldr	r3, [sp, #4]
 8009116:	3b04      	subs	r3, #4
 8009118:	429d      	cmp	r5, r3
 800911a:	461a      	mov	r2, r3
 800911c:	d32c      	bcc.n	8009178 <quorem+0xf4>
 800911e:	613c      	str	r4, [r7, #16]
 8009120:	4638      	mov	r0, r7
 8009122:	f001 f921 	bl	800a368 <__mcmp>
 8009126:	2800      	cmp	r0, #0
 8009128:	db22      	blt.n	8009170 <quorem+0xec>
 800912a:	3601      	adds	r6, #1
 800912c:	4629      	mov	r1, r5
 800912e:	2000      	movs	r0, #0
 8009130:	f858 2b04 	ldr.w	r2, [r8], #4
 8009134:	f8d1 c000 	ldr.w	ip, [r1]
 8009138:	b293      	uxth	r3, r2
 800913a:	1ac3      	subs	r3, r0, r3
 800913c:	0c12      	lsrs	r2, r2, #16
 800913e:	fa13 f38c 	uxtah	r3, r3, ip
 8009142:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009146:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800914a:	b29b      	uxth	r3, r3
 800914c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009150:	45c1      	cmp	r9, r8
 8009152:	f841 3b04 	str.w	r3, [r1], #4
 8009156:	ea4f 4022 	mov.w	r0, r2, asr #16
 800915a:	d2e9      	bcs.n	8009130 <quorem+0xac>
 800915c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009160:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009164:	b922      	cbnz	r2, 8009170 <quorem+0xec>
 8009166:	3b04      	subs	r3, #4
 8009168:	429d      	cmp	r5, r3
 800916a:	461a      	mov	r2, r3
 800916c:	d30a      	bcc.n	8009184 <quorem+0x100>
 800916e:	613c      	str	r4, [r7, #16]
 8009170:	4630      	mov	r0, r6
 8009172:	b003      	add	sp, #12
 8009174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009178:	6812      	ldr	r2, [r2, #0]
 800917a:	3b04      	subs	r3, #4
 800917c:	2a00      	cmp	r2, #0
 800917e:	d1ce      	bne.n	800911e <quorem+0x9a>
 8009180:	3c01      	subs	r4, #1
 8009182:	e7c9      	b.n	8009118 <quorem+0x94>
 8009184:	6812      	ldr	r2, [r2, #0]
 8009186:	3b04      	subs	r3, #4
 8009188:	2a00      	cmp	r2, #0
 800918a:	d1f0      	bne.n	800916e <quorem+0xea>
 800918c:	3c01      	subs	r4, #1
 800918e:	e7eb      	b.n	8009168 <quorem+0xe4>
 8009190:	2000      	movs	r0, #0
 8009192:	e7ee      	b.n	8009172 <quorem+0xee>
 8009194:	0000      	movs	r0, r0
	...

08009198 <_dtoa_r>:
 8009198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800919c:	ed2d 8b02 	vpush	{d8}
 80091a0:	69c5      	ldr	r5, [r0, #28]
 80091a2:	b091      	sub	sp, #68	; 0x44
 80091a4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80091a8:	ec59 8b10 	vmov	r8, r9, d0
 80091ac:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80091ae:	9106      	str	r1, [sp, #24]
 80091b0:	4606      	mov	r6, r0
 80091b2:	9208      	str	r2, [sp, #32]
 80091b4:	930c      	str	r3, [sp, #48]	; 0x30
 80091b6:	b975      	cbnz	r5, 80091d6 <_dtoa_r+0x3e>
 80091b8:	2010      	movs	r0, #16
 80091ba:	f000 fda5 	bl	8009d08 <malloc>
 80091be:	4602      	mov	r2, r0
 80091c0:	61f0      	str	r0, [r6, #28]
 80091c2:	b920      	cbnz	r0, 80091ce <_dtoa_r+0x36>
 80091c4:	4ba6      	ldr	r3, [pc, #664]	; (8009460 <_dtoa_r+0x2c8>)
 80091c6:	21ef      	movs	r1, #239	; 0xef
 80091c8:	48a6      	ldr	r0, [pc, #664]	; (8009464 <_dtoa_r+0x2cc>)
 80091ca:	f7ff ff3d 	bl	8009048 <__assert_func>
 80091ce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80091d2:	6005      	str	r5, [r0, #0]
 80091d4:	60c5      	str	r5, [r0, #12]
 80091d6:	69f3      	ldr	r3, [r6, #28]
 80091d8:	6819      	ldr	r1, [r3, #0]
 80091da:	b151      	cbz	r1, 80091f2 <_dtoa_r+0x5a>
 80091dc:	685a      	ldr	r2, [r3, #4]
 80091de:	604a      	str	r2, [r1, #4]
 80091e0:	2301      	movs	r3, #1
 80091e2:	4093      	lsls	r3, r2
 80091e4:	608b      	str	r3, [r1, #8]
 80091e6:	4630      	mov	r0, r6
 80091e8:	f000 fe82 	bl	8009ef0 <_Bfree>
 80091ec:	69f3      	ldr	r3, [r6, #28]
 80091ee:	2200      	movs	r2, #0
 80091f0:	601a      	str	r2, [r3, #0]
 80091f2:	f1b9 0300 	subs.w	r3, r9, #0
 80091f6:	bfbb      	ittet	lt
 80091f8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80091fc:	9303      	strlt	r3, [sp, #12]
 80091fe:	2300      	movge	r3, #0
 8009200:	2201      	movlt	r2, #1
 8009202:	bfac      	ite	ge
 8009204:	6023      	strge	r3, [r4, #0]
 8009206:	6022      	strlt	r2, [r4, #0]
 8009208:	4b97      	ldr	r3, [pc, #604]	; (8009468 <_dtoa_r+0x2d0>)
 800920a:	9c03      	ldr	r4, [sp, #12]
 800920c:	43a3      	bics	r3, r4
 800920e:	d11c      	bne.n	800924a <_dtoa_r+0xb2>
 8009210:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009212:	f242 730f 	movw	r3, #9999	; 0x270f
 8009216:	6013      	str	r3, [r2, #0]
 8009218:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800921c:	ea53 0308 	orrs.w	r3, r3, r8
 8009220:	f000 84fb 	beq.w	8009c1a <_dtoa_r+0xa82>
 8009224:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009226:	b963      	cbnz	r3, 8009242 <_dtoa_r+0xaa>
 8009228:	4b90      	ldr	r3, [pc, #576]	; (800946c <_dtoa_r+0x2d4>)
 800922a:	e020      	b.n	800926e <_dtoa_r+0xd6>
 800922c:	4b90      	ldr	r3, [pc, #576]	; (8009470 <_dtoa_r+0x2d8>)
 800922e:	9301      	str	r3, [sp, #4]
 8009230:	3308      	adds	r3, #8
 8009232:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009234:	6013      	str	r3, [r2, #0]
 8009236:	9801      	ldr	r0, [sp, #4]
 8009238:	b011      	add	sp, #68	; 0x44
 800923a:	ecbd 8b02 	vpop	{d8}
 800923e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009242:	4b8a      	ldr	r3, [pc, #552]	; (800946c <_dtoa_r+0x2d4>)
 8009244:	9301      	str	r3, [sp, #4]
 8009246:	3303      	adds	r3, #3
 8009248:	e7f3      	b.n	8009232 <_dtoa_r+0x9a>
 800924a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800924e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009256:	d10c      	bne.n	8009272 <_dtoa_r+0xda>
 8009258:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800925a:	2301      	movs	r3, #1
 800925c:	6013      	str	r3, [r2, #0]
 800925e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009260:	2b00      	cmp	r3, #0
 8009262:	f000 84d7 	beq.w	8009c14 <_dtoa_r+0xa7c>
 8009266:	4b83      	ldr	r3, [pc, #524]	; (8009474 <_dtoa_r+0x2dc>)
 8009268:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800926a:	6013      	str	r3, [r2, #0]
 800926c:	3b01      	subs	r3, #1
 800926e:	9301      	str	r3, [sp, #4]
 8009270:	e7e1      	b.n	8009236 <_dtoa_r+0x9e>
 8009272:	aa0e      	add	r2, sp, #56	; 0x38
 8009274:	a90f      	add	r1, sp, #60	; 0x3c
 8009276:	4630      	mov	r0, r6
 8009278:	eeb0 0b48 	vmov.f64	d0, d8
 800927c:	f001 f91a 	bl	800a4b4 <__d2b>
 8009280:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8009284:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009286:	4605      	mov	r5, r0
 8009288:	2b00      	cmp	r3, #0
 800928a:	d046      	beq.n	800931a <_dtoa_r+0x182>
 800928c:	eeb0 7b48 	vmov.f64	d7, d8
 8009290:	ee18 1a90 	vmov	r1, s17
 8009294:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009298:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800929c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80092a0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80092a4:	2000      	movs	r0, #0
 80092a6:	ee07 1a90 	vmov	s15, r1
 80092aa:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 80092ae:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8009448 <_dtoa_r+0x2b0>
 80092b2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80092b6:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8009450 <_dtoa_r+0x2b8>
 80092ba:	eea7 6b05 	vfma.f64	d6, d7, d5
 80092be:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8009458 <_dtoa_r+0x2c0>
 80092c2:	ee07 3a90 	vmov	s15, r3
 80092c6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80092ca:	eeb0 7b46 	vmov.f64	d7, d6
 80092ce:	eea4 7b05 	vfma.f64	d7, d4, d5
 80092d2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80092d6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80092da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092de:	ee16 ba90 	vmov	fp, s13
 80092e2:	9009      	str	r0, [sp, #36]	; 0x24
 80092e4:	d508      	bpl.n	80092f8 <_dtoa_r+0x160>
 80092e6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80092ea:	eeb4 6b47 	vcmp.f64	d6, d7
 80092ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092f2:	bf18      	it	ne
 80092f4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80092f8:	f1bb 0f16 	cmp.w	fp, #22
 80092fc:	d82b      	bhi.n	8009356 <_dtoa_r+0x1be>
 80092fe:	495e      	ldr	r1, [pc, #376]	; (8009478 <_dtoa_r+0x2e0>)
 8009300:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8009304:	ed91 7b00 	vldr	d7, [r1]
 8009308:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800930c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009310:	d501      	bpl.n	8009316 <_dtoa_r+0x17e>
 8009312:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009316:	2100      	movs	r1, #0
 8009318:	e01e      	b.n	8009358 <_dtoa_r+0x1c0>
 800931a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800931c:	4413      	add	r3, r2
 800931e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8009322:	2920      	cmp	r1, #32
 8009324:	bfc1      	itttt	gt
 8009326:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800932a:	408c      	lslgt	r4, r1
 800932c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8009330:	fa28 f101 	lsrgt.w	r1, r8, r1
 8009334:	bfd6      	itet	le
 8009336:	f1c1 0120 	rsble	r1, r1, #32
 800933a:	4321      	orrgt	r1, r4
 800933c:	fa08 f101 	lslle.w	r1, r8, r1
 8009340:	ee07 1a90 	vmov	s15, r1
 8009344:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009348:	3b01      	subs	r3, #1
 800934a:	ee17 1a90 	vmov	r1, s15
 800934e:	2001      	movs	r0, #1
 8009350:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8009354:	e7a7      	b.n	80092a6 <_dtoa_r+0x10e>
 8009356:	2101      	movs	r1, #1
 8009358:	1ad2      	subs	r2, r2, r3
 800935a:	1e53      	subs	r3, r2, #1
 800935c:	9305      	str	r3, [sp, #20]
 800935e:	bf45      	ittet	mi
 8009360:	f1c2 0301 	rsbmi	r3, r2, #1
 8009364:	9304      	strmi	r3, [sp, #16]
 8009366:	2300      	movpl	r3, #0
 8009368:	2300      	movmi	r3, #0
 800936a:	bf4c      	ite	mi
 800936c:	9305      	strmi	r3, [sp, #20]
 800936e:	9304      	strpl	r3, [sp, #16]
 8009370:	f1bb 0f00 	cmp.w	fp, #0
 8009374:	910b      	str	r1, [sp, #44]	; 0x2c
 8009376:	db18      	blt.n	80093aa <_dtoa_r+0x212>
 8009378:	9b05      	ldr	r3, [sp, #20]
 800937a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800937e:	445b      	add	r3, fp
 8009380:	9305      	str	r3, [sp, #20]
 8009382:	2300      	movs	r3, #0
 8009384:	9a06      	ldr	r2, [sp, #24]
 8009386:	2a09      	cmp	r2, #9
 8009388:	d848      	bhi.n	800941c <_dtoa_r+0x284>
 800938a:	2a05      	cmp	r2, #5
 800938c:	bfc4      	itt	gt
 800938e:	3a04      	subgt	r2, #4
 8009390:	9206      	strgt	r2, [sp, #24]
 8009392:	9a06      	ldr	r2, [sp, #24]
 8009394:	f1a2 0202 	sub.w	r2, r2, #2
 8009398:	bfcc      	ite	gt
 800939a:	2400      	movgt	r4, #0
 800939c:	2401      	movle	r4, #1
 800939e:	2a03      	cmp	r2, #3
 80093a0:	d847      	bhi.n	8009432 <_dtoa_r+0x29a>
 80093a2:	e8df f002 	tbb	[pc, r2]
 80093a6:	2d0b      	.short	0x2d0b
 80093a8:	392b      	.short	0x392b
 80093aa:	9b04      	ldr	r3, [sp, #16]
 80093ac:	2200      	movs	r2, #0
 80093ae:	eba3 030b 	sub.w	r3, r3, fp
 80093b2:	9304      	str	r3, [sp, #16]
 80093b4:	920a      	str	r2, [sp, #40]	; 0x28
 80093b6:	f1cb 0300 	rsb	r3, fp, #0
 80093ba:	e7e3      	b.n	8009384 <_dtoa_r+0x1ec>
 80093bc:	2200      	movs	r2, #0
 80093be:	9207      	str	r2, [sp, #28]
 80093c0:	9a08      	ldr	r2, [sp, #32]
 80093c2:	2a00      	cmp	r2, #0
 80093c4:	dc38      	bgt.n	8009438 <_dtoa_r+0x2a0>
 80093c6:	f04f 0a01 	mov.w	sl, #1
 80093ca:	46d1      	mov	r9, sl
 80093cc:	4652      	mov	r2, sl
 80093ce:	f8cd a020 	str.w	sl, [sp, #32]
 80093d2:	69f7      	ldr	r7, [r6, #28]
 80093d4:	2100      	movs	r1, #0
 80093d6:	2004      	movs	r0, #4
 80093d8:	f100 0c14 	add.w	ip, r0, #20
 80093dc:	4594      	cmp	ip, r2
 80093de:	d930      	bls.n	8009442 <_dtoa_r+0x2aa>
 80093e0:	6079      	str	r1, [r7, #4]
 80093e2:	4630      	mov	r0, r6
 80093e4:	930d      	str	r3, [sp, #52]	; 0x34
 80093e6:	f000 fd43 	bl	8009e70 <_Balloc>
 80093ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093ec:	9001      	str	r0, [sp, #4]
 80093ee:	4602      	mov	r2, r0
 80093f0:	2800      	cmp	r0, #0
 80093f2:	d145      	bne.n	8009480 <_dtoa_r+0x2e8>
 80093f4:	4b21      	ldr	r3, [pc, #132]	; (800947c <_dtoa_r+0x2e4>)
 80093f6:	f240 11af 	movw	r1, #431	; 0x1af
 80093fa:	e6e5      	b.n	80091c8 <_dtoa_r+0x30>
 80093fc:	2201      	movs	r2, #1
 80093fe:	e7de      	b.n	80093be <_dtoa_r+0x226>
 8009400:	2200      	movs	r2, #0
 8009402:	9207      	str	r2, [sp, #28]
 8009404:	9a08      	ldr	r2, [sp, #32]
 8009406:	eb0b 0a02 	add.w	sl, fp, r2
 800940a:	f10a 0901 	add.w	r9, sl, #1
 800940e:	464a      	mov	r2, r9
 8009410:	2a01      	cmp	r2, #1
 8009412:	bfb8      	it	lt
 8009414:	2201      	movlt	r2, #1
 8009416:	e7dc      	b.n	80093d2 <_dtoa_r+0x23a>
 8009418:	2201      	movs	r2, #1
 800941a:	e7f2      	b.n	8009402 <_dtoa_r+0x26a>
 800941c:	2401      	movs	r4, #1
 800941e:	2200      	movs	r2, #0
 8009420:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8009424:	f04f 3aff 	mov.w	sl, #4294967295
 8009428:	2100      	movs	r1, #0
 800942a:	46d1      	mov	r9, sl
 800942c:	2212      	movs	r2, #18
 800942e:	9108      	str	r1, [sp, #32]
 8009430:	e7cf      	b.n	80093d2 <_dtoa_r+0x23a>
 8009432:	2201      	movs	r2, #1
 8009434:	9207      	str	r2, [sp, #28]
 8009436:	e7f5      	b.n	8009424 <_dtoa_r+0x28c>
 8009438:	f8dd a020 	ldr.w	sl, [sp, #32]
 800943c:	46d1      	mov	r9, sl
 800943e:	4652      	mov	r2, sl
 8009440:	e7c7      	b.n	80093d2 <_dtoa_r+0x23a>
 8009442:	3101      	adds	r1, #1
 8009444:	0040      	lsls	r0, r0, #1
 8009446:	e7c7      	b.n	80093d8 <_dtoa_r+0x240>
 8009448:	636f4361 	.word	0x636f4361
 800944c:	3fd287a7 	.word	0x3fd287a7
 8009450:	8b60c8b3 	.word	0x8b60c8b3
 8009454:	3fc68a28 	.word	0x3fc68a28
 8009458:	509f79fb 	.word	0x509f79fb
 800945c:	3fd34413 	.word	0x3fd34413
 8009460:	0800b378 	.word	0x0800b378
 8009464:	0800b464 	.word	0x0800b464
 8009468:	7ff00000 	.word	0x7ff00000
 800946c:	0800b460 	.word	0x0800b460
 8009470:	0800b457 	.word	0x0800b457
 8009474:	0800b3f8 	.word	0x0800b3f8
 8009478:	0800b550 	.word	0x0800b550
 800947c:	0800b4bc 	.word	0x0800b4bc
 8009480:	69f2      	ldr	r2, [r6, #28]
 8009482:	9901      	ldr	r1, [sp, #4]
 8009484:	6011      	str	r1, [r2, #0]
 8009486:	f1b9 0f0e 	cmp.w	r9, #14
 800948a:	d86c      	bhi.n	8009566 <_dtoa_r+0x3ce>
 800948c:	2c00      	cmp	r4, #0
 800948e:	d06a      	beq.n	8009566 <_dtoa_r+0x3ce>
 8009490:	f1bb 0f00 	cmp.w	fp, #0
 8009494:	f340 80a0 	ble.w	80095d8 <_dtoa_r+0x440>
 8009498:	4ac1      	ldr	r2, [pc, #772]	; (80097a0 <_dtoa_r+0x608>)
 800949a:	f00b 010f 	and.w	r1, fp, #15
 800949e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80094a2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80094a6:	ed92 7b00 	vldr	d7, [r2]
 80094aa:	ea4f 122b 	mov.w	r2, fp, asr #4
 80094ae:	f000 8087 	beq.w	80095c0 <_dtoa_r+0x428>
 80094b2:	49bc      	ldr	r1, [pc, #752]	; (80097a4 <_dtoa_r+0x60c>)
 80094b4:	ed91 6b08 	vldr	d6, [r1, #32]
 80094b8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80094bc:	ed8d 6b02 	vstr	d6, [sp, #8]
 80094c0:	f002 020f 	and.w	r2, r2, #15
 80094c4:	2103      	movs	r1, #3
 80094c6:	48b7      	ldr	r0, [pc, #732]	; (80097a4 <_dtoa_r+0x60c>)
 80094c8:	2a00      	cmp	r2, #0
 80094ca:	d17b      	bne.n	80095c4 <_dtoa_r+0x42c>
 80094cc:	ed9d 6b02 	vldr	d6, [sp, #8]
 80094d0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80094d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80094d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80094da:	ed9d 7b02 	vldr	d7, [sp, #8]
 80094de:	2a00      	cmp	r2, #0
 80094e0:	f000 80a0 	beq.w	8009624 <_dtoa_r+0x48c>
 80094e4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80094e8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80094ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094f0:	f140 8098 	bpl.w	8009624 <_dtoa_r+0x48c>
 80094f4:	f1b9 0f00 	cmp.w	r9, #0
 80094f8:	f000 8094 	beq.w	8009624 <_dtoa_r+0x48c>
 80094fc:	f1ba 0f00 	cmp.w	sl, #0
 8009500:	dd2f      	ble.n	8009562 <_dtoa_r+0x3ca>
 8009502:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8009506:	ee27 7b06 	vmul.f64	d7, d7, d6
 800950a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800950e:	f10b 32ff 	add.w	r2, fp, #4294967295
 8009512:	3101      	adds	r1, #1
 8009514:	4654      	mov	r4, sl
 8009516:	ed9d 6b02 	vldr	d6, [sp, #8]
 800951a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800951e:	ee07 1a90 	vmov	s15, r1
 8009522:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009526:	eea7 5b06 	vfma.f64	d5, d7, d6
 800952a:	ee15 7a90 	vmov	r7, s11
 800952e:	ec51 0b15 	vmov	r0, r1, d5
 8009532:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8009536:	2c00      	cmp	r4, #0
 8009538:	d177      	bne.n	800962a <_dtoa_r+0x492>
 800953a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800953e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009542:	ec41 0b17 	vmov	d7, r0, r1
 8009546:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800954a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800954e:	f300 826a 	bgt.w	8009a26 <_dtoa_r+0x88e>
 8009552:	eeb1 7b47 	vneg.f64	d7, d7
 8009556:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800955a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800955e:	f100 8260 	bmi.w	8009a22 <_dtoa_r+0x88a>
 8009562:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009566:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009568:	2a00      	cmp	r2, #0
 800956a:	f2c0 811d 	blt.w	80097a8 <_dtoa_r+0x610>
 800956e:	f1bb 0f0e 	cmp.w	fp, #14
 8009572:	f300 8119 	bgt.w	80097a8 <_dtoa_r+0x610>
 8009576:	4b8a      	ldr	r3, [pc, #552]	; (80097a0 <_dtoa_r+0x608>)
 8009578:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800957c:	ed93 6b00 	vldr	d6, [r3]
 8009580:	9b08      	ldr	r3, [sp, #32]
 8009582:	2b00      	cmp	r3, #0
 8009584:	f280 80b7 	bge.w	80096f6 <_dtoa_r+0x55e>
 8009588:	f1b9 0f00 	cmp.w	r9, #0
 800958c:	f300 80b3 	bgt.w	80096f6 <_dtoa_r+0x55e>
 8009590:	f040 8246 	bne.w	8009a20 <_dtoa_r+0x888>
 8009594:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009598:	ee26 6b07 	vmul.f64	d6, d6, d7
 800959c:	ed9d 7b02 	vldr	d7, [sp, #8]
 80095a0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80095a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095a8:	464c      	mov	r4, r9
 80095aa:	464f      	mov	r7, r9
 80095ac:	f280 821c 	bge.w	80099e8 <_dtoa_r+0x850>
 80095b0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80095b4:	2331      	movs	r3, #49	; 0x31
 80095b6:	f808 3b01 	strb.w	r3, [r8], #1
 80095ba:	f10b 0b01 	add.w	fp, fp, #1
 80095be:	e218      	b.n	80099f2 <_dtoa_r+0x85a>
 80095c0:	2102      	movs	r1, #2
 80095c2:	e780      	b.n	80094c6 <_dtoa_r+0x32e>
 80095c4:	07d4      	lsls	r4, r2, #31
 80095c6:	d504      	bpl.n	80095d2 <_dtoa_r+0x43a>
 80095c8:	ed90 6b00 	vldr	d6, [r0]
 80095cc:	3101      	adds	r1, #1
 80095ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 80095d2:	1052      	asrs	r2, r2, #1
 80095d4:	3008      	adds	r0, #8
 80095d6:	e777      	b.n	80094c8 <_dtoa_r+0x330>
 80095d8:	d022      	beq.n	8009620 <_dtoa_r+0x488>
 80095da:	f1cb 0200 	rsb	r2, fp, #0
 80095de:	4970      	ldr	r1, [pc, #448]	; (80097a0 <_dtoa_r+0x608>)
 80095e0:	f002 000f 	and.w	r0, r2, #15
 80095e4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80095e8:	ed91 7b00 	vldr	d7, [r1]
 80095ec:	ee28 7b07 	vmul.f64	d7, d8, d7
 80095f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80095f4:	486b      	ldr	r0, [pc, #428]	; (80097a4 <_dtoa_r+0x60c>)
 80095f6:	1112      	asrs	r2, r2, #4
 80095f8:	2400      	movs	r4, #0
 80095fa:	2102      	movs	r1, #2
 80095fc:	b92a      	cbnz	r2, 800960a <_dtoa_r+0x472>
 80095fe:	2c00      	cmp	r4, #0
 8009600:	f43f af6a 	beq.w	80094d8 <_dtoa_r+0x340>
 8009604:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009608:	e766      	b.n	80094d8 <_dtoa_r+0x340>
 800960a:	07d7      	lsls	r7, r2, #31
 800960c:	d505      	bpl.n	800961a <_dtoa_r+0x482>
 800960e:	ed90 6b00 	vldr	d6, [r0]
 8009612:	3101      	adds	r1, #1
 8009614:	2401      	movs	r4, #1
 8009616:	ee27 7b06 	vmul.f64	d7, d7, d6
 800961a:	1052      	asrs	r2, r2, #1
 800961c:	3008      	adds	r0, #8
 800961e:	e7ed      	b.n	80095fc <_dtoa_r+0x464>
 8009620:	2102      	movs	r1, #2
 8009622:	e759      	b.n	80094d8 <_dtoa_r+0x340>
 8009624:	465a      	mov	r2, fp
 8009626:	464c      	mov	r4, r9
 8009628:	e775      	b.n	8009516 <_dtoa_r+0x37e>
 800962a:	ec41 0b17 	vmov	d7, r0, r1
 800962e:	495c      	ldr	r1, [pc, #368]	; (80097a0 <_dtoa_r+0x608>)
 8009630:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8009634:	ed11 4b02 	vldr	d4, [r1, #-8]
 8009638:	9901      	ldr	r1, [sp, #4]
 800963a:	440c      	add	r4, r1
 800963c:	9907      	ldr	r1, [sp, #28]
 800963e:	b351      	cbz	r1, 8009696 <_dtoa_r+0x4fe>
 8009640:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8009644:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8009648:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800964c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009650:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009654:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009658:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800965c:	ee14 1a90 	vmov	r1, s9
 8009660:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009664:	3130      	adds	r1, #48	; 0x30
 8009666:	ee36 6b45 	vsub.f64	d6, d6, d5
 800966a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800966e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009672:	f808 1b01 	strb.w	r1, [r8], #1
 8009676:	d439      	bmi.n	80096ec <_dtoa_r+0x554>
 8009678:	ee32 5b46 	vsub.f64	d5, d2, d6
 800967c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009684:	d472      	bmi.n	800976c <_dtoa_r+0x5d4>
 8009686:	45a0      	cmp	r8, r4
 8009688:	f43f af6b 	beq.w	8009562 <_dtoa_r+0x3ca>
 800968c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009690:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009694:	e7e0      	b.n	8009658 <_dtoa_r+0x4c0>
 8009696:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800969a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800969e:	4620      	mov	r0, r4
 80096a0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80096a4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80096a8:	ee14 1a90 	vmov	r1, s9
 80096ac:	3130      	adds	r1, #48	; 0x30
 80096ae:	f808 1b01 	strb.w	r1, [r8], #1
 80096b2:	45a0      	cmp	r8, r4
 80096b4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80096b8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80096bc:	d118      	bne.n	80096f0 <_dtoa_r+0x558>
 80096be:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80096c2:	ee37 4b05 	vadd.f64	d4, d7, d5
 80096c6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80096ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096ce:	dc4d      	bgt.n	800976c <_dtoa_r+0x5d4>
 80096d0:	ee35 5b47 	vsub.f64	d5, d5, d7
 80096d4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80096d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096dc:	f57f af41 	bpl.w	8009562 <_dtoa_r+0x3ca>
 80096e0:	4680      	mov	r8, r0
 80096e2:	3801      	subs	r0, #1
 80096e4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80096e8:	2b30      	cmp	r3, #48	; 0x30
 80096ea:	d0f9      	beq.n	80096e0 <_dtoa_r+0x548>
 80096ec:	4693      	mov	fp, r2
 80096ee:	e02a      	b.n	8009746 <_dtoa_r+0x5ae>
 80096f0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80096f4:	e7d6      	b.n	80096a4 <_dtoa_r+0x50c>
 80096f6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80096fa:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80096fe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009702:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009706:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800970a:	ee15 3a10 	vmov	r3, s10
 800970e:	3330      	adds	r3, #48	; 0x30
 8009710:	f808 3b01 	strb.w	r3, [r8], #1
 8009714:	9b01      	ldr	r3, [sp, #4]
 8009716:	eba8 0303 	sub.w	r3, r8, r3
 800971a:	4599      	cmp	r9, r3
 800971c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009720:	eea3 7b46 	vfms.f64	d7, d3, d6
 8009724:	d133      	bne.n	800978e <_dtoa_r+0x5f6>
 8009726:	ee37 7b07 	vadd.f64	d7, d7, d7
 800972a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800972e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009732:	dc1a      	bgt.n	800976a <_dtoa_r+0x5d2>
 8009734:	eeb4 7b46 	vcmp.f64	d7, d6
 8009738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800973c:	d103      	bne.n	8009746 <_dtoa_r+0x5ae>
 800973e:	ee15 3a10 	vmov	r3, s10
 8009742:	07d9      	lsls	r1, r3, #31
 8009744:	d411      	bmi.n	800976a <_dtoa_r+0x5d2>
 8009746:	4629      	mov	r1, r5
 8009748:	4630      	mov	r0, r6
 800974a:	f000 fbd1 	bl	8009ef0 <_Bfree>
 800974e:	2300      	movs	r3, #0
 8009750:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009752:	f888 3000 	strb.w	r3, [r8]
 8009756:	f10b 0301 	add.w	r3, fp, #1
 800975a:	6013      	str	r3, [r2, #0]
 800975c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800975e:	2b00      	cmp	r3, #0
 8009760:	f43f ad69 	beq.w	8009236 <_dtoa_r+0x9e>
 8009764:	f8c3 8000 	str.w	r8, [r3]
 8009768:	e565      	b.n	8009236 <_dtoa_r+0x9e>
 800976a:	465a      	mov	r2, fp
 800976c:	4643      	mov	r3, r8
 800976e:	4698      	mov	r8, r3
 8009770:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8009774:	2939      	cmp	r1, #57	; 0x39
 8009776:	d106      	bne.n	8009786 <_dtoa_r+0x5ee>
 8009778:	9901      	ldr	r1, [sp, #4]
 800977a:	4299      	cmp	r1, r3
 800977c:	d1f7      	bne.n	800976e <_dtoa_r+0x5d6>
 800977e:	9801      	ldr	r0, [sp, #4]
 8009780:	2130      	movs	r1, #48	; 0x30
 8009782:	3201      	adds	r2, #1
 8009784:	7001      	strb	r1, [r0, #0]
 8009786:	7819      	ldrb	r1, [r3, #0]
 8009788:	3101      	adds	r1, #1
 800978a:	7019      	strb	r1, [r3, #0]
 800978c:	e7ae      	b.n	80096ec <_dtoa_r+0x554>
 800978e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009792:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800979a:	d1b2      	bne.n	8009702 <_dtoa_r+0x56a>
 800979c:	e7d3      	b.n	8009746 <_dtoa_r+0x5ae>
 800979e:	bf00      	nop
 80097a0:	0800b550 	.word	0x0800b550
 80097a4:	0800b528 	.word	0x0800b528
 80097a8:	9907      	ldr	r1, [sp, #28]
 80097aa:	2900      	cmp	r1, #0
 80097ac:	f000 80d0 	beq.w	8009950 <_dtoa_r+0x7b8>
 80097b0:	9906      	ldr	r1, [sp, #24]
 80097b2:	2901      	cmp	r1, #1
 80097b4:	f300 80b4 	bgt.w	8009920 <_dtoa_r+0x788>
 80097b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80097ba:	2900      	cmp	r1, #0
 80097bc:	f000 80ac 	beq.w	8009918 <_dtoa_r+0x780>
 80097c0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80097c4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80097c8:	461c      	mov	r4, r3
 80097ca:	9309      	str	r3, [sp, #36]	; 0x24
 80097cc:	9b04      	ldr	r3, [sp, #16]
 80097ce:	4413      	add	r3, r2
 80097d0:	9304      	str	r3, [sp, #16]
 80097d2:	9b05      	ldr	r3, [sp, #20]
 80097d4:	2101      	movs	r1, #1
 80097d6:	4413      	add	r3, r2
 80097d8:	4630      	mov	r0, r6
 80097da:	9305      	str	r3, [sp, #20]
 80097dc:	f000 fc3e 	bl	800a05c <__i2b>
 80097e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097e2:	4607      	mov	r7, r0
 80097e4:	f1b8 0f00 	cmp.w	r8, #0
 80097e8:	d00d      	beq.n	8009806 <_dtoa_r+0x66e>
 80097ea:	9a05      	ldr	r2, [sp, #20]
 80097ec:	2a00      	cmp	r2, #0
 80097ee:	dd0a      	ble.n	8009806 <_dtoa_r+0x66e>
 80097f0:	4542      	cmp	r2, r8
 80097f2:	9904      	ldr	r1, [sp, #16]
 80097f4:	bfa8      	it	ge
 80097f6:	4642      	movge	r2, r8
 80097f8:	1a89      	subs	r1, r1, r2
 80097fa:	9104      	str	r1, [sp, #16]
 80097fc:	9905      	ldr	r1, [sp, #20]
 80097fe:	eba8 0802 	sub.w	r8, r8, r2
 8009802:	1a8a      	subs	r2, r1, r2
 8009804:	9205      	str	r2, [sp, #20]
 8009806:	b303      	cbz	r3, 800984a <_dtoa_r+0x6b2>
 8009808:	9a07      	ldr	r2, [sp, #28]
 800980a:	2a00      	cmp	r2, #0
 800980c:	f000 80a5 	beq.w	800995a <_dtoa_r+0x7c2>
 8009810:	2c00      	cmp	r4, #0
 8009812:	dd13      	ble.n	800983c <_dtoa_r+0x6a4>
 8009814:	4639      	mov	r1, r7
 8009816:	4622      	mov	r2, r4
 8009818:	4630      	mov	r0, r6
 800981a:	930d      	str	r3, [sp, #52]	; 0x34
 800981c:	f000 fcde 	bl	800a1dc <__pow5mult>
 8009820:	462a      	mov	r2, r5
 8009822:	4601      	mov	r1, r0
 8009824:	4607      	mov	r7, r0
 8009826:	4630      	mov	r0, r6
 8009828:	f000 fc2e 	bl	800a088 <__multiply>
 800982c:	4629      	mov	r1, r5
 800982e:	9009      	str	r0, [sp, #36]	; 0x24
 8009830:	4630      	mov	r0, r6
 8009832:	f000 fb5d 	bl	8009ef0 <_Bfree>
 8009836:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009838:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800983a:	4615      	mov	r5, r2
 800983c:	1b1a      	subs	r2, r3, r4
 800983e:	d004      	beq.n	800984a <_dtoa_r+0x6b2>
 8009840:	4629      	mov	r1, r5
 8009842:	4630      	mov	r0, r6
 8009844:	f000 fcca 	bl	800a1dc <__pow5mult>
 8009848:	4605      	mov	r5, r0
 800984a:	2101      	movs	r1, #1
 800984c:	4630      	mov	r0, r6
 800984e:	f000 fc05 	bl	800a05c <__i2b>
 8009852:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009854:	2b00      	cmp	r3, #0
 8009856:	4604      	mov	r4, r0
 8009858:	f340 8081 	ble.w	800995e <_dtoa_r+0x7c6>
 800985c:	461a      	mov	r2, r3
 800985e:	4601      	mov	r1, r0
 8009860:	4630      	mov	r0, r6
 8009862:	f000 fcbb 	bl	800a1dc <__pow5mult>
 8009866:	9b06      	ldr	r3, [sp, #24]
 8009868:	2b01      	cmp	r3, #1
 800986a:	4604      	mov	r4, r0
 800986c:	dd7a      	ble.n	8009964 <_dtoa_r+0x7cc>
 800986e:	2300      	movs	r3, #0
 8009870:	9309      	str	r3, [sp, #36]	; 0x24
 8009872:	6922      	ldr	r2, [r4, #16]
 8009874:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009878:	6910      	ldr	r0, [r2, #16]
 800987a:	f000 fba1 	bl	8009fc0 <__hi0bits>
 800987e:	f1c0 0020 	rsb	r0, r0, #32
 8009882:	9b05      	ldr	r3, [sp, #20]
 8009884:	4418      	add	r0, r3
 8009886:	f010 001f 	ands.w	r0, r0, #31
 800988a:	f000 8093 	beq.w	80099b4 <_dtoa_r+0x81c>
 800988e:	f1c0 0220 	rsb	r2, r0, #32
 8009892:	2a04      	cmp	r2, #4
 8009894:	f340 8085 	ble.w	80099a2 <_dtoa_r+0x80a>
 8009898:	9b04      	ldr	r3, [sp, #16]
 800989a:	f1c0 001c 	rsb	r0, r0, #28
 800989e:	4403      	add	r3, r0
 80098a0:	9304      	str	r3, [sp, #16]
 80098a2:	9b05      	ldr	r3, [sp, #20]
 80098a4:	4480      	add	r8, r0
 80098a6:	4403      	add	r3, r0
 80098a8:	9305      	str	r3, [sp, #20]
 80098aa:	9b04      	ldr	r3, [sp, #16]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	dd05      	ble.n	80098bc <_dtoa_r+0x724>
 80098b0:	4629      	mov	r1, r5
 80098b2:	461a      	mov	r2, r3
 80098b4:	4630      	mov	r0, r6
 80098b6:	f000 fceb 	bl	800a290 <__lshift>
 80098ba:	4605      	mov	r5, r0
 80098bc:	9b05      	ldr	r3, [sp, #20]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	dd05      	ble.n	80098ce <_dtoa_r+0x736>
 80098c2:	4621      	mov	r1, r4
 80098c4:	461a      	mov	r2, r3
 80098c6:	4630      	mov	r0, r6
 80098c8:	f000 fce2 	bl	800a290 <__lshift>
 80098cc:	4604      	mov	r4, r0
 80098ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d071      	beq.n	80099b8 <_dtoa_r+0x820>
 80098d4:	4621      	mov	r1, r4
 80098d6:	4628      	mov	r0, r5
 80098d8:	f000 fd46 	bl	800a368 <__mcmp>
 80098dc:	2800      	cmp	r0, #0
 80098de:	da6b      	bge.n	80099b8 <_dtoa_r+0x820>
 80098e0:	2300      	movs	r3, #0
 80098e2:	4629      	mov	r1, r5
 80098e4:	220a      	movs	r2, #10
 80098e6:	4630      	mov	r0, r6
 80098e8:	f000 fb24 	bl	8009f34 <__multadd>
 80098ec:	9b07      	ldr	r3, [sp, #28]
 80098ee:	f10b 3bff 	add.w	fp, fp, #4294967295
 80098f2:	4605      	mov	r5, r0
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	f000 8197 	beq.w	8009c28 <_dtoa_r+0xa90>
 80098fa:	4639      	mov	r1, r7
 80098fc:	2300      	movs	r3, #0
 80098fe:	220a      	movs	r2, #10
 8009900:	4630      	mov	r0, r6
 8009902:	f000 fb17 	bl	8009f34 <__multadd>
 8009906:	f1ba 0f00 	cmp.w	sl, #0
 800990a:	4607      	mov	r7, r0
 800990c:	f300 8093 	bgt.w	8009a36 <_dtoa_r+0x89e>
 8009910:	9b06      	ldr	r3, [sp, #24]
 8009912:	2b02      	cmp	r3, #2
 8009914:	dc57      	bgt.n	80099c6 <_dtoa_r+0x82e>
 8009916:	e08e      	b.n	8009a36 <_dtoa_r+0x89e>
 8009918:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800991a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800991e:	e751      	b.n	80097c4 <_dtoa_r+0x62c>
 8009920:	f109 34ff 	add.w	r4, r9, #4294967295
 8009924:	42a3      	cmp	r3, r4
 8009926:	bfbf      	itttt	lt
 8009928:	1ae2      	sublt	r2, r4, r3
 800992a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800992c:	189b      	addlt	r3, r3, r2
 800992e:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009930:	bfae      	itee	ge
 8009932:	1b1c      	subge	r4, r3, r4
 8009934:	4623      	movlt	r3, r4
 8009936:	2400      	movlt	r4, #0
 8009938:	f1b9 0f00 	cmp.w	r9, #0
 800993c:	bfb5      	itete	lt
 800993e:	9a04      	ldrlt	r2, [sp, #16]
 8009940:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8009944:	eba2 0809 	sublt.w	r8, r2, r9
 8009948:	464a      	movge	r2, r9
 800994a:	bfb8      	it	lt
 800994c:	2200      	movlt	r2, #0
 800994e:	e73c      	b.n	80097ca <_dtoa_r+0x632>
 8009950:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009954:	9f07      	ldr	r7, [sp, #28]
 8009956:	461c      	mov	r4, r3
 8009958:	e744      	b.n	80097e4 <_dtoa_r+0x64c>
 800995a:	461a      	mov	r2, r3
 800995c:	e770      	b.n	8009840 <_dtoa_r+0x6a8>
 800995e:	9b06      	ldr	r3, [sp, #24]
 8009960:	2b01      	cmp	r3, #1
 8009962:	dc18      	bgt.n	8009996 <_dtoa_r+0x7fe>
 8009964:	9b02      	ldr	r3, [sp, #8]
 8009966:	b9b3      	cbnz	r3, 8009996 <_dtoa_r+0x7fe>
 8009968:	9b03      	ldr	r3, [sp, #12]
 800996a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800996e:	b9a2      	cbnz	r2, 800999a <_dtoa_r+0x802>
 8009970:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009974:	0d12      	lsrs	r2, r2, #20
 8009976:	0512      	lsls	r2, r2, #20
 8009978:	b18a      	cbz	r2, 800999e <_dtoa_r+0x806>
 800997a:	9b04      	ldr	r3, [sp, #16]
 800997c:	3301      	adds	r3, #1
 800997e:	9304      	str	r3, [sp, #16]
 8009980:	9b05      	ldr	r3, [sp, #20]
 8009982:	3301      	adds	r3, #1
 8009984:	9305      	str	r3, [sp, #20]
 8009986:	2301      	movs	r3, #1
 8009988:	9309      	str	r3, [sp, #36]	; 0x24
 800998a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800998c:	2b00      	cmp	r3, #0
 800998e:	f47f af70 	bne.w	8009872 <_dtoa_r+0x6da>
 8009992:	2001      	movs	r0, #1
 8009994:	e775      	b.n	8009882 <_dtoa_r+0x6ea>
 8009996:	2300      	movs	r3, #0
 8009998:	e7f6      	b.n	8009988 <_dtoa_r+0x7f0>
 800999a:	9b02      	ldr	r3, [sp, #8]
 800999c:	e7f4      	b.n	8009988 <_dtoa_r+0x7f0>
 800999e:	9209      	str	r2, [sp, #36]	; 0x24
 80099a0:	e7f3      	b.n	800998a <_dtoa_r+0x7f2>
 80099a2:	d082      	beq.n	80098aa <_dtoa_r+0x712>
 80099a4:	9b04      	ldr	r3, [sp, #16]
 80099a6:	321c      	adds	r2, #28
 80099a8:	4413      	add	r3, r2
 80099aa:	9304      	str	r3, [sp, #16]
 80099ac:	9b05      	ldr	r3, [sp, #20]
 80099ae:	4490      	add	r8, r2
 80099b0:	4413      	add	r3, r2
 80099b2:	e779      	b.n	80098a8 <_dtoa_r+0x710>
 80099b4:	4602      	mov	r2, r0
 80099b6:	e7f5      	b.n	80099a4 <_dtoa_r+0x80c>
 80099b8:	f1b9 0f00 	cmp.w	r9, #0
 80099bc:	dc36      	bgt.n	8009a2c <_dtoa_r+0x894>
 80099be:	9b06      	ldr	r3, [sp, #24]
 80099c0:	2b02      	cmp	r3, #2
 80099c2:	dd33      	ble.n	8009a2c <_dtoa_r+0x894>
 80099c4:	46ca      	mov	sl, r9
 80099c6:	f1ba 0f00 	cmp.w	sl, #0
 80099ca:	d10d      	bne.n	80099e8 <_dtoa_r+0x850>
 80099cc:	4621      	mov	r1, r4
 80099ce:	4653      	mov	r3, sl
 80099d0:	2205      	movs	r2, #5
 80099d2:	4630      	mov	r0, r6
 80099d4:	f000 faae 	bl	8009f34 <__multadd>
 80099d8:	4601      	mov	r1, r0
 80099da:	4604      	mov	r4, r0
 80099dc:	4628      	mov	r0, r5
 80099de:	f000 fcc3 	bl	800a368 <__mcmp>
 80099e2:	2800      	cmp	r0, #0
 80099e4:	f73f ade4 	bgt.w	80095b0 <_dtoa_r+0x418>
 80099e8:	9b08      	ldr	r3, [sp, #32]
 80099ea:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80099ee:	ea6f 0b03 	mvn.w	fp, r3
 80099f2:	f04f 0900 	mov.w	r9, #0
 80099f6:	4621      	mov	r1, r4
 80099f8:	4630      	mov	r0, r6
 80099fa:	f000 fa79 	bl	8009ef0 <_Bfree>
 80099fe:	2f00      	cmp	r7, #0
 8009a00:	f43f aea1 	beq.w	8009746 <_dtoa_r+0x5ae>
 8009a04:	f1b9 0f00 	cmp.w	r9, #0
 8009a08:	d005      	beq.n	8009a16 <_dtoa_r+0x87e>
 8009a0a:	45b9      	cmp	r9, r7
 8009a0c:	d003      	beq.n	8009a16 <_dtoa_r+0x87e>
 8009a0e:	4649      	mov	r1, r9
 8009a10:	4630      	mov	r0, r6
 8009a12:	f000 fa6d 	bl	8009ef0 <_Bfree>
 8009a16:	4639      	mov	r1, r7
 8009a18:	4630      	mov	r0, r6
 8009a1a:	f000 fa69 	bl	8009ef0 <_Bfree>
 8009a1e:	e692      	b.n	8009746 <_dtoa_r+0x5ae>
 8009a20:	2400      	movs	r4, #0
 8009a22:	4627      	mov	r7, r4
 8009a24:	e7e0      	b.n	80099e8 <_dtoa_r+0x850>
 8009a26:	4693      	mov	fp, r2
 8009a28:	4627      	mov	r7, r4
 8009a2a:	e5c1      	b.n	80095b0 <_dtoa_r+0x418>
 8009a2c:	9b07      	ldr	r3, [sp, #28]
 8009a2e:	46ca      	mov	sl, r9
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	f000 8100 	beq.w	8009c36 <_dtoa_r+0xa9e>
 8009a36:	f1b8 0f00 	cmp.w	r8, #0
 8009a3a:	dd05      	ble.n	8009a48 <_dtoa_r+0x8b0>
 8009a3c:	4639      	mov	r1, r7
 8009a3e:	4642      	mov	r2, r8
 8009a40:	4630      	mov	r0, r6
 8009a42:	f000 fc25 	bl	800a290 <__lshift>
 8009a46:	4607      	mov	r7, r0
 8009a48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d05d      	beq.n	8009b0a <_dtoa_r+0x972>
 8009a4e:	6879      	ldr	r1, [r7, #4]
 8009a50:	4630      	mov	r0, r6
 8009a52:	f000 fa0d 	bl	8009e70 <_Balloc>
 8009a56:	4680      	mov	r8, r0
 8009a58:	b928      	cbnz	r0, 8009a66 <_dtoa_r+0x8ce>
 8009a5a:	4b82      	ldr	r3, [pc, #520]	; (8009c64 <_dtoa_r+0xacc>)
 8009a5c:	4602      	mov	r2, r0
 8009a5e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009a62:	f7ff bbb1 	b.w	80091c8 <_dtoa_r+0x30>
 8009a66:	693a      	ldr	r2, [r7, #16]
 8009a68:	3202      	adds	r2, #2
 8009a6a:	0092      	lsls	r2, r2, #2
 8009a6c:	f107 010c 	add.w	r1, r7, #12
 8009a70:	300c      	adds	r0, #12
 8009a72:	f000 ffbb 	bl	800a9ec <memcpy>
 8009a76:	2201      	movs	r2, #1
 8009a78:	4641      	mov	r1, r8
 8009a7a:	4630      	mov	r0, r6
 8009a7c:	f000 fc08 	bl	800a290 <__lshift>
 8009a80:	9b01      	ldr	r3, [sp, #4]
 8009a82:	3301      	adds	r3, #1
 8009a84:	9304      	str	r3, [sp, #16]
 8009a86:	9b01      	ldr	r3, [sp, #4]
 8009a88:	4453      	add	r3, sl
 8009a8a:	9308      	str	r3, [sp, #32]
 8009a8c:	9b02      	ldr	r3, [sp, #8]
 8009a8e:	f003 0301 	and.w	r3, r3, #1
 8009a92:	46b9      	mov	r9, r7
 8009a94:	9307      	str	r3, [sp, #28]
 8009a96:	4607      	mov	r7, r0
 8009a98:	9b04      	ldr	r3, [sp, #16]
 8009a9a:	4621      	mov	r1, r4
 8009a9c:	3b01      	subs	r3, #1
 8009a9e:	4628      	mov	r0, r5
 8009aa0:	9302      	str	r3, [sp, #8]
 8009aa2:	f7ff faef 	bl	8009084 <quorem>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	3330      	adds	r3, #48	; 0x30
 8009aaa:	9005      	str	r0, [sp, #20]
 8009aac:	4649      	mov	r1, r9
 8009aae:	4628      	mov	r0, r5
 8009ab0:	9309      	str	r3, [sp, #36]	; 0x24
 8009ab2:	f000 fc59 	bl	800a368 <__mcmp>
 8009ab6:	463a      	mov	r2, r7
 8009ab8:	4682      	mov	sl, r0
 8009aba:	4621      	mov	r1, r4
 8009abc:	4630      	mov	r0, r6
 8009abe:	f000 fc6f 	bl	800a3a0 <__mdiff>
 8009ac2:	68c2      	ldr	r2, [r0, #12]
 8009ac4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ac6:	4680      	mov	r8, r0
 8009ac8:	bb0a      	cbnz	r2, 8009b0e <_dtoa_r+0x976>
 8009aca:	4601      	mov	r1, r0
 8009acc:	4628      	mov	r0, r5
 8009ace:	f000 fc4b 	bl	800a368 <__mcmp>
 8009ad2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ad4:	4602      	mov	r2, r0
 8009ad6:	4641      	mov	r1, r8
 8009ad8:	4630      	mov	r0, r6
 8009ada:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8009ade:	f000 fa07 	bl	8009ef0 <_Bfree>
 8009ae2:	9b06      	ldr	r3, [sp, #24]
 8009ae4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ae6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009aea:	ea43 0102 	orr.w	r1, r3, r2
 8009aee:	9b07      	ldr	r3, [sp, #28]
 8009af0:	4319      	orrs	r1, r3
 8009af2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009af4:	d10d      	bne.n	8009b12 <_dtoa_r+0x97a>
 8009af6:	2b39      	cmp	r3, #57	; 0x39
 8009af8:	d029      	beq.n	8009b4e <_dtoa_r+0x9b6>
 8009afa:	f1ba 0f00 	cmp.w	sl, #0
 8009afe:	dd01      	ble.n	8009b04 <_dtoa_r+0x96c>
 8009b00:	9b05      	ldr	r3, [sp, #20]
 8009b02:	3331      	adds	r3, #49	; 0x31
 8009b04:	9a02      	ldr	r2, [sp, #8]
 8009b06:	7013      	strb	r3, [r2, #0]
 8009b08:	e775      	b.n	80099f6 <_dtoa_r+0x85e>
 8009b0a:	4638      	mov	r0, r7
 8009b0c:	e7b8      	b.n	8009a80 <_dtoa_r+0x8e8>
 8009b0e:	2201      	movs	r2, #1
 8009b10:	e7e1      	b.n	8009ad6 <_dtoa_r+0x93e>
 8009b12:	f1ba 0f00 	cmp.w	sl, #0
 8009b16:	db06      	blt.n	8009b26 <_dtoa_r+0x98e>
 8009b18:	9906      	ldr	r1, [sp, #24]
 8009b1a:	ea41 0a0a 	orr.w	sl, r1, sl
 8009b1e:	9907      	ldr	r1, [sp, #28]
 8009b20:	ea5a 0a01 	orrs.w	sl, sl, r1
 8009b24:	d120      	bne.n	8009b68 <_dtoa_r+0x9d0>
 8009b26:	2a00      	cmp	r2, #0
 8009b28:	ddec      	ble.n	8009b04 <_dtoa_r+0x96c>
 8009b2a:	4629      	mov	r1, r5
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	4630      	mov	r0, r6
 8009b30:	9304      	str	r3, [sp, #16]
 8009b32:	f000 fbad 	bl	800a290 <__lshift>
 8009b36:	4621      	mov	r1, r4
 8009b38:	4605      	mov	r5, r0
 8009b3a:	f000 fc15 	bl	800a368 <__mcmp>
 8009b3e:	2800      	cmp	r0, #0
 8009b40:	9b04      	ldr	r3, [sp, #16]
 8009b42:	dc02      	bgt.n	8009b4a <_dtoa_r+0x9b2>
 8009b44:	d1de      	bne.n	8009b04 <_dtoa_r+0x96c>
 8009b46:	07da      	lsls	r2, r3, #31
 8009b48:	d5dc      	bpl.n	8009b04 <_dtoa_r+0x96c>
 8009b4a:	2b39      	cmp	r3, #57	; 0x39
 8009b4c:	d1d8      	bne.n	8009b00 <_dtoa_r+0x968>
 8009b4e:	9a02      	ldr	r2, [sp, #8]
 8009b50:	2339      	movs	r3, #57	; 0x39
 8009b52:	7013      	strb	r3, [r2, #0]
 8009b54:	4643      	mov	r3, r8
 8009b56:	4698      	mov	r8, r3
 8009b58:	3b01      	subs	r3, #1
 8009b5a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8009b5e:	2a39      	cmp	r2, #57	; 0x39
 8009b60:	d051      	beq.n	8009c06 <_dtoa_r+0xa6e>
 8009b62:	3201      	adds	r2, #1
 8009b64:	701a      	strb	r2, [r3, #0]
 8009b66:	e746      	b.n	80099f6 <_dtoa_r+0x85e>
 8009b68:	2a00      	cmp	r2, #0
 8009b6a:	dd03      	ble.n	8009b74 <_dtoa_r+0x9dc>
 8009b6c:	2b39      	cmp	r3, #57	; 0x39
 8009b6e:	d0ee      	beq.n	8009b4e <_dtoa_r+0x9b6>
 8009b70:	3301      	adds	r3, #1
 8009b72:	e7c7      	b.n	8009b04 <_dtoa_r+0x96c>
 8009b74:	9a04      	ldr	r2, [sp, #16]
 8009b76:	9908      	ldr	r1, [sp, #32]
 8009b78:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009b7c:	428a      	cmp	r2, r1
 8009b7e:	d02b      	beq.n	8009bd8 <_dtoa_r+0xa40>
 8009b80:	4629      	mov	r1, r5
 8009b82:	2300      	movs	r3, #0
 8009b84:	220a      	movs	r2, #10
 8009b86:	4630      	mov	r0, r6
 8009b88:	f000 f9d4 	bl	8009f34 <__multadd>
 8009b8c:	45b9      	cmp	r9, r7
 8009b8e:	4605      	mov	r5, r0
 8009b90:	f04f 0300 	mov.w	r3, #0
 8009b94:	f04f 020a 	mov.w	r2, #10
 8009b98:	4649      	mov	r1, r9
 8009b9a:	4630      	mov	r0, r6
 8009b9c:	d107      	bne.n	8009bae <_dtoa_r+0xa16>
 8009b9e:	f000 f9c9 	bl	8009f34 <__multadd>
 8009ba2:	4681      	mov	r9, r0
 8009ba4:	4607      	mov	r7, r0
 8009ba6:	9b04      	ldr	r3, [sp, #16]
 8009ba8:	3301      	adds	r3, #1
 8009baa:	9304      	str	r3, [sp, #16]
 8009bac:	e774      	b.n	8009a98 <_dtoa_r+0x900>
 8009bae:	f000 f9c1 	bl	8009f34 <__multadd>
 8009bb2:	4639      	mov	r1, r7
 8009bb4:	4681      	mov	r9, r0
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	220a      	movs	r2, #10
 8009bba:	4630      	mov	r0, r6
 8009bbc:	f000 f9ba 	bl	8009f34 <__multadd>
 8009bc0:	4607      	mov	r7, r0
 8009bc2:	e7f0      	b.n	8009ba6 <_dtoa_r+0xa0e>
 8009bc4:	f1ba 0f00 	cmp.w	sl, #0
 8009bc8:	9a01      	ldr	r2, [sp, #4]
 8009bca:	bfcc      	ite	gt
 8009bcc:	46d0      	movgt	r8, sl
 8009bce:	f04f 0801 	movle.w	r8, #1
 8009bd2:	4490      	add	r8, r2
 8009bd4:	f04f 0900 	mov.w	r9, #0
 8009bd8:	4629      	mov	r1, r5
 8009bda:	2201      	movs	r2, #1
 8009bdc:	4630      	mov	r0, r6
 8009bde:	9302      	str	r3, [sp, #8]
 8009be0:	f000 fb56 	bl	800a290 <__lshift>
 8009be4:	4621      	mov	r1, r4
 8009be6:	4605      	mov	r5, r0
 8009be8:	f000 fbbe 	bl	800a368 <__mcmp>
 8009bec:	2800      	cmp	r0, #0
 8009bee:	dcb1      	bgt.n	8009b54 <_dtoa_r+0x9bc>
 8009bf0:	d102      	bne.n	8009bf8 <_dtoa_r+0xa60>
 8009bf2:	9b02      	ldr	r3, [sp, #8]
 8009bf4:	07db      	lsls	r3, r3, #31
 8009bf6:	d4ad      	bmi.n	8009b54 <_dtoa_r+0x9bc>
 8009bf8:	4643      	mov	r3, r8
 8009bfa:	4698      	mov	r8, r3
 8009bfc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c00:	2a30      	cmp	r2, #48	; 0x30
 8009c02:	d0fa      	beq.n	8009bfa <_dtoa_r+0xa62>
 8009c04:	e6f7      	b.n	80099f6 <_dtoa_r+0x85e>
 8009c06:	9a01      	ldr	r2, [sp, #4]
 8009c08:	429a      	cmp	r2, r3
 8009c0a:	d1a4      	bne.n	8009b56 <_dtoa_r+0x9be>
 8009c0c:	f10b 0b01 	add.w	fp, fp, #1
 8009c10:	2331      	movs	r3, #49	; 0x31
 8009c12:	e778      	b.n	8009b06 <_dtoa_r+0x96e>
 8009c14:	4b14      	ldr	r3, [pc, #80]	; (8009c68 <_dtoa_r+0xad0>)
 8009c16:	f7ff bb2a 	b.w	800926e <_dtoa_r+0xd6>
 8009c1a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	f47f ab05 	bne.w	800922c <_dtoa_r+0x94>
 8009c22:	4b12      	ldr	r3, [pc, #72]	; (8009c6c <_dtoa_r+0xad4>)
 8009c24:	f7ff bb23 	b.w	800926e <_dtoa_r+0xd6>
 8009c28:	f1ba 0f00 	cmp.w	sl, #0
 8009c2c:	dc03      	bgt.n	8009c36 <_dtoa_r+0xa9e>
 8009c2e:	9b06      	ldr	r3, [sp, #24]
 8009c30:	2b02      	cmp	r3, #2
 8009c32:	f73f aec8 	bgt.w	80099c6 <_dtoa_r+0x82e>
 8009c36:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009c3a:	4621      	mov	r1, r4
 8009c3c:	4628      	mov	r0, r5
 8009c3e:	f7ff fa21 	bl	8009084 <quorem>
 8009c42:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009c46:	f808 3b01 	strb.w	r3, [r8], #1
 8009c4a:	9a01      	ldr	r2, [sp, #4]
 8009c4c:	eba8 0202 	sub.w	r2, r8, r2
 8009c50:	4592      	cmp	sl, r2
 8009c52:	ddb7      	ble.n	8009bc4 <_dtoa_r+0xa2c>
 8009c54:	4629      	mov	r1, r5
 8009c56:	2300      	movs	r3, #0
 8009c58:	220a      	movs	r2, #10
 8009c5a:	4630      	mov	r0, r6
 8009c5c:	f000 f96a 	bl	8009f34 <__multadd>
 8009c60:	4605      	mov	r5, r0
 8009c62:	e7ea      	b.n	8009c3a <_dtoa_r+0xaa2>
 8009c64:	0800b4bc 	.word	0x0800b4bc
 8009c68:	0800b3f7 	.word	0x0800b3f7
 8009c6c:	0800b457 	.word	0x0800b457

08009c70 <_free_r>:
 8009c70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c72:	2900      	cmp	r1, #0
 8009c74:	d044      	beq.n	8009d00 <_free_r+0x90>
 8009c76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c7a:	9001      	str	r0, [sp, #4]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	f1a1 0404 	sub.w	r4, r1, #4
 8009c82:	bfb8      	it	lt
 8009c84:	18e4      	addlt	r4, r4, r3
 8009c86:	f000 f8e7 	bl	8009e58 <__malloc_lock>
 8009c8a:	4a1e      	ldr	r2, [pc, #120]	; (8009d04 <_free_r+0x94>)
 8009c8c:	9801      	ldr	r0, [sp, #4]
 8009c8e:	6813      	ldr	r3, [r2, #0]
 8009c90:	b933      	cbnz	r3, 8009ca0 <_free_r+0x30>
 8009c92:	6063      	str	r3, [r4, #4]
 8009c94:	6014      	str	r4, [r2, #0]
 8009c96:	b003      	add	sp, #12
 8009c98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c9c:	f000 b8e2 	b.w	8009e64 <__malloc_unlock>
 8009ca0:	42a3      	cmp	r3, r4
 8009ca2:	d908      	bls.n	8009cb6 <_free_r+0x46>
 8009ca4:	6825      	ldr	r5, [r4, #0]
 8009ca6:	1961      	adds	r1, r4, r5
 8009ca8:	428b      	cmp	r3, r1
 8009caa:	bf01      	itttt	eq
 8009cac:	6819      	ldreq	r1, [r3, #0]
 8009cae:	685b      	ldreq	r3, [r3, #4]
 8009cb0:	1949      	addeq	r1, r1, r5
 8009cb2:	6021      	streq	r1, [r4, #0]
 8009cb4:	e7ed      	b.n	8009c92 <_free_r+0x22>
 8009cb6:	461a      	mov	r2, r3
 8009cb8:	685b      	ldr	r3, [r3, #4]
 8009cba:	b10b      	cbz	r3, 8009cc0 <_free_r+0x50>
 8009cbc:	42a3      	cmp	r3, r4
 8009cbe:	d9fa      	bls.n	8009cb6 <_free_r+0x46>
 8009cc0:	6811      	ldr	r1, [r2, #0]
 8009cc2:	1855      	adds	r5, r2, r1
 8009cc4:	42a5      	cmp	r5, r4
 8009cc6:	d10b      	bne.n	8009ce0 <_free_r+0x70>
 8009cc8:	6824      	ldr	r4, [r4, #0]
 8009cca:	4421      	add	r1, r4
 8009ccc:	1854      	adds	r4, r2, r1
 8009cce:	42a3      	cmp	r3, r4
 8009cd0:	6011      	str	r1, [r2, #0]
 8009cd2:	d1e0      	bne.n	8009c96 <_free_r+0x26>
 8009cd4:	681c      	ldr	r4, [r3, #0]
 8009cd6:	685b      	ldr	r3, [r3, #4]
 8009cd8:	6053      	str	r3, [r2, #4]
 8009cda:	440c      	add	r4, r1
 8009cdc:	6014      	str	r4, [r2, #0]
 8009cde:	e7da      	b.n	8009c96 <_free_r+0x26>
 8009ce0:	d902      	bls.n	8009ce8 <_free_r+0x78>
 8009ce2:	230c      	movs	r3, #12
 8009ce4:	6003      	str	r3, [r0, #0]
 8009ce6:	e7d6      	b.n	8009c96 <_free_r+0x26>
 8009ce8:	6825      	ldr	r5, [r4, #0]
 8009cea:	1961      	adds	r1, r4, r5
 8009cec:	428b      	cmp	r3, r1
 8009cee:	bf04      	itt	eq
 8009cf0:	6819      	ldreq	r1, [r3, #0]
 8009cf2:	685b      	ldreq	r3, [r3, #4]
 8009cf4:	6063      	str	r3, [r4, #4]
 8009cf6:	bf04      	itt	eq
 8009cf8:	1949      	addeq	r1, r1, r5
 8009cfa:	6021      	streq	r1, [r4, #0]
 8009cfc:	6054      	str	r4, [r2, #4]
 8009cfe:	e7ca      	b.n	8009c96 <_free_r+0x26>
 8009d00:	b003      	add	sp, #12
 8009d02:	bd30      	pop	{r4, r5, pc}
 8009d04:	20000b20 	.word	0x20000b20

08009d08 <malloc>:
 8009d08:	4b02      	ldr	r3, [pc, #8]	; (8009d14 <malloc+0xc>)
 8009d0a:	4601      	mov	r1, r0
 8009d0c:	6818      	ldr	r0, [r3, #0]
 8009d0e:	f000 b823 	b.w	8009d58 <_malloc_r>
 8009d12:	bf00      	nop
 8009d14:	2000047c 	.word	0x2000047c

08009d18 <sbrk_aligned>:
 8009d18:	b570      	push	{r4, r5, r6, lr}
 8009d1a:	4e0e      	ldr	r6, [pc, #56]	; (8009d54 <sbrk_aligned+0x3c>)
 8009d1c:	460c      	mov	r4, r1
 8009d1e:	6831      	ldr	r1, [r6, #0]
 8009d20:	4605      	mov	r5, r0
 8009d22:	b911      	cbnz	r1, 8009d2a <sbrk_aligned+0x12>
 8009d24:	f000 fe52 	bl	800a9cc <_sbrk_r>
 8009d28:	6030      	str	r0, [r6, #0]
 8009d2a:	4621      	mov	r1, r4
 8009d2c:	4628      	mov	r0, r5
 8009d2e:	f000 fe4d 	bl	800a9cc <_sbrk_r>
 8009d32:	1c43      	adds	r3, r0, #1
 8009d34:	d00a      	beq.n	8009d4c <sbrk_aligned+0x34>
 8009d36:	1cc4      	adds	r4, r0, #3
 8009d38:	f024 0403 	bic.w	r4, r4, #3
 8009d3c:	42a0      	cmp	r0, r4
 8009d3e:	d007      	beq.n	8009d50 <sbrk_aligned+0x38>
 8009d40:	1a21      	subs	r1, r4, r0
 8009d42:	4628      	mov	r0, r5
 8009d44:	f000 fe42 	bl	800a9cc <_sbrk_r>
 8009d48:	3001      	adds	r0, #1
 8009d4a:	d101      	bne.n	8009d50 <sbrk_aligned+0x38>
 8009d4c:	f04f 34ff 	mov.w	r4, #4294967295
 8009d50:	4620      	mov	r0, r4
 8009d52:	bd70      	pop	{r4, r5, r6, pc}
 8009d54:	20000b24 	.word	0x20000b24

08009d58 <_malloc_r>:
 8009d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d5c:	1ccd      	adds	r5, r1, #3
 8009d5e:	f025 0503 	bic.w	r5, r5, #3
 8009d62:	3508      	adds	r5, #8
 8009d64:	2d0c      	cmp	r5, #12
 8009d66:	bf38      	it	cc
 8009d68:	250c      	movcc	r5, #12
 8009d6a:	2d00      	cmp	r5, #0
 8009d6c:	4607      	mov	r7, r0
 8009d6e:	db01      	blt.n	8009d74 <_malloc_r+0x1c>
 8009d70:	42a9      	cmp	r1, r5
 8009d72:	d905      	bls.n	8009d80 <_malloc_r+0x28>
 8009d74:	230c      	movs	r3, #12
 8009d76:	603b      	str	r3, [r7, #0]
 8009d78:	2600      	movs	r6, #0
 8009d7a:	4630      	mov	r0, r6
 8009d7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d80:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009e54 <_malloc_r+0xfc>
 8009d84:	f000 f868 	bl	8009e58 <__malloc_lock>
 8009d88:	f8d8 3000 	ldr.w	r3, [r8]
 8009d8c:	461c      	mov	r4, r3
 8009d8e:	bb5c      	cbnz	r4, 8009de8 <_malloc_r+0x90>
 8009d90:	4629      	mov	r1, r5
 8009d92:	4638      	mov	r0, r7
 8009d94:	f7ff ffc0 	bl	8009d18 <sbrk_aligned>
 8009d98:	1c43      	adds	r3, r0, #1
 8009d9a:	4604      	mov	r4, r0
 8009d9c:	d155      	bne.n	8009e4a <_malloc_r+0xf2>
 8009d9e:	f8d8 4000 	ldr.w	r4, [r8]
 8009da2:	4626      	mov	r6, r4
 8009da4:	2e00      	cmp	r6, #0
 8009da6:	d145      	bne.n	8009e34 <_malloc_r+0xdc>
 8009da8:	2c00      	cmp	r4, #0
 8009daa:	d048      	beq.n	8009e3e <_malloc_r+0xe6>
 8009dac:	6823      	ldr	r3, [r4, #0]
 8009dae:	4631      	mov	r1, r6
 8009db0:	4638      	mov	r0, r7
 8009db2:	eb04 0903 	add.w	r9, r4, r3
 8009db6:	f000 fe09 	bl	800a9cc <_sbrk_r>
 8009dba:	4581      	cmp	r9, r0
 8009dbc:	d13f      	bne.n	8009e3e <_malloc_r+0xe6>
 8009dbe:	6821      	ldr	r1, [r4, #0]
 8009dc0:	1a6d      	subs	r5, r5, r1
 8009dc2:	4629      	mov	r1, r5
 8009dc4:	4638      	mov	r0, r7
 8009dc6:	f7ff ffa7 	bl	8009d18 <sbrk_aligned>
 8009dca:	3001      	adds	r0, #1
 8009dcc:	d037      	beq.n	8009e3e <_malloc_r+0xe6>
 8009dce:	6823      	ldr	r3, [r4, #0]
 8009dd0:	442b      	add	r3, r5
 8009dd2:	6023      	str	r3, [r4, #0]
 8009dd4:	f8d8 3000 	ldr.w	r3, [r8]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d038      	beq.n	8009e4e <_malloc_r+0xf6>
 8009ddc:	685a      	ldr	r2, [r3, #4]
 8009dde:	42a2      	cmp	r2, r4
 8009de0:	d12b      	bne.n	8009e3a <_malloc_r+0xe2>
 8009de2:	2200      	movs	r2, #0
 8009de4:	605a      	str	r2, [r3, #4]
 8009de6:	e00f      	b.n	8009e08 <_malloc_r+0xb0>
 8009de8:	6822      	ldr	r2, [r4, #0]
 8009dea:	1b52      	subs	r2, r2, r5
 8009dec:	d41f      	bmi.n	8009e2e <_malloc_r+0xd6>
 8009dee:	2a0b      	cmp	r2, #11
 8009df0:	d917      	bls.n	8009e22 <_malloc_r+0xca>
 8009df2:	1961      	adds	r1, r4, r5
 8009df4:	42a3      	cmp	r3, r4
 8009df6:	6025      	str	r5, [r4, #0]
 8009df8:	bf18      	it	ne
 8009dfa:	6059      	strne	r1, [r3, #4]
 8009dfc:	6863      	ldr	r3, [r4, #4]
 8009dfe:	bf08      	it	eq
 8009e00:	f8c8 1000 	streq.w	r1, [r8]
 8009e04:	5162      	str	r2, [r4, r5]
 8009e06:	604b      	str	r3, [r1, #4]
 8009e08:	4638      	mov	r0, r7
 8009e0a:	f104 060b 	add.w	r6, r4, #11
 8009e0e:	f000 f829 	bl	8009e64 <__malloc_unlock>
 8009e12:	f026 0607 	bic.w	r6, r6, #7
 8009e16:	1d23      	adds	r3, r4, #4
 8009e18:	1af2      	subs	r2, r6, r3
 8009e1a:	d0ae      	beq.n	8009d7a <_malloc_r+0x22>
 8009e1c:	1b9b      	subs	r3, r3, r6
 8009e1e:	50a3      	str	r3, [r4, r2]
 8009e20:	e7ab      	b.n	8009d7a <_malloc_r+0x22>
 8009e22:	42a3      	cmp	r3, r4
 8009e24:	6862      	ldr	r2, [r4, #4]
 8009e26:	d1dd      	bne.n	8009de4 <_malloc_r+0x8c>
 8009e28:	f8c8 2000 	str.w	r2, [r8]
 8009e2c:	e7ec      	b.n	8009e08 <_malloc_r+0xb0>
 8009e2e:	4623      	mov	r3, r4
 8009e30:	6864      	ldr	r4, [r4, #4]
 8009e32:	e7ac      	b.n	8009d8e <_malloc_r+0x36>
 8009e34:	4634      	mov	r4, r6
 8009e36:	6876      	ldr	r6, [r6, #4]
 8009e38:	e7b4      	b.n	8009da4 <_malloc_r+0x4c>
 8009e3a:	4613      	mov	r3, r2
 8009e3c:	e7cc      	b.n	8009dd8 <_malloc_r+0x80>
 8009e3e:	230c      	movs	r3, #12
 8009e40:	603b      	str	r3, [r7, #0]
 8009e42:	4638      	mov	r0, r7
 8009e44:	f000 f80e 	bl	8009e64 <__malloc_unlock>
 8009e48:	e797      	b.n	8009d7a <_malloc_r+0x22>
 8009e4a:	6025      	str	r5, [r4, #0]
 8009e4c:	e7dc      	b.n	8009e08 <_malloc_r+0xb0>
 8009e4e:	605b      	str	r3, [r3, #4]
 8009e50:	deff      	udf	#255	; 0xff
 8009e52:	bf00      	nop
 8009e54:	20000b20 	.word	0x20000b20

08009e58 <__malloc_lock>:
 8009e58:	4801      	ldr	r0, [pc, #4]	; (8009e60 <__malloc_lock+0x8>)
 8009e5a:	f7ff b8f2 	b.w	8009042 <__retarget_lock_acquire_recursive>
 8009e5e:	bf00      	nop
 8009e60:	20000b1c 	.word	0x20000b1c

08009e64 <__malloc_unlock>:
 8009e64:	4801      	ldr	r0, [pc, #4]	; (8009e6c <__malloc_unlock+0x8>)
 8009e66:	f7ff b8ed 	b.w	8009044 <__retarget_lock_release_recursive>
 8009e6a:	bf00      	nop
 8009e6c:	20000b1c 	.word	0x20000b1c

08009e70 <_Balloc>:
 8009e70:	b570      	push	{r4, r5, r6, lr}
 8009e72:	69c6      	ldr	r6, [r0, #28]
 8009e74:	4604      	mov	r4, r0
 8009e76:	460d      	mov	r5, r1
 8009e78:	b976      	cbnz	r6, 8009e98 <_Balloc+0x28>
 8009e7a:	2010      	movs	r0, #16
 8009e7c:	f7ff ff44 	bl	8009d08 <malloc>
 8009e80:	4602      	mov	r2, r0
 8009e82:	61e0      	str	r0, [r4, #28]
 8009e84:	b920      	cbnz	r0, 8009e90 <_Balloc+0x20>
 8009e86:	4b18      	ldr	r3, [pc, #96]	; (8009ee8 <_Balloc+0x78>)
 8009e88:	4818      	ldr	r0, [pc, #96]	; (8009eec <_Balloc+0x7c>)
 8009e8a:	216b      	movs	r1, #107	; 0x6b
 8009e8c:	f7ff f8dc 	bl	8009048 <__assert_func>
 8009e90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e94:	6006      	str	r6, [r0, #0]
 8009e96:	60c6      	str	r6, [r0, #12]
 8009e98:	69e6      	ldr	r6, [r4, #28]
 8009e9a:	68f3      	ldr	r3, [r6, #12]
 8009e9c:	b183      	cbz	r3, 8009ec0 <_Balloc+0x50>
 8009e9e:	69e3      	ldr	r3, [r4, #28]
 8009ea0:	68db      	ldr	r3, [r3, #12]
 8009ea2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009ea6:	b9b8      	cbnz	r0, 8009ed8 <_Balloc+0x68>
 8009ea8:	2101      	movs	r1, #1
 8009eaa:	fa01 f605 	lsl.w	r6, r1, r5
 8009eae:	1d72      	adds	r2, r6, #5
 8009eb0:	0092      	lsls	r2, r2, #2
 8009eb2:	4620      	mov	r0, r4
 8009eb4:	f000 fdaf 	bl	800aa16 <_calloc_r>
 8009eb8:	b160      	cbz	r0, 8009ed4 <_Balloc+0x64>
 8009eba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009ebe:	e00e      	b.n	8009ede <_Balloc+0x6e>
 8009ec0:	2221      	movs	r2, #33	; 0x21
 8009ec2:	2104      	movs	r1, #4
 8009ec4:	4620      	mov	r0, r4
 8009ec6:	f000 fda6 	bl	800aa16 <_calloc_r>
 8009eca:	69e3      	ldr	r3, [r4, #28]
 8009ecc:	60f0      	str	r0, [r6, #12]
 8009ece:	68db      	ldr	r3, [r3, #12]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d1e4      	bne.n	8009e9e <_Balloc+0x2e>
 8009ed4:	2000      	movs	r0, #0
 8009ed6:	bd70      	pop	{r4, r5, r6, pc}
 8009ed8:	6802      	ldr	r2, [r0, #0]
 8009eda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009ede:	2300      	movs	r3, #0
 8009ee0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009ee4:	e7f7      	b.n	8009ed6 <_Balloc+0x66>
 8009ee6:	bf00      	nop
 8009ee8:	0800b378 	.word	0x0800b378
 8009eec:	0800b4cd 	.word	0x0800b4cd

08009ef0 <_Bfree>:
 8009ef0:	b570      	push	{r4, r5, r6, lr}
 8009ef2:	69c6      	ldr	r6, [r0, #28]
 8009ef4:	4605      	mov	r5, r0
 8009ef6:	460c      	mov	r4, r1
 8009ef8:	b976      	cbnz	r6, 8009f18 <_Bfree+0x28>
 8009efa:	2010      	movs	r0, #16
 8009efc:	f7ff ff04 	bl	8009d08 <malloc>
 8009f00:	4602      	mov	r2, r0
 8009f02:	61e8      	str	r0, [r5, #28]
 8009f04:	b920      	cbnz	r0, 8009f10 <_Bfree+0x20>
 8009f06:	4b09      	ldr	r3, [pc, #36]	; (8009f2c <_Bfree+0x3c>)
 8009f08:	4809      	ldr	r0, [pc, #36]	; (8009f30 <_Bfree+0x40>)
 8009f0a:	218f      	movs	r1, #143	; 0x8f
 8009f0c:	f7ff f89c 	bl	8009048 <__assert_func>
 8009f10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f14:	6006      	str	r6, [r0, #0]
 8009f16:	60c6      	str	r6, [r0, #12]
 8009f18:	b13c      	cbz	r4, 8009f2a <_Bfree+0x3a>
 8009f1a:	69eb      	ldr	r3, [r5, #28]
 8009f1c:	6862      	ldr	r2, [r4, #4]
 8009f1e:	68db      	ldr	r3, [r3, #12]
 8009f20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009f24:	6021      	str	r1, [r4, #0]
 8009f26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009f2a:	bd70      	pop	{r4, r5, r6, pc}
 8009f2c:	0800b378 	.word	0x0800b378
 8009f30:	0800b4cd 	.word	0x0800b4cd

08009f34 <__multadd>:
 8009f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f38:	690d      	ldr	r5, [r1, #16]
 8009f3a:	4607      	mov	r7, r0
 8009f3c:	460c      	mov	r4, r1
 8009f3e:	461e      	mov	r6, r3
 8009f40:	f101 0c14 	add.w	ip, r1, #20
 8009f44:	2000      	movs	r0, #0
 8009f46:	f8dc 3000 	ldr.w	r3, [ip]
 8009f4a:	b299      	uxth	r1, r3
 8009f4c:	fb02 6101 	mla	r1, r2, r1, r6
 8009f50:	0c1e      	lsrs	r6, r3, #16
 8009f52:	0c0b      	lsrs	r3, r1, #16
 8009f54:	fb02 3306 	mla	r3, r2, r6, r3
 8009f58:	b289      	uxth	r1, r1
 8009f5a:	3001      	adds	r0, #1
 8009f5c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009f60:	4285      	cmp	r5, r0
 8009f62:	f84c 1b04 	str.w	r1, [ip], #4
 8009f66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009f6a:	dcec      	bgt.n	8009f46 <__multadd+0x12>
 8009f6c:	b30e      	cbz	r6, 8009fb2 <__multadd+0x7e>
 8009f6e:	68a3      	ldr	r3, [r4, #8]
 8009f70:	42ab      	cmp	r3, r5
 8009f72:	dc19      	bgt.n	8009fa8 <__multadd+0x74>
 8009f74:	6861      	ldr	r1, [r4, #4]
 8009f76:	4638      	mov	r0, r7
 8009f78:	3101      	adds	r1, #1
 8009f7a:	f7ff ff79 	bl	8009e70 <_Balloc>
 8009f7e:	4680      	mov	r8, r0
 8009f80:	b928      	cbnz	r0, 8009f8e <__multadd+0x5a>
 8009f82:	4602      	mov	r2, r0
 8009f84:	4b0c      	ldr	r3, [pc, #48]	; (8009fb8 <__multadd+0x84>)
 8009f86:	480d      	ldr	r0, [pc, #52]	; (8009fbc <__multadd+0x88>)
 8009f88:	21ba      	movs	r1, #186	; 0xba
 8009f8a:	f7ff f85d 	bl	8009048 <__assert_func>
 8009f8e:	6922      	ldr	r2, [r4, #16]
 8009f90:	3202      	adds	r2, #2
 8009f92:	f104 010c 	add.w	r1, r4, #12
 8009f96:	0092      	lsls	r2, r2, #2
 8009f98:	300c      	adds	r0, #12
 8009f9a:	f000 fd27 	bl	800a9ec <memcpy>
 8009f9e:	4621      	mov	r1, r4
 8009fa0:	4638      	mov	r0, r7
 8009fa2:	f7ff ffa5 	bl	8009ef0 <_Bfree>
 8009fa6:	4644      	mov	r4, r8
 8009fa8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009fac:	3501      	adds	r5, #1
 8009fae:	615e      	str	r6, [r3, #20]
 8009fb0:	6125      	str	r5, [r4, #16]
 8009fb2:	4620      	mov	r0, r4
 8009fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fb8:	0800b4bc 	.word	0x0800b4bc
 8009fbc:	0800b4cd 	.word	0x0800b4cd

08009fc0 <__hi0bits>:
 8009fc0:	0c03      	lsrs	r3, r0, #16
 8009fc2:	041b      	lsls	r3, r3, #16
 8009fc4:	b9d3      	cbnz	r3, 8009ffc <__hi0bits+0x3c>
 8009fc6:	0400      	lsls	r0, r0, #16
 8009fc8:	2310      	movs	r3, #16
 8009fca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009fce:	bf04      	itt	eq
 8009fd0:	0200      	lsleq	r0, r0, #8
 8009fd2:	3308      	addeq	r3, #8
 8009fd4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009fd8:	bf04      	itt	eq
 8009fda:	0100      	lsleq	r0, r0, #4
 8009fdc:	3304      	addeq	r3, #4
 8009fde:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009fe2:	bf04      	itt	eq
 8009fe4:	0080      	lsleq	r0, r0, #2
 8009fe6:	3302      	addeq	r3, #2
 8009fe8:	2800      	cmp	r0, #0
 8009fea:	db05      	blt.n	8009ff8 <__hi0bits+0x38>
 8009fec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009ff0:	f103 0301 	add.w	r3, r3, #1
 8009ff4:	bf08      	it	eq
 8009ff6:	2320      	moveq	r3, #32
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	4770      	bx	lr
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	e7e4      	b.n	8009fca <__hi0bits+0xa>

0800a000 <__lo0bits>:
 800a000:	6803      	ldr	r3, [r0, #0]
 800a002:	f013 0207 	ands.w	r2, r3, #7
 800a006:	d00c      	beq.n	800a022 <__lo0bits+0x22>
 800a008:	07d9      	lsls	r1, r3, #31
 800a00a:	d422      	bmi.n	800a052 <__lo0bits+0x52>
 800a00c:	079a      	lsls	r2, r3, #30
 800a00e:	bf49      	itett	mi
 800a010:	085b      	lsrmi	r3, r3, #1
 800a012:	089b      	lsrpl	r3, r3, #2
 800a014:	6003      	strmi	r3, [r0, #0]
 800a016:	2201      	movmi	r2, #1
 800a018:	bf5c      	itt	pl
 800a01a:	6003      	strpl	r3, [r0, #0]
 800a01c:	2202      	movpl	r2, #2
 800a01e:	4610      	mov	r0, r2
 800a020:	4770      	bx	lr
 800a022:	b299      	uxth	r1, r3
 800a024:	b909      	cbnz	r1, 800a02a <__lo0bits+0x2a>
 800a026:	0c1b      	lsrs	r3, r3, #16
 800a028:	2210      	movs	r2, #16
 800a02a:	b2d9      	uxtb	r1, r3
 800a02c:	b909      	cbnz	r1, 800a032 <__lo0bits+0x32>
 800a02e:	3208      	adds	r2, #8
 800a030:	0a1b      	lsrs	r3, r3, #8
 800a032:	0719      	lsls	r1, r3, #28
 800a034:	bf04      	itt	eq
 800a036:	091b      	lsreq	r3, r3, #4
 800a038:	3204      	addeq	r2, #4
 800a03a:	0799      	lsls	r1, r3, #30
 800a03c:	bf04      	itt	eq
 800a03e:	089b      	lsreq	r3, r3, #2
 800a040:	3202      	addeq	r2, #2
 800a042:	07d9      	lsls	r1, r3, #31
 800a044:	d403      	bmi.n	800a04e <__lo0bits+0x4e>
 800a046:	085b      	lsrs	r3, r3, #1
 800a048:	f102 0201 	add.w	r2, r2, #1
 800a04c:	d003      	beq.n	800a056 <__lo0bits+0x56>
 800a04e:	6003      	str	r3, [r0, #0]
 800a050:	e7e5      	b.n	800a01e <__lo0bits+0x1e>
 800a052:	2200      	movs	r2, #0
 800a054:	e7e3      	b.n	800a01e <__lo0bits+0x1e>
 800a056:	2220      	movs	r2, #32
 800a058:	e7e1      	b.n	800a01e <__lo0bits+0x1e>
	...

0800a05c <__i2b>:
 800a05c:	b510      	push	{r4, lr}
 800a05e:	460c      	mov	r4, r1
 800a060:	2101      	movs	r1, #1
 800a062:	f7ff ff05 	bl	8009e70 <_Balloc>
 800a066:	4602      	mov	r2, r0
 800a068:	b928      	cbnz	r0, 800a076 <__i2b+0x1a>
 800a06a:	4b05      	ldr	r3, [pc, #20]	; (800a080 <__i2b+0x24>)
 800a06c:	4805      	ldr	r0, [pc, #20]	; (800a084 <__i2b+0x28>)
 800a06e:	f240 1145 	movw	r1, #325	; 0x145
 800a072:	f7fe ffe9 	bl	8009048 <__assert_func>
 800a076:	2301      	movs	r3, #1
 800a078:	6144      	str	r4, [r0, #20]
 800a07a:	6103      	str	r3, [r0, #16]
 800a07c:	bd10      	pop	{r4, pc}
 800a07e:	bf00      	nop
 800a080:	0800b4bc 	.word	0x0800b4bc
 800a084:	0800b4cd 	.word	0x0800b4cd

0800a088 <__multiply>:
 800a088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a08c:	4691      	mov	r9, r2
 800a08e:	690a      	ldr	r2, [r1, #16]
 800a090:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a094:	429a      	cmp	r2, r3
 800a096:	bfb8      	it	lt
 800a098:	460b      	movlt	r3, r1
 800a09a:	460c      	mov	r4, r1
 800a09c:	bfbc      	itt	lt
 800a09e:	464c      	movlt	r4, r9
 800a0a0:	4699      	movlt	r9, r3
 800a0a2:	6927      	ldr	r7, [r4, #16]
 800a0a4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a0a8:	68a3      	ldr	r3, [r4, #8]
 800a0aa:	6861      	ldr	r1, [r4, #4]
 800a0ac:	eb07 060a 	add.w	r6, r7, sl
 800a0b0:	42b3      	cmp	r3, r6
 800a0b2:	b085      	sub	sp, #20
 800a0b4:	bfb8      	it	lt
 800a0b6:	3101      	addlt	r1, #1
 800a0b8:	f7ff feda 	bl	8009e70 <_Balloc>
 800a0bc:	b930      	cbnz	r0, 800a0cc <__multiply+0x44>
 800a0be:	4602      	mov	r2, r0
 800a0c0:	4b44      	ldr	r3, [pc, #272]	; (800a1d4 <__multiply+0x14c>)
 800a0c2:	4845      	ldr	r0, [pc, #276]	; (800a1d8 <__multiply+0x150>)
 800a0c4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a0c8:	f7fe ffbe 	bl	8009048 <__assert_func>
 800a0cc:	f100 0514 	add.w	r5, r0, #20
 800a0d0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a0d4:	462b      	mov	r3, r5
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	4543      	cmp	r3, r8
 800a0da:	d321      	bcc.n	800a120 <__multiply+0x98>
 800a0dc:	f104 0314 	add.w	r3, r4, #20
 800a0e0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a0e4:	f109 0314 	add.w	r3, r9, #20
 800a0e8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a0ec:	9202      	str	r2, [sp, #8]
 800a0ee:	1b3a      	subs	r2, r7, r4
 800a0f0:	3a15      	subs	r2, #21
 800a0f2:	f022 0203 	bic.w	r2, r2, #3
 800a0f6:	3204      	adds	r2, #4
 800a0f8:	f104 0115 	add.w	r1, r4, #21
 800a0fc:	428f      	cmp	r7, r1
 800a0fe:	bf38      	it	cc
 800a100:	2204      	movcc	r2, #4
 800a102:	9201      	str	r2, [sp, #4]
 800a104:	9a02      	ldr	r2, [sp, #8]
 800a106:	9303      	str	r3, [sp, #12]
 800a108:	429a      	cmp	r2, r3
 800a10a:	d80c      	bhi.n	800a126 <__multiply+0x9e>
 800a10c:	2e00      	cmp	r6, #0
 800a10e:	dd03      	ble.n	800a118 <__multiply+0x90>
 800a110:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a114:	2b00      	cmp	r3, #0
 800a116:	d05b      	beq.n	800a1d0 <__multiply+0x148>
 800a118:	6106      	str	r6, [r0, #16]
 800a11a:	b005      	add	sp, #20
 800a11c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a120:	f843 2b04 	str.w	r2, [r3], #4
 800a124:	e7d8      	b.n	800a0d8 <__multiply+0x50>
 800a126:	f8b3 a000 	ldrh.w	sl, [r3]
 800a12a:	f1ba 0f00 	cmp.w	sl, #0
 800a12e:	d024      	beq.n	800a17a <__multiply+0xf2>
 800a130:	f104 0e14 	add.w	lr, r4, #20
 800a134:	46a9      	mov	r9, r5
 800a136:	f04f 0c00 	mov.w	ip, #0
 800a13a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a13e:	f8d9 1000 	ldr.w	r1, [r9]
 800a142:	fa1f fb82 	uxth.w	fp, r2
 800a146:	b289      	uxth	r1, r1
 800a148:	fb0a 110b 	mla	r1, sl, fp, r1
 800a14c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a150:	f8d9 2000 	ldr.w	r2, [r9]
 800a154:	4461      	add	r1, ip
 800a156:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a15a:	fb0a c20b 	mla	r2, sl, fp, ip
 800a15e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a162:	b289      	uxth	r1, r1
 800a164:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a168:	4577      	cmp	r7, lr
 800a16a:	f849 1b04 	str.w	r1, [r9], #4
 800a16e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a172:	d8e2      	bhi.n	800a13a <__multiply+0xb2>
 800a174:	9a01      	ldr	r2, [sp, #4]
 800a176:	f845 c002 	str.w	ip, [r5, r2]
 800a17a:	9a03      	ldr	r2, [sp, #12]
 800a17c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a180:	3304      	adds	r3, #4
 800a182:	f1b9 0f00 	cmp.w	r9, #0
 800a186:	d021      	beq.n	800a1cc <__multiply+0x144>
 800a188:	6829      	ldr	r1, [r5, #0]
 800a18a:	f104 0c14 	add.w	ip, r4, #20
 800a18e:	46ae      	mov	lr, r5
 800a190:	f04f 0a00 	mov.w	sl, #0
 800a194:	f8bc b000 	ldrh.w	fp, [ip]
 800a198:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a19c:	fb09 220b 	mla	r2, r9, fp, r2
 800a1a0:	4452      	add	r2, sl
 800a1a2:	b289      	uxth	r1, r1
 800a1a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a1a8:	f84e 1b04 	str.w	r1, [lr], #4
 800a1ac:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a1b0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a1b4:	f8be 1000 	ldrh.w	r1, [lr]
 800a1b8:	fb09 110a 	mla	r1, r9, sl, r1
 800a1bc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a1c0:	4567      	cmp	r7, ip
 800a1c2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a1c6:	d8e5      	bhi.n	800a194 <__multiply+0x10c>
 800a1c8:	9a01      	ldr	r2, [sp, #4]
 800a1ca:	50a9      	str	r1, [r5, r2]
 800a1cc:	3504      	adds	r5, #4
 800a1ce:	e799      	b.n	800a104 <__multiply+0x7c>
 800a1d0:	3e01      	subs	r6, #1
 800a1d2:	e79b      	b.n	800a10c <__multiply+0x84>
 800a1d4:	0800b4bc 	.word	0x0800b4bc
 800a1d8:	0800b4cd 	.word	0x0800b4cd

0800a1dc <__pow5mult>:
 800a1dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1e0:	4615      	mov	r5, r2
 800a1e2:	f012 0203 	ands.w	r2, r2, #3
 800a1e6:	4606      	mov	r6, r0
 800a1e8:	460f      	mov	r7, r1
 800a1ea:	d007      	beq.n	800a1fc <__pow5mult+0x20>
 800a1ec:	4c25      	ldr	r4, [pc, #148]	; (800a284 <__pow5mult+0xa8>)
 800a1ee:	3a01      	subs	r2, #1
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a1f6:	f7ff fe9d 	bl	8009f34 <__multadd>
 800a1fa:	4607      	mov	r7, r0
 800a1fc:	10ad      	asrs	r5, r5, #2
 800a1fe:	d03d      	beq.n	800a27c <__pow5mult+0xa0>
 800a200:	69f4      	ldr	r4, [r6, #28]
 800a202:	b97c      	cbnz	r4, 800a224 <__pow5mult+0x48>
 800a204:	2010      	movs	r0, #16
 800a206:	f7ff fd7f 	bl	8009d08 <malloc>
 800a20a:	4602      	mov	r2, r0
 800a20c:	61f0      	str	r0, [r6, #28]
 800a20e:	b928      	cbnz	r0, 800a21c <__pow5mult+0x40>
 800a210:	4b1d      	ldr	r3, [pc, #116]	; (800a288 <__pow5mult+0xac>)
 800a212:	481e      	ldr	r0, [pc, #120]	; (800a28c <__pow5mult+0xb0>)
 800a214:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a218:	f7fe ff16 	bl	8009048 <__assert_func>
 800a21c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a220:	6004      	str	r4, [r0, #0]
 800a222:	60c4      	str	r4, [r0, #12]
 800a224:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a228:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a22c:	b94c      	cbnz	r4, 800a242 <__pow5mult+0x66>
 800a22e:	f240 2171 	movw	r1, #625	; 0x271
 800a232:	4630      	mov	r0, r6
 800a234:	f7ff ff12 	bl	800a05c <__i2b>
 800a238:	2300      	movs	r3, #0
 800a23a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a23e:	4604      	mov	r4, r0
 800a240:	6003      	str	r3, [r0, #0]
 800a242:	f04f 0900 	mov.w	r9, #0
 800a246:	07eb      	lsls	r3, r5, #31
 800a248:	d50a      	bpl.n	800a260 <__pow5mult+0x84>
 800a24a:	4639      	mov	r1, r7
 800a24c:	4622      	mov	r2, r4
 800a24e:	4630      	mov	r0, r6
 800a250:	f7ff ff1a 	bl	800a088 <__multiply>
 800a254:	4639      	mov	r1, r7
 800a256:	4680      	mov	r8, r0
 800a258:	4630      	mov	r0, r6
 800a25a:	f7ff fe49 	bl	8009ef0 <_Bfree>
 800a25e:	4647      	mov	r7, r8
 800a260:	106d      	asrs	r5, r5, #1
 800a262:	d00b      	beq.n	800a27c <__pow5mult+0xa0>
 800a264:	6820      	ldr	r0, [r4, #0]
 800a266:	b938      	cbnz	r0, 800a278 <__pow5mult+0x9c>
 800a268:	4622      	mov	r2, r4
 800a26a:	4621      	mov	r1, r4
 800a26c:	4630      	mov	r0, r6
 800a26e:	f7ff ff0b 	bl	800a088 <__multiply>
 800a272:	6020      	str	r0, [r4, #0]
 800a274:	f8c0 9000 	str.w	r9, [r0]
 800a278:	4604      	mov	r4, r0
 800a27a:	e7e4      	b.n	800a246 <__pow5mult+0x6a>
 800a27c:	4638      	mov	r0, r7
 800a27e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a282:	bf00      	nop
 800a284:	0800b618 	.word	0x0800b618
 800a288:	0800b378 	.word	0x0800b378
 800a28c:	0800b4cd 	.word	0x0800b4cd

0800a290 <__lshift>:
 800a290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a294:	460c      	mov	r4, r1
 800a296:	6849      	ldr	r1, [r1, #4]
 800a298:	6923      	ldr	r3, [r4, #16]
 800a29a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a29e:	68a3      	ldr	r3, [r4, #8]
 800a2a0:	4607      	mov	r7, r0
 800a2a2:	4691      	mov	r9, r2
 800a2a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a2a8:	f108 0601 	add.w	r6, r8, #1
 800a2ac:	42b3      	cmp	r3, r6
 800a2ae:	db0b      	blt.n	800a2c8 <__lshift+0x38>
 800a2b0:	4638      	mov	r0, r7
 800a2b2:	f7ff fddd 	bl	8009e70 <_Balloc>
 800a2b6:	4605      	mov	r5, r0
 800a2b8:	b948      	cbnz	r0, 800a2ce <__lshift+0x3e>
 800a2ba:	4602      	mov	r2, r0
 800a2bc:	4b28      	ldr	r3, [pc, #160]	; (800a360 <__lshift+0xd0>)
 800a2be:	4829      	ldr	r0, [pc, #164]	; (800a364 <__lshift+0xd4>)
 800a2c0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a2c4:	f7fe fec0 	bl	8009048 <__assert_func>
 800a2c8:	3101      	adds	r1, #1
 800a2ca:	005b      	lsls	r3, r3, #1
 800a2cc:	e7ee      	b.n	800a2ac <__lshift+0x1c>
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	f100 0114 	add.w	r1, r0, #20
 800a2d4:	f100 0210 	add.w	r2, r0, #16
 800a2d8:	4618      	mov	r0, r3
 800a2da:	4553      	cmp	r3, sl
 800a2dc:	db33      	blt.n	800a346 <__lshift+0xb6>
 800a2de:	6920      	ldr	r0, [r4, #16]
 800a2e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a2e4:	f104 0314 	add.w	r3, r4, #20
 800a2e8:	f019 091f 	ands.w	r9, r9, #31
 800a2ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a2f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a2f4:	d02b      	beq.n	800a34e <__lshift+0xbe>
 800a2f6:	f1c9 0e20 	rsb	lr, r9, #32
 800a2fa:	468a      	mov	sl, r1
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	6818      	ldr	r0, [r3, #0]
 800a300:	fa00 f009 	lsl.w	r0, r0, r9
 800a304:	4310      	orrs	r0, r2
 800a306:	f84a 0b04 	str.w	r0, [sl], #4
 800a30a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a30e:	459c      	cmp	ip, r3
 800a310:	fa22 f20e 	lsr.w	r2, r2, lr
 800a314:	d8f3      	bhi.n	800a2fe <__lshift+0x6e>
 800a316:	ebac 0304 	sub.w	r3, ip, r4
 800a31a:	3b15      	subs	r3, #21
 800a31c:	f023 0303 	bic.w	r3, r3, #3
 800a320:	3304      	adds	r3, #4
 800a322:	f104 0015 	add.w	r0, r4, #21
 800a326:	4584      	cmp	ip, r0
 800a328:	bf38      	it	cc
 800a32a:	2304      	movcc	r3, #4
 800a32c:	50ca      	str	r2, [r1, r3]
 800a32e:	b10a      	cbz	r2, 800a334 <__lshift+0xa4>
 800a330:	f108 0602 	add.w	r6, r8, #2
 800a334:	3e01      	subs	r6, #1
 800a336:	4638      	mov	r0, r7
 800a338:	612e      	str	r6, [r5, #16]
 800a33a:	4621      	mov	r1, r4
 800a33c:	f7ff fdd8 	bl	8009ef0 <_Bfree>
 800a340:	4628      	mov	r0, r5
 800a342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a346:	f842 0f04 	str.w	r0, [r2, #4]!
 800a34a:	3301      	adds	r3, #1
 800a34c:	e7c5      	b.n	800a2da <__lshift+0x4a>
 800a34e:	3904      	subs	r1, #4
 800a350:	f853 2b04 	ldr.w	r2, [r3], #4
 800a354:	f841 2f04 	str.w	r2, [r1, #4]!
 800a358:	459c      	cmp	ip, r3
 800a35a:	d8f9      	bhi.n	800a350 <__lshift+0xc0>
 800a35c:	e7ea      	b.n	800a334 <__lshift+0xa4>
 800a35e:	bf00      	nop
 800a360:	0800b4bc 	.word	0x0800b4bc
 800a364:	0800b4cd 	.word	0x0800b4cd

0800a368 <__mcmp>:
 800a368:	b530      	push	{r4, r5, lr}
 800a36a:	6902      	ldr	r2, [r0, #16]
 800a36c:	690c      	ldr	r4, [r1, #16]
 800a36e:	1b12      	subs	r2, r2, r4
 800a370:	d10e      	bne.n	800a390 <__mcmp+0x28>
 800a372:	f100 0314 	add.w	r3, r0, #20
 800a376:	3114      	adds	r1, #20
 800a378:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a37c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a380:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a384:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a388:	42a5      	cmp	r5, r4
 800a38a:	d003      	beq.n	800a394 <__mcmp+0x2c>
 800a38c:	d305      	bcc.n	800a39a <__mcmp+0x32>
 800a38e:	2201      	movs	r2, #1
 800a390:	4610      	mov	r0, r2
 800a392:	bd30      	pop	{r4, r5, pc}
 800a394:	4283      	cmp	r3, r0
 800a396:	d3f3      	bcc.n	800a380 <__mcmp+0x18>
 800a398:	e7fa      	b.n	800a390 <__mcmp+0x28>
 800a39a:	f04f 32ff 	mov.w	r2, #4294967295
 800a39e:	e7f7      	b.n	800a390 <__mcmp+0x28>

0800a3a0 <__mdiff>:
 800a3a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3a4:	460c      	mov	r4, r1
 800a3a6:	4606      	mov	r6, r0
 800a3a8:	4611      	mov	r1, r2
 800a3aa:	4620      	mov	r0, r4
 800a3ac:	4690      	mov	r8, r2
 800a3ae:	f7ff ffdb 	bl	800a368 <__mcmp>
 800a3b2:	1e05      	subs	r5, r0, #0
 800a3b4:	d110      	bne.n	800a3d8 <__mdiff+0x38>
 800a3b6:	4629      	mov	r1, r5
 800a3b8:	4630      	mov	r0, r6
 800a3ba:	f7ff fd59 	bl	8009e70 <_Balloc>
 800a3be:	b930      	cbnz	r0, 800a3ce <__mdiff+0x2e>
 800a3c0:	4b3a      	ldr	r3, [pc, #232]	; (800a4ac <__mdiff+0x10c>)
 800a3c2:	4602      	mov	r2, r0
 800a3c4:	f240 2137 	movw	r1, #567	; 0x237
 800a3c8:	4839      	ldr	r0, [pc, #228]	; (800a4b0 <__mdiff+0x110>)
 800a3ca:	f7fe fe3d 	bl	8009048 <__assert_func>
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a3d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3d8:	bfa4      	itt	ge
 800a3da:	4643      	movge	r3, r8
 800a3dc:	46a0      	movge	r8, r4
 800a3de:	4630      	mov	r0, r6
 800a3e0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a3e4:	bfa6      	itte	ge
 800a3e6:	461c      	movge	r4, r3
 800a3e8:	2500      	movge	r5, #0
 800a3ea:	2501      	movlt	r5, #1
 800a3ec:	f7ff fd40 	bl	8009e70 <_Balloc>
 800a3f0:	b920      	cbnz	r0, 800a3fc <__mdiff+0x5c>
 800a3f2:	4b2e      	ldr	r3, [pc, #184]	; (800a4ac <__mdiff+0x10c>)
 800a3f4:	4602      	mov	r2, r0
 800a3f6:	f240 2145 	movw	r1, #581	; 0x245
 800a3fa:	e7e5      	b.n	800a3c8 <__mdiff+0x28>
 800a3fc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a400:	6926      	ldr	r6, [r4, #16]
 800a402:	60c5      	str	r5, [r0, #12]
 800a404:	f104 0914 	add.w	r9, r4, #20
 800a408:	f108 0514 	add.w	r5, r8, #20
 800a40c:	f100 0e14 	add.w	lr, r0, #20
 800a410:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a414:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a418:	f108 0210 	add.w	r2, r8, #16
 800a41c:	46f2      	mov	sl, lr
 800a41e:	2100      	movs	r1, #0
 800a420:	f859 3b04 	ldr.w	r3, [r9], #4
 800a424:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a428:	fa11 f88b 	uxtah	r8, r1, fp
 800a42c:	b299      	uxth	r1, r3
 800a42e:	0c1b      	lsrs	r3, r3, #16
 800a430:	eba8 0801 	sub.w	r8, r8, r1
 800a434:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a438:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a43c:	fa1f f888 	uxth.w	r8, r8
 800a440:	1419      	asrs	r1, r3, #16
 800a442:	454e      	cmp	r6, r9
 800a444:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a448:	f84a 3b04 	str.w	r3, [sl], #4
 800a44c:	d8e8      	bhi.n	800a420 <__mdiff+0x80>
 800a44e:	1b33      	subs	r3, r6, r4
 800a450:	3b15      	subs	r3, #21
 800a452:	f023 0303 	bic.w	r3, r3, #3
 800a456:	3304      	adds	r3, #4
 800a458:	3415      	adds	r4, #21
 800a45a:	42a6      	cmp	r6, r4
 800a45c:	bf38      	it	cc
 800a45e:	2304      	movcc	r3, #4
 800a460:	441d      	add	r5, r3
 800a462:	4473      	add	r3, lr
 800a464:	469e      	mov	lr, r3
 800a466:	462e      	mov	r6, r5
 800a468:	4566      	cmp	r6, ip
 800a46a:	d30e      	bcc.n	800a48a <__mdiff+0xea>
 800a46c:	f10c 0203 	add.w	r2, ip, #3
 800a470:	1b52      	subs	r2, r2, r5
 800a472:	f022 0203 	bic.w	r2, r2, #3
 800a476:	3d03      	subs	r5, #3
 800a478:	45ac      	cmp	ip, r5
 800a47a:	bf38      	it	cc
 800a47c:	2200      	movcc	r2, #0
 800a47e:	4413      	add	r3, r2
 800a480:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a484:	b17a      	cbz	r2, 800a4a6 <__mdiff+0x106>
 800a486:	6107      	str	r7, [r0, #16]
 800a488:	e7a4      	b.n	800a3d4 <__mdiff+0x34>
 800a48a:	f856 8b04 	ldr.w	r8, [r6], #4
 800a48e:	fa11 f288 	uxtah	r2, r1, r8
 800a492:	1414      	asrs	r4, r2, #16
 800a494:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a498:	b292      	uxth	r2, r2
 800a49a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a49e:	f84e 2b04 	str.w	r2, [lr], #4
 800a4a2:	1421      	asrs	r1, r4, #16
 800a4a4:	e7e0      	b.n	800a468 <__mdiff+0xc8>
 800a4a6:	3f01      	subs	r7, #1
 800a4a8:	e7ea      	b.n	800a480 <__mdiff+0xe0>
 800a4aa:	bf00      	nop
 800a4ac:	0800b4bc 	.word	0x0800b4bc
 800a4b0:	0800b4cd 	.word	0x0800b4cd

0800a4b4 <__d2b>:
 800a4b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a4b8:	460f      	mov	r7, r1
 800a4ba:	2101      	movs	r1, #1
 800a4bc:	ec59 8b10 	vmov	r8, r9, d0
 800a4c0:	4616      	mov	r6, r2
 800a4c2:	f7ff fcd5 	bl	8009e70 <_Balloc>
 800a4c6:	4604      	mov	r4, r0
 800a4c8:	b930      	cbnz	r0, 800a4d8 <__d2b+0x24>
 800a4ca:	4602      	mov	r2, r0
 800a4cc:	4b24      	ldr	r3, [pc, #144]	; (800a560 <__d2b+0xac>)
 800a4ce:	4825      	ldr	r0, [pc, #148]	; (800a564 <__d2b+0xb0>)
 800a4d0:	f240 310f 	movw	r1, #783	; 0x30f
 800a4d4:	f7fe fdb8 	bl	8009048 <__assert_func>
 800a4d8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a4dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a4e0:	bb2d      	cbnz	r5, 800a52e <__d2b+0x7a>
 800a4e2:	9301      	str	r3, [sp, #4]
 800a4e4:	f1b8 0300 	subs.w	r3, r8, #0
 800a4e8:	d026      	beq.n	800a538 <__d2b+0x84>
 800a4ea:	4668      	mov	r0, sp
 800a4ec:	9300      	str	r3, [sp, #0]
 800a4ee:	f7ff fd87 	bl	800a000 <__lo0bits>
 800a4f2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a4f6:	b1e8      	cbz	r0, 800a534 <__d2b+0x80>
 800a4f8:	f1c0 0320 	rsb	r3, r0, #32
 800a4fc:	fa02 f303 	lsl.w	r3, r2, r3
 800a500:	430b      	orrs	r3, r1
 800a502:	40c2      	lsrs	r2, r0
 800a504:	6163      	str	r3, [r4, #20]
 800a506:	9201      	str	r2, [sp, #4]
 800a508:	9b01      	ldr	r3, [sp, #4]
 800a50a:	61a3      	str	r3, [r4, #24]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	bf14      	ite	ne
 800a510:	2202      	movne	r2, #2
 800a512:	2201      	moveq	r2, #1
 800a514:	6122      	str	r2, [r4, #16]
 800a516:	b1bd      	cbz	r5, 800a548 <__d2b+0x94>
 800a518:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a51c:	4405      	add	r5, r0
 800a51e:	603d      	str	r5, [r7, #0]
 800a520:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a524:	6030      	str	r0, [r6, #0]
 800a526:	4620      	mov	r0, r4
 800a528:	b003      	add	sp, #12
 800a52a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a52e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a532:	e7d6      	b.n	800a4e2 <__d2b+0x2e>
 800a534:	6161      	str	r1, [r4, #20]
 800a536:	e7e7      	b.n	800a508 <__d2b+0x54>
 800a538:	a801      	add	r0, sp, #4
 800a53a:	f7ff fd61 	bl	800a000 <__lo0bits>
 800a53e:	9b01      	ldr	r3, [sp, #4]
 800a540:	6163      	str	r3, [r4, #20]
 800a542:	3020      	adds	r0, #32
 800a544:	2201      	movs	r2, #1
 800a546:	e7e5      	b.n	800a514 <__d2b+0x60>
 800a548:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a54c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a550:	6038      	str	r0, [r7, #0]
 800a552:	6918      	ldr	r0, [r3, #16]
 800a554:	f7ff fd34 	bl	8009fc0 <__hi0bits>
 800a558:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a55c:	e7e2      	b.n	800a524 <__d2b+0x70>
 800a55e:	bf00      	nop
 800a560:	0800b4bc 	.word	0x0800b4bc
 800a564:	0800b4cd 	.word	0x0800b4cd

0800a568 <__ssputs_r>:
 800a568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a56c:	688e      	ldr	r6, [r1, #8]
 800a56e:	461f      	mov	r7, r3
 800a570:	42be      	cmp	r6, r7
 800a572:	680b      	ldr	r3, [r1, #0]
 800a574:	4682      	mov	sl, r0
 800a576:	460c      	mov	r4, r1
 800a578:	4690      	mov	r8, r2
 800a57a:	d82c      	bhi.n	800a5d6 <__ssputs_r+0x6e>
 800a57c:	898a      	ldrh	r2, [r1, #12]
 800a57e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a582:	d026      	beq.n	800a5d2 <__ssputs_r+0x6a>
 800a584:	6965      	ldr	r5, [r4, #20]
 800a586:	6909      	ldr	r1, [r1, #16]
 800a588:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a58c:	eba3 0901 	sub.w	r9, r3, r1
 800a590:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a594:	1c7b      	adds	r3, r7, #1
 800a596:	444b      	add	r3, r9
 800a598:	106d      	asrs	r5, r5, #1
 800a59a:	429d      	cmp	r5, r3
 800a59c:	bf38      	it	cc
 800a59e:	461d      	movcc	r5, r3
 800a5a0:	0553      	lsls	r3, r2, #21
 800a5a2:	d527      	bpl.n	800a5f4 <__ssputs_r+0x8c>
 800a5a4:	4629      	mov	r1, r5
 800a5a6:	f7ff fbd7 	bl	8009d58 <_malloc_r>
 800a5aa:	4606      	mov	r6, r0
 800a5ac:	b360      	cbz	r0, 800a608 <__ssputs_r+0xa0>
 800a5ae:	6921      	ldr	r1, [r4, #16]
 800a5b0:	464a      	mov	r2, r9
 800a5b2:	f000 fa1b 	bl	800a9ec <memcpy>
 800a5b6:	89a3      	ldrh	r3, [r4, #12]
 800a5b8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a5bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5c0:	81a3      	strh	r3, [r4, #12]
 800a5c2:	6126      	str	r6, [r4, #16]
 800a5c4:	6165      	str	r5, [r4, #20]
 800a5c6:	444e      	add	r6, r9
 800a5c8:	eba5 0509 	sub.w	r5, r5, r9
 800a5cc:	6026      	str	r6, [r4, #0]
 800a5ce:	60a5      	str	r5, [r4, #8]
 800a5d0:	463e      	mov	r6, r7
 800a5d2:	42be      	cmp	r6, r7
 800a5d4:	d900      	bls.n	800a5d8 <__ssputs_r+0x70>
 800a5d6:	463e      	mov	r6, r7
 800a5d8:	6820      	ldr	r0, [r4, #0]
 800a5da:	4632      	mov	r2, r6
 800a5dc:	4641      	mov	r1, r8
 800a5de:	f000 f9db 	bl	800a998 <memmove>
 800a5e2:	68a3      	ldr	r3, [r4, #8]
 800a5e4:	1b9b      	subs	r3, r3, r6
 800a5e6:	60a3      	str	r3, [r4, #8]
 800a5e8:	6823      	ldr	r3, [r4, #0]
 800a5ea:	4433      	add	r3, r6
 800a5ec:	6023      	str	r3, [r4, #0]
 800a5ee:	2000      	movs	r0, #0
 800a5f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5f4:	462a      	mov	r2, r5
 800a5f6:	f000 fa36 	bl	800aa66 <_realloc_r>
 800a5fa:	4606      	mov	r6, r0
 800a5fc:	2800      	cmp	r0, #0
 800a5fe:	d1e0      	bne.n	800a5c2 <__ssputs_r+0x5a>
 800a600:	6921      	ldr	r1, [r4, #16]
 800a602:	4650      	mov	r0, sl
 800a604:	f7ff fb34 	bl	8009c70 <_free_r>
 800a608:	230c      	movs	r3, #12
 800a60a:	f8ca 3000 	str.w	r3, [sl]
 800a60e:	89a3      	ldrh	r3, [r4, #12]
 800a610:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a614:	81a3      	strh	r3, [r4, #12]
 800a616:	f04f 30ff 	mov.w	r0, #4294967295
 800a61a:	e7e9      	b.n	800a5f0 <__ssputs_r+0x88>

0800a61c <_svfiprintf_r>:
 800a61c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a620:	4698      	mov	r8, r3
 800a622:	898b      	ldrh	r3, [r1, #12]
 800a624:	061b      	lsls	r3, r3, #24
 800a626:	b09d      	sub	sp, #116	; 0x74
 800a628:	4607      	mov	r7, r0
 800a62a:	460d      	mov	r5, r1
 800a62c:	4614      	mov	r4, r2
 800a62e:	d50e      	bpl.n	800a64e <_svfiprintf_r+0x32>
 800a630:	690b      	ldr	r3, [r1, #16]
 800a632:	b963      	cbnz	r3, 800a64e <_svfiprintf_r+0x32>
 800a634:	2140      	movs	r1, #64	; 0x40
 800a636:	f7ff fb8f 	bl	8009d58 <_malloc_r>
 800a63a:	6028      	str	r0, [r5, #0]
 800a63c:	6128      	str	r0, [r5, #16]
 800a63e:	b920      	cbnz	r0, 800a64a <_svfiprintf_r+0x2e>
 800a640:	230c      	movs	r3, #12
 800a642:	603b      	str	r3, [r7, #0]
 800a644:	f04f 30ff 	mov.w	r0, #4294967295
 800a648:	e0d0      	b.n	800a7ec <_svfiprintf_r+0x1d0>
 800a64a:	2340      	movs	r3, #64	; 0x40
 800a64c:	616b      	str	r3, [r5, #20]
 800a64e:	2300      	movs	r3, #0
 800a650:	9309      	str	r3, [sp, #36]	; 0x24
 800a652:	2320      	movs	r3, #32
 800a654:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a658:	f8cd 800c 	str.w	r8, [sp, #12]
 800a65c:	2330      	movs	r3, #48	; 0x30
 800a65e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a804 <_svfiprintf_r+0x1e8>
 800a662:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a666:	f04f 0901 	mov.w	r9, #1
 800a66a:	4623      	mov	r3, r4
 800a66c:	469a      	mov	sl, r3
 800a66e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a672:	b10a      	cbz	r2, 800a678 <_svfiprintf_r+0x5c>
 800a674:	2a25      	cmp	r2, #37	; 0x25
 800a676:	d1f9      	bne.n	800a66c <_svfiprintf_r+0x50>
 800a678:	ebba 0b04 	subs.w	fp, sl, r4
 800a67c:	d00b      	beq.n	800a696 <_svfiprintf_r+0x7a>
 800a67e:	465b      	mov	r3, fp
 800a680:	4622      	mov	r2, r4
 800a682:	4629      	mov	r1, r5
 800a684:	4638      	mov	r0, r7
 800a686:	f7ff ff6f 	bl	800a568 <__ssputs_r>
 800a68a:	3001      	adds	r0, #1
 800a68c:	f000 80a9 	beq.w	800a7e2 <_svfiprintf_r+0x1c6>
 800a690:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a692:	445a      	add	r2, fp
 800a694:	9209      	str	r2, [sp, #36]	; 0x24
 800a696:	f89a 3000 	ldrb.w	r3, [sl]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	f000 80a1 	beq.w	800a7e2 <_svfiprintf_r+0x1c6>
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	f04f 32ff 	mov.w	r2, #4294967295
 800a6a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a6aa:	f10a 0a01 	add.w	sl, sl, #1
 800a6ae:	9304      	str	r3, [sp, #16]
 800a6b0:	9307      	str	r3, [sp, #28]
 800a6b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a6b6:	931a      	str	r3, [sp, #104]	; 0x68
 800a6b8:	4654      	mov	r4, sl
 800a6ba:	2205      	movs	r2, #5
 800a6bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6c0:	4850      	ldr	r0, [pc, #320]	; (800a804 <_svfiprintf_r+0x1e8>)
 800a6c2:	f7f5 fdbd 	bl	8000240 <memchr>
 800a6c6:	9a04      	ldr	r2, [sp, #16]
 800a6c8:	b9d8      	cbnz	r0, 800a702 <_svfiprintf_r+0xe6>
 800a6ca:	06d0      	lsls	r0, r2, #27
 800a6cc:	bf44      	itt	mi
 800a6ce:	2320      	movmi	r3, #32
 800a6d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6d4:	0711      	lsls	r1, r2, #28
 800a6d6:	bf44      	itt	mi
 800a6d8:	232b      	movmi	r3, #43	; 0x2b
 800a6da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6de:	f89a 3000 	ldrb.w	r3, [sl]
 800a6e2:	2b2a      	cmp	r3, #42	; 0x2a
 800a6e4:	d015      	beq.n	800a712 <_svfiprintf_r+0xf6>
 800a6e6:	9a07      	ldr	r2, [sp, #28]
 800a6e8:	4654      	mov	r4, sl
 800a6ea:	2000      	movs	r0, #0
 800a6ec:	f04f 0c0a 	mov.w	ip, #10
 800a6f0:	4621      	mov	r1, r4
 800a6f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6f6:	3b30      	subs	r3, #48	; 0x30
 800a6f8:	2b09      	cmp	r3, #9
 800a6fa:	d94d      	bls.n	800a798 <_svfiprintf_r+0x17c>
 800a6fc:	b1b0      	cbz	r0, 800a72c <_svfiprintf_r+0x110>
 800a6fe:	9207      	str	r2, [sp, #28]
 800a700:	e014      	b.n	800a72c <_svfiprintf_r+0x110>
 800a702:	eba0 0308 	sub.w	r3, r0, r8
 800a706:	fa09 f303 	lsl.w	r3, r9, r3
 800a70a:	4313      	orrs	r3, r2
 800a70c:	9304      	str	r3, [sp, #16]
 800a70e:	46a2      	mov	sl, r4
 800a710:	e7d2      	b.n	800a6b8 <_svfiprintf_r+0x9c>
 800a712:	9b03      	ldr	r3, [sp, #12]
 800a714:	1d19      	adds	r1, r3, #4
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	9103      	str	r1, [sp, #12]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	bfbb      	ittet	lt
 800a71e:	425b      	neglt	r3, r3
 800a720:	f042 0202 	orrlt.w	r2, r2, #2
 800a724:	9307      	strge	r3, [sp, #28]
 800a726:	9307      	strlt	r3, [sp, #28]
 800a728:	bfb8      	it	lt
 800a72a:	9204      	strlt	r2, [sp, #16]
 800a72c:	7823      	ldrb	r3, [r4, #0]
 800a72e:	2b2e      	cmp	r3, #46	; 0x2e
 800a730:	d10c      	bne.n	800a74c <_svfiprintf_r+0x130>
 800a732:	7863      	ldrb	r3, [r4, #1]
 800a734:	2b2a      	cmp	r3, #42	; 0x2a
 800a736:	d134      	bne.n	800a7a2 <_svfiprintf_r+0x186>
 800a738:	9b03      	ldr	r3, [sp, #12]
 800a73a:	1d1a      	adds	r2, r3, #4
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	9203      	str	r2, [sp, #12]
 800a740:	2b00      	cmp	r3, #0
 800a742:	bfb8      	it	lt
 800a744:	f04f 33ff 	movlt.w	r3, #4294967295
 800a748:	3402      	adds	r4, #2
 800a74a:	9305      	str	r3, [sp, #20]
 800a74c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a814 <_svfiprintf_r+0x1f8>
 800a750:	7821      	ldrb	r1, [r4, #0]
 800a752:	2203      	movs	r2, #3
 800a754:	4650      	mov	r0, sl
 800a756:	f7f5 fd73 	bl	8000240 <memchr>
 800a75a:	b138      	cbz	r0, 800a76c <_svfiprintf_r+0x150>
 800a75c:	9b04      	ldr	r3, [sp, #16]
 800a75e:	eba0 000a 	sub.w	r0, r0, sl
 800a762:	2240      	movs	r2, #64	; 0x40
 800a764:	4082      	lsls	r2, r0
 800a766:	4313      	orrs	r3, r2
 800a768:	3401      	adds	r4, #1
 800a76a:	9304      	str	r3, [sp, #16]
 800a76c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a770:	4825      	ldr	r0, [pc, #148]	; (800a808 <_svfiprintf_r+0x1ec>)
 800a772:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a776:	2206      	movs	r2, #6
 800a778:	f7f5 fd62 	bl	8000240 <memchr>
 800a77c:	2800      	cmp	r0, #0
 800a77e:	d038      	beq.n	800a7f2 <_svfiprintf_r+0x1d6>
 800a780:	4b22      	ldr	r3, [pc, #136]	; (800a80c <_svfiprintf_r+0x1f0>)
 800a782:	bb1b      	cbnz	r3, 800a7cc <_svfiprintf_r+0x1b0>
 800a784:	9b03      	ldr	r3, [sp, #12]
 800a786:	3307      	adds	r3, #7
 800a788:	f023 0307 	bic.w	r3, r3, #7
 800a78c:	3308      	adds	r3, #8
 800a78e:	9303      	str	r3, [sp, #12]
 800a790:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a792:	4433      	add	r3, r6
 800a794:	9309      	str	r3, [sp, #36]	; 0x24
 800a796:	e768      	b.n	800a66a <_svfiprintf_r+0x4e>
 800a798:	fb0c 3202 	mla	r2, ip, r2, r3
 800a79c:	460c      	mov	r4, r1
 800a79e:	2001      	movs	r0, #1
 800a7a0:	e7a6      	b.n	800a6f0 <_svfiprintf_r+0xd4>
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	3401      	adds	r4, #1
 800a7a6:	9305      	str	r3, [sp, #20]
 800a7a8:	4619      	mov	r1, r3
 800a7aa:	f04f 0c0a 	mov.w	ip, #10
 800a7ae:	4620      	mov	r0, r4
 800a7b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7b4:	3a30      	subs	r2, #48	; 0x30
 800a7b6:	2a09      	cmp	r2, #9
 800a7b8:	d903      	bls.n	800a7c2 <_svfiprintf_r+0x1a6>
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d0c6      	beq.n	800a74c <_svfiprintf_r+0x130>
 800a7be:	9105      	str	r1, [sp, #20]
 800a7c0:	e7c4      	b.n	800a74c <_svfiprintf_r+0x130>
 800a7c2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a7c6:	4604      	mov	r4, r0
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	e7f0      	b.n	800a7ae <_svfiprintf_r+0x192>
 800a7cc:	ab03      	add	r3, sp, #12
 800a7ce:	9300      	str	r3, [sp, #0]
 800a7d0:	462a      	mov	r2, r5
 800a7d2:	4b0f      	ldr	r3, [pc, #60]	; (800a810 <_svfiprintf_r+0x1f4>)
 800a7d4:	a904      	add	r1, sp, #16
 800a7d6:	4638      	mov	r0, r7
 800a7d8:	f7fd fee6 	bl	80085a8 <_printf_float>
 800a7dc:	1c42      	adds	r2, r0, #1
 800a7de:	4606      	mov	r6, r0
 800a7e0:	d1d6      	bne.n	800a790 <_svfiprintf_r+0x174>
 800a7e2:	89ab      	ldrh	r3, [r5, #12]
 800a7e4:	065b      	lsls	r3, r3, #25
 800a7e6:	f53f af2d 	bmi.w	800a644 <_svfiprintf_r+0x28>
 800a7ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7ec:	b01d      	add	sp, #116	; 0x74
 800a7ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7f2:	ab03      	add	r3, sp, #12
 800a7f4:	9300      	str	r3, [sp, #0]
 800a7f6:	462a      	mov	r2, r5
 800a7f8:	4b05      	ldr	r3, [pc, #20]	; (800a810 <_svfiprintf_r+0x1f4>)
 800a7fa:	a904      	add	r1, sp, #16
 800a7fc:	4638      	mov	r0, r7
 800a7fe:	f7fe f95b 	bl	8008ab8 <_printf_i>
 800a802:	e7eb      	b.n	800a7dc <_svfiprintf_r+0x1c0>
 800a804:	0800b624 	.word	0x0800b624
 800a808:	0800b62e 	.word	0x0800b62e
 800a80c:	080085a9 	.word	0x080085a9
 800a810:	0800a569 	.word	0x0800a569
 800a814:	0800b62a 	.word	0x0800b62a

0800a818 <__sflush_r>:
 800a818:	898a      	ldrh	r2, [r1, #12]
 800a81a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a81e:	4605      	mov	r5, r0
 800a820:	0710      	lsls	r0, r2, #28
 800a822:	460c      	mov	r4, r1
 800a824:	d458      	bmi.n	800a8d8 <__sflush_r+0xc0>
 800a826:	684b      	ldr	r3, [r1, #4]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	dc05      	bgt.n	800a838 <__sflush_r+0x20>
 800a82c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a82e:	2b00      	cmp	r3, #0
 800a830:	dc02      	bgt.n	800a838 <__sflush_r+0x20>
 800a832:	2000      	movs	r0, #0
 800a834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a838:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a83a:	2e00      	cmp	r6, #0
 800a83c:	d0f9      	beq.n	800a832 <__sflush_r+0x1a>
 800a83e:	2300      	movs	r3, #0
 800a840:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a844:	682f      	ldr	r7, [r5, #0]
 800a846:	6a21      	ldr	r1, [r4, #32]
 800a848:	602b      	str	r3, [r5, #0]
 800a84a:	d032      	beq.n	800a8b2 <__sflush_r+0x9a>
 800a84c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a84e:	89a3      	ldrh	r3, [r4, #12]
 800a850:	075a      	lsls	r2, r3, #29
 800a852:	d505      	bpl.n	800a860 <__sflush_r+0x48>
 800a854:	6863      	ldr	r3, [r4, #4]
 800a856:	1ac0      	subs	r0, r0, r3
 800a858:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a85a:	b10b      	cbz	r3, 800a860 <__sflush_r+0x48>
 800a85c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a85e:	1ac0      	subs	r0, r0, r3
 800a860:	2300      	movs	r3, #0
 800a862:	4602      	mov	r2, r0
 800a864:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a866:	6a21      	ldr	r1, [r4, #32]
 800a868:	4628      	mov	r0, r5
 800a86a:	47b0      	blx	r6
 800a86c:	1c43      	adds	r3, r0, #1
 800a86e:	89a3      	ldrh	r3, [r4, #12]
 800a870:	d106      	bne.n	800a880 <__sflush_r+0x68>
 800a872:	6829      	ldr	r1, [r5, #0]
 800a874:	291d      	cmp	r1, #29
 800a876:	d82b      	bhi.n	800a8d0 <__sflush_r+0xb8>
 800a878:	4a29      	ldr	r2, [pc, #164]	; (800a920 <__sflush_r+0x108>)
 800a87a:	410a      	asrs	r2, r1
 800a87c:	07d6      	lsls	r6, r2, #31
 800a87e:	d427      	bmi.n	800a8d0 <__sflush_r+0xb8>
 800a880:	2200      	movs	r2, #0
 800a882:	6062      	str	r2, [r4, #4]
 800a884:	04d9      	lsls	r1, r3, #19
 800a886:	6922      	ldr	r2, [r4, #16]
 800a888:	6022      	str	r2, [r4, #0]
 800a88a:	d504      	bpl.n	800a896 <__sflush_r+0x7e>
 800a88c:	1c42      	adds	r2, r0, #1
 800a88e:	d101      	bne.n	800a894 <__sflush_r+0x7c>
 800a890:	682b      	ldr	r3, [r5, #0]
 800a892:	b903      	cbnz	r3, 800a896 <__sflush_r+0x7e>
 800a894:	6560      	str	r0, [r4, #84]	; 0x54
 800a896:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a898:	602f      	str	r7, [r5, #0]
 800a89a:	2900      	cmp	r1, #0
 800a89c:	d0c9      	beq.n	800a832 <__sflush_r+0x1a>
 800a89e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a8a2:	4299      	cmp	r1, r3
 800a8a4:	d002      	beq.n	800a8ac <__sflush_r+0x94>
 800a8a6:	4628      	mov	r0, r5
 800a8a8:	f7ff f9e2 	bl	8009c70 <_free_r>
 800a8ac:	2000      	movs	r0, #0
 800a8ae:	6360      	str	r0, [r4, #52]	; 0x34
 800a8b0:	e7c0      	b.n	800a834 <__sflush_r+0x1c>
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	4628      	mov	r0, r5
 800a8b6:	47b0      	blx	r6
 800a8b8:	1c41      	adds	r1, r0, #1
 800a8ba:	d1c8      	bne.n	800a84e <__sflush_r+0x36>
 800a8bc:	682b      	ldr	r3, [r5, #0]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d0c5      	beq.n	800a84e <__sflush_r+0x36>
 800a8c2:	2b1d      	cmp	r3, #29
 800a8c4:	d001      	beq.n	800a8ca <__sflush_r+0xb2>
 800a8c6:	2b16      	cmp	r3, #22
 800a8c8:	d101      	bne.n	800a8ce <__sflush_r+0xb6>
 800a8ca:	602f      	str	r7, [r5, #0]
 800a8cc:	e7b1      	b.n	800a832 <__sflush_r+0x1a>
 800a8ce:	89a3      	ldrh	r3, [r4, #12]
 800a8d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8d4:	81a3      	strh	r3, [r4, #12]
 800a8d6:	e7ad      	b.n	800a834 <__sflush_r+0x1c>
 800a8d8:	690f      	ldr	r7, [r1, #16]
 800a8da:	2f00      	cmp	r7, #0
 800a8dc:	d0a9      	beq.n	800a832 <__sflush_r+0x1a>
 800a8de:	0793      	lsls	r3, r2, #30
 800a8e0:	680e      	ldr	r6, [r1, #0]
 800a8e2:	bf08      	it	eq
 800a8e4:	694b      	ldreq	r3, [r1, #20]
 800a8e6:	600f      	str	r7, [r1, #0]
 800a8e8:	bf18      	it	ne
 800a8ea:	2300      	movne	r3, #0
 800a8ec:	eba6 0807 	sub.w	r8, r6, r7
 800a8f0:	608b      	str	r3, [r1, #8]
 800a8f2:	f1b8 0f00 	cmp.w	r8, #0
 800a8f6:	dd9c      	ble.n	800a832 <__sflush_r+0x1a>
 800a8f8:	6a21      	ldr	r1, [r4, #32]
 800a8fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a8fc:	4643      	mov	r3, r8
 800a8fe:	463a      	mov	r2, r7
 800a900:	4628      	mov	r0, r5
 800a902:	47b0      	blx	r6
 800a904:	2800      	cmp	r0, #0
 800a906:	dc06      	bgt.n	800a916 <__sflush_r+0xfe>
 800a908:	89a3      	ldrh	r3, [r4, #12]
 800a90a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a90e:	81a3      	strh	r3, [r4, #12]
 800a910:	f04f 30ff 	mov.w	r0, #4294967295
 800a914:	e78e      	b.n	800a834 <__sflush_r+0x1c>
 800a916:	4407      	add	r7, r0
 800a918:	eba8 0800 	sub.w	r8, r8, r0
 800a91c:	e7e9      	b.n	800a8f2 <__sflush_r+0xda>
 800a91e:	bf00      	nop
 800a920:	dfbffffe 	.word	0xdfbffffe

0800a924 <_fflush_r>:
 800a924:	b538      	push	{r3, r4, r5, lr}
 800a926:	690b      	ldr	r3, [r1, #16]
 800a928:	4605      	mov	r5, r0
 800a92a:	460c      	mov	r4, r1
 800a92c:	b913      	cbnz	r3, 800a934 <_fflush_r+0x10>
 800a92e:	2500      	movs	r5, #0
 800a930:	4628      	mov	r0, r5
 800a932:	bd38      	pop	{r3, r4, r5, pc}
 800a934:	b118      	cbz	r0, 800a93e <_fflush_r+0x1a>
 800a936:	6a03      	ldr	r3, [r0, #32]
 800a938:	b90b      	cbnz	r3, 800a93e <_fflush_r+0x1a>
 800a93a:	f7fe fa6b 	bl	8008e14 <__sinit>
 800a93e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d0f3      	beq.n	800a92e <_fflush_r+0xa>
 800a946:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a948:	07d0      	lsls	r0, r2, #31
 800a94a:	d404      	bmi.n	800a956 <_fflush_r+0x32>
 800a94c:	0599      	lsls	r1, r3, #22
 800a94e:	d402      	bmi.n	800a956 <_fflush_r+0x32>
 800a950:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a952:	f7fe fb76 	bl	8009042 <__retarget_lock_acquire_recursive>
 800a956:	4628      	mov	r0, r5
 800a958:	4621      	mov	r1, r4
 800a95a:	f7ff ff5d 	bl	800a818 <__sflush_r>
 800a95e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a960:	07da      	lsls	r2, r3, #31
 800a962:	4605      	mov	r5, r0
 800a964:	d4e4      	bmi.n	800a930 <_fflush_r+0xc>
 800a966:	89a3      	ldrh	r3, [r4, #12]
 800a968:	059b      	lsls	r3, r3, #22
 800a96a:	d4e1      	bmi.n	800a930 <_fflush_r+0xc>
 800a96c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a96e:	f7fe fb69 	bl	8009044 <__retarget_lock_release_recursive>
 800a972:	e7dd      	b.n	800a930 <_fflush_r+0xc>

0800a974 <fiprintf>:
 800a974:	b40e      	push	{r1, r2, r3}
 800a976:	b503      	push	{r0, r1, lr}
 800a978:	4601      	mov	r1, r0
 800a97a:	ab03      	add	r3, sp, #12
 800a97c:	4805      	ldr	r0, [pc, #20]	; (800a994 <fiprintf+0x20>)
 800a97e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a982:	6800      	ldr	r0, [r0, #0]
 800a984:	9301      	str	r3, [sp, #4]
 800a986:	f000 f8d3 	bl	800ab30 <_vfiprintf_r>
 800a98a:	b002      	add	sp, #8
 800a98c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a990:	b003      	add	sp, #12
 800a992:	4770      	bx	lr
 800a994:	2000047c 	.word	0x2000047c

0800a998 <memmove>:
 800a998:	4288      	cmp	r0, r1
 800a99a:	b510      	push	{r4, lr}
 800a99c:	eb01 0402 	add.w	r4, r1, r2
 800a9a0:	d902      	bls.n	800a9a8 <memmove+0x10>
 800a9a2:	4284      	cmp	r4, r0
 800a9a4:	4623      	mov	r3, r4
 800a9a6:	d807      	bhi.n	800a9b8 <memmove+0x20>
 800a9a8:	1e43      	subs	r3, r0, #1
 800a9aa:	42a1      	cmp	r1, r4
 800a9ac:	d008      	beq.n	800a9c0 <memmove+0x28>
 800a9ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a9b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a9b6:	e7f8      	b.n	800a9aa <memmove+0x12>
 800a9b8:	4402      	add	r2, r0
 800a9ba:	4601      	mov	r1, r0
 800a9bc:	428a      	cmp	r2, r1
 800a9be:	d100      	bne.n	800a9c2 <memmove+0x2a>
 800a9c0:	bd10      	pop	{r4, pc}
 800a9c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a9c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a9ca:	e7f7      	b.n	800a9bc <memmove+0x24>

0800a9cc <_sbrk_r>:
 800a9cc:	b538      	push	{r3, r4, r5, lr}
 800a9ce:	4d06      	ldr	r5, [pc, #24]	; (800a9e8 <_sbrk_r+0x1c>)
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	4604      	mov	r4, r0
 800a9d4:	4608      	mov	r0, r1
 800a9d6:	602b      	str	r3, [r5, #0]
 800a9d8:	f7f7 fc00 	bl	80021dc <_sbrk>
 800a9dc:	1c43      	adds	r3, r0, #1
 800a9de:	d102      	bne.n	800a9e6 <_sbrk_r+0x1a>
 800a9e0:	682b      	ldr	r3, [r5, #0]
 800a9e2:	b103      	cbz	r3, 800a9e6 <_sbrk_r+0x1a>
 800a9e4:	6023      	str	r3, [r4, #0]
 800a9e6:	bd38      	pop	{r3, r4, r5, pc}
 800a9e8:	20000b18 	.word	0x20000b18

0800a9ec <memcpy>:
 800a9ec:	440a      	add	r2, r1
 800a9ee:	4291      	cmp	r1, r2
 800a9f0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a9f4:	d100      	bne.n	800a9f8 <memcpy+0xc>
 800a9f6:	4770      	bx	lr
 800a9f8:	b510      	push	{r4, lr}
 800a9fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa02:	4291      	cmp	r1, r2
 800aa04:	d1f9      	bne.n	800a9fa <memcpy+0xe>
 800aa06:	bd10      	pop	{r4, pc}

0800aa08 <abort>:
 800aa08:	b508      	push	{r3, lr}
 800aa0a:	2006      	movs	r0, #6
 800aa0c:	f000 fa68 	bl	800aee0 <raise>
 800aa10:	2001      	movs	r0, #1
 800aa12:	f7f7 fb6b 	bl	80020ec <_exit>

0800aa16 <_calloc_r>:
 800aa16:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aa18:	fba1 2402 	umull	r2, r4, r1, r2
 800aa1c:	b94c      	cbnz	r4, 800aa32 <_calloc_r+0x1c>
 800aa1e:	4611      	mov	r1, r2
 800aa20:	9201      	str	r2, [sp, #4]
 800aa22:	f7ff f999 	bl	8009d58 <_malloc_r>
 800aa26:	9a01      	ldr	r2, [sp, #4]
 800aa28:	4605      	mov	r5, r0
 800aa2a:	b930      	cbnz	r0, 800aa3a <_calloc_r+0x24>
 800aa2c:	4628      	mov	r0, r5
 800aa2e:	b003      	add	sp, #12
 800aa30:	bd30      	pop	{r4, r5, pc}
 800aa32:	220c      	movs	r2, #12
 800aa34:	6002      	str	r2, [r0, #0]
 800aa36:	2500      	movs	r5, #0
 800aa38:	e7f8      	b.n	800aa2c <_calloc_r+0x16>
 800aa3a:	4621      	mov	r1, r4
 800aa3c:	f7fe fa83 	bl	8008f46 <memset>
 800aa40:	e7f4      	b.n	800aa2c <_calloc_r+0x16>

0800aa42 <__ascii_mbtowc>:
 800aa42:	b082      	sub	sp, #8
 800aa44:	b901      	cbnz	r1, 800aa48 <__ascii_mbtowc+0x6>
 800aa46:	a901      	add	r1, sp, #4
 800aa48:	b142      	cbz	r2, 800aa5c <__ascii_mbtowc+0x1a>
 800aa4a:	b14b      	cbz	r3, 800aa60 <__ascii_mbtowc+0x1e>
 800aa4c:	7813      	ldrb	r3, [r2, #0]
 800aa4e:	600b      	str	r3, [r1, #0]
 800aa50:	7812      	ldrb	r2, [r2, #0]
 800aa52:	1e10      	subs	r0, r2, #0
 800aa54:	bf18      	it	ne
 800aa56:	2001      	movne	r0, #1
 800aa58:	b002      	add	sp, #8
 800aa5a:	4770      	bx	lr
 800aa5c:	4610      	mov	r0, r2
 800aa5e:	e7fb      	b.n	800aa58 <__ascii_mbtowc+0x16>
 800aa60:	f06f 0001 	mvn.w	r0, #1
 800aa64:	e7f8      	b.n	800aa58 <__ascii_mbtowc+0x16>

0800aa66 <_realloc_r>:
 800aa66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa6a:	4680      	mov	r8, r0
 800aa6c:	4614      	mov	r4, r2
 800aa6e:	460e      	mov	r6, r1
 800aa70:	b921      	cbnz	r1, 800aa7c <_realloc_r+0x16>
 800aa72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa76:	4611      	mov	r1, r2
 800aa78:	f7ff b96e 	b.w	8009d58 <_malloc_r>
 800aa7c:	b92a      	cbnz	r2, 800aa8a <_realloc_r+0x24>
 800aa7e:	f7ff f8f7 	bl	8009c70 <_free_r>
 800aa82:	4625      	mov	r5, r4
 800aa84:	4628      	mov	r0, r5
 800aa86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa8a:	f000 fa45 	bl	800af18 <_malloc_usable_size_r>
 800aa8e:	4284      	cmp	r4, r0
 800aa90:	4607      	mov	r7, r0
 800aa92:	d802      	bhi.n	800aa9a <_realloc_r+0x34>
 800aa94:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aa98:	d812      	bhi.n	800aac0 <_realloc_r+0x5a>
 800aa9a:	4621      	mov	r1, r4
 800aa9c:	4640      	mov	r0, r8
 800aa9e:	f7ff f95b 	bl	8009d58 <_malloc_r>
 800aaa2:	4605      	mov	r5, r0
 800aaa4:	2800      	cmp	r0, #0
 800aaa6:	d0ed      	beq.n	800aa84 <_realloc_r+0x1e>
 800aaa8:	42bc      	cmp	r4, r7
 800aaaa:	4622      	mov	r2, r4
 800aaac:	4631      	mov	r1, r6
 800aaae:	bf28      	it	cs
 800aab0:	463a      	movcs	r2, r7
 800aab2:	f7ff ff9b 	bl	800a9ec <memcpy>
 800aab6:	4631      	mov	r1, r6
 800aab8:	4640      	mov	r0, r8
 800aaba:	f7ff f8d9 	bl	8009c70 <_free_r>
 800aabe:	e7e1      	b.n	800aa84 <_realloc_r+0x1e>
 800aac0:	4635      	mov	r5, r6
 800aac2:	e7df      	b.n	800aa84 <_realloc_r+0x1e>

0800aac4 <__ascii_wctomb>:
 800aac4:	b149      	cbz	r1, 800aada <__ascii_wctomb+0x16>
 800aac6:	2aff      	cmp	r2, #255	; 0xff
 800aac8:	bf85      	ittet	hi
 800aaca:	238a      	movhi	r3, #138	; 0x8a
 800aacc:	6003      	strhi	r3, [r0, #0]
 800aace:	700a      	strbls	r2, [r1, #0]
 800aad0:	f04f 30ff 	movhi.w	r0, #4294967295
 800aad4:	bf98      	it	ls
 800aad6:	2001      	movls	r0, #1
 800aad8:	4770      	bx	lr
 800aada:	4608      	mov	r0, r1
 800aadc:	4770      	bx	lr

0800aade <__sfputc_r>:
 800aade:	6893      	ldr	r3, [r2, #8]
 800aae0:	3b01      	subs	r3, #1
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	b410      	push	{r4}
 800aae6:	6093      	str	r3, [r2, #8]
 800aae8:	da08      	bge.n	800aafc <__sfputc_r+0x1e>
 800aaea:	6994      	ldr	r4, [r2, #24]
 800aaec:	42a3      	cmp	r3, r4
 800aaee:	db01      	blt.n	800aaf4 <__sfputc_r+0x16>
 800aaf0:	290a      	cmp	r1, #10
 800aaf2:	d103      	bne.n	800aafc <__sfputc_r+0x1e>
 800aaf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aaf8:	f000 b934 	b.w	800ad64 <__swbuf_r>
 800aafc:	6813      	ldr	r3, [r2, #0]
 800aafe:	1c58      	adds	r0, r3, #1
 800ab00:	6010      	str	r0, [r2, #0]
 800ab02:	7019      	strb	r1, [r3, #0]
 800ab04:	4608      	mov	r0, r1
 800ab06:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab0a:	4770      	bx	lr

0800ab0c <__sfputs_r>:
 800ab0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab0e:	4606      	mov	r6, r0
 800ab10:	460f      	mov	r7, r1
 800ab12:	4614      	mov	r4, r2
 800ab14:	18d5      	adds	r5, r2, r3
 800ab16:	42ac      	cmp	r4, r5
 800ab18:	d101      	bne.n	800ab1e <__sfputs_r+0x12>
 800ab1a:	2000      	movs	r0, #0
 800ab1c:	e007      	b.n	800ab2e <__sfputs_r+0x22>
 800ab1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab22:	463a      	mov	r2, r7
 800ab24:	4630      	mov	r0, r6
 800ab26:	f7ff ffda 	bl	800aade <__sfputc_r>
 800ab2a:	1c43      	adds	r3, r0, #1
 800ab2c:	d1f3      	bne.n	800ab16 <__sfputs_r+0xa>
 800ab2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ab30 <_vfiprintf_r>:
 800ab30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab34:	460d      	mov	r5, r1
 800ab36:	b09d      	sub	sp, #116	; 0x74
 800ab38:	4614      	mov	r4, r2
 800ab3a:	4698      	mov	r8, r3
 800ab3c:	4606      	mov	r6, r0
 800ab3e:	b118      	cbz	r0, 800ab48 <_vfiprintf_r+0x18>
 800ab40:	6a03      	ldr	r3, [r0, #32]
 800ab42:	b90b      	cbnz	r3, 800ab48 <_vfiprintf_r+0x18>
 800ab44:	f7fe f966 	bl	8008e14 <__sinit>
 800ab48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab4a:	07d9      	lsls	r1, r3, #31
 800ab4c:	d405      	bmi.n	800ab5a <_vfiprintf_r+0x2a>
 800ab4e:	89ab      	ldrh	r3, [r5, #12]
 800ab50:	059a      	lsls	r2, r3, #22
 800ab52:	d402      	bmi.n	800ab5a <_vfiprintf_r+0x2a>
 800ab54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab56:	f7fe fa74 	bl	8009042 <__retarget_lock_acquire_recursive>
 800ab5a:	89ab      	ldrh	r3, [r5, #12]
 800ab5c:	071b      	lsls	r3, r3, #28
 800ab5e:	d501      	bpl.n	800ab64 <_vfiprintf_r+0x34>
 800ab60:	692b      	ldr	r3, [r5, #16]
 800ab62:	b99b      	cbnz	r3, 800ab8c <_vfiprintf_r+0x5c>
 800ab64:	4629      	mov	r1, r5
 800ab66:	4630      	mov	r0, r6
 800ab68:	f000 f93a 	bl	800ade0 <__swsetup_r>
 800ab6c:	b170      	cbz	r0, 800ab8c <_vfiprintf_r+0x5c>
 800ab6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab70:	07dc      	lsls	r4, r3, #31
 800ab72:	d504      	bpl.n	800ab7e <_vfiprintf_r+0x4e>
 800ab74:	f04f 30ff 	mov.w	r0, #4294967295
 800ab78:	b01d      	add	sp, #116	; 0x74
 800ab7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab7e:	89ab      	ldrh	r3, [r5, #12]
 800ab80:	0598      	lsls	r0, r3, #22
 800ab82:	d4f7      	bmi.n	800ab74 <_vfiprintf_r+0x44>
 800ab84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab86:	f7fe fa5d 	bl	8009044 <__retarget_lock_release_recursive>
 800ab8a:	e7f3      	b.n	800ab74 <_vfiprintf_r+0x44>
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	9309      	str	r3, [sp, #36]	; 0x24
 800ab90:	2320      	movs	r3, #32
 800ab92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab96:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab9a:	2330      	movs	r3, #48	; 0x30
 800ab9c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ad50 <_vfiprintf_r+0x220>
 800aba0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aba4:	f04f 0901 	mov.w	r9, #1
 800aba8:	4623      	mov	r3, r4
 800abaa:	469a      	mov	sl, r3
 800abac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800abb0:	b10a      	cbz	r2, 800abb6 <_vfiprintf_r+0x86>
 800abb2:	2a25      	cmp	r2, #37	; 0x25
 800abb4:	d1f9      	bne.n	800abaa <_vfiprintf_r+0x7a>
 800abb6:	ebba 0b04 	subs.w	fp, sl, r4
 800abba:	d00b      	beq.n	800abd4 <_vfiprintf_r+0xa4>
 800abbc:	465b      	mov	r3, fp
 800abbe:	4622      	mov	r2, r4
 800abc0:	4629      	mov	r1, r5
 800abc2:	4630      	mov	r0, r6
 800abc4:	f7ff ffa2 	bl	800ab0c <__sfputs_r>
 800abc8:	3001      	adds	r0, #1
 800abca:	f000 80a9 	beq.w	800ad20 <_vfiprintf_r+0x1f0>
 800abce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abd0:	445a      	add	r2, fp
 800abd2:	9209      	str	r2, [sp, #36]	; 0x24
 800abd4:	f89a 3000 	ldrb.w	r3, [sl]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	f000 80a1 	beq.w	800ad20 <_vfiprintf_r+0x1f0>
 800abde:	2300      	movs	r3, #0
 800abe0:	f04f 32ff 	mov.w	r2, #4294967295
 800abe4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abe8:	f10a 0a01 	add.w	sl, sl, #1
 800abec:	9304      	str	r3, [sp, #16]
 800abee:	9307      	str	r3, [sp, #28]
 800abf0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800abf4:	931a      	str	r3, [sp, #104]	; 0x68
 800abf6:	4654      	mov	r4, sl
 800abf8:	2205      	movs	r2, #5
 800abfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abfe:	4854      	ldr	r0, [pc, #336]	; (800ad50 <_vfiprintf_r+0x220>)
 800ac00:	f7f5 fb1e 	bl	8000240 <memchr>
 800ac04:	9a04      	ldr	r2, [sp, #16]
 800ac06:	b9d8      	cbnz	r0, 800ac40 <_vfiprintf_r+0x110>
 800ac08:	06d1      	lsls	r1, r2, #27
 800ac0a:	bf44      	itt	mi
 800ac0c:	2320      	movmi	r3, #32
 800ac0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac12:	0713      	lsls	r3, r2, #28
 800ac14:	bf44      	itt	mi
 800ac16:	232b      	movmi	r3, #43	; 0x2b
 800ac18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac1c:	f89a 3000 	ldrb.w	r3, [sl]
 800ac20:	2b2a      	cmp	r3, #42	; 0x2a
 800ac22:	d015      	beq.n	800ac50 <_vfiprintf_r+0x120>
 800ac24:	9a07      	ldr	r2, [sp, #28]
 800ac26:	4654      	mov	r4, sl
 800ac28:	2000      	movs	r0, #0
 800ac2a:	f04f 0c0a 	mov.w	ip, #10
 800ac2e:	4621      	mov	r1, r4
 800ac30:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac34:	3b30      	subs	r3, #48	; 0x30
 800ac36:	2b09      	cmp	r3, #9
 800ac38:	d94d      	bls.n	800acd6 <_vfiprintf_r+0x1a6>
 800ac3a:	b1b0      	cbz	r0, 800ac6a <_vfiprintf_r+0x13a>
 800ac3c:	9207      	str	r2, [sp, #28]
 800ac3e:	e014      	b.n	800ac6a <_vfiprintf_r+0x13a>
 800ac40:	eba0 0308 	sub.w	r3, r0, r8
 800ac44:	fa09 f303 	lsl.w	r3, r9, r3
 800ac48:	4313      	orrs	r3, r2
 800ac4a:	9304      	str	r3, [sp, #16]
 800ac4c:	46a2      	mov	sl, r4
 800ac4e:	e7d2      	b.n	800abf6 <_vfiprintf_r+0xc6>
 800ac50:	9b03      	ldr	r3, [sp, #12]
 800ac52:	1d19      	adds	r1, r3, #4
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	9103      	str	r1, [sp, #12]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	bfbb      	ittet	lt
 800ac5c:	425b      	neglt	r3, r3
 800ac5e:	f042 0202 	orrlt.w	r2, r2, #2
 800ac62:	9307      	strge	r3, [sp, #28]
 800ac64:	9307      	strlt	r3, [sp, #28]
 800ac66:	bfb8      	it	lt
 800ac68:	9204      	strlt	r2, [sp, #16]
 800ac6a:	7823      	ldrb	r3, [r4, #0]
 800ac6c:	2b2e      	cmp	r3, #46	; 0x2e
 800ac6e:	d10c      	bne.n	800ac8a <_vfiprintf_r+0x15a>
 800ac70:	7863      	ldrb	r3, [r4, #1]
 800ac72:	2b2a      	cmp	r3, #42	; 0x2a
 800ac74:	d134      	bne.n	800ace0 <_vfiprintf_r+0x1b0>
 800ac76:	9b03      	ldr	r3, [sp, #12]
 800ac78:	1d1a      	adds	r2, r3, #4
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	9203      	str	r2, [sp, #12]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	bfb8      	it	lt
 800ac82:	f04f 33ff 	movlt.w	r3, #4294967295
 800ac86:	3402      	adds	r4, #2
 800ac88:	9305      	str	r3, [sp, #20]
 800ac8a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ad60 <_vfiprintf_r+0x230>
 800ac8e:	7821      	ldrb	r1, [r4, #0]
 800ac90:	2203      	movs	r2, #3
 800ac92:	4650      	mov	r0, sl
 800ac94:	f7f5 fad4 	bl	8000240 <memchr>
 800ac98:	b138      	cbz	r0, 800acaa <_vfiprintf_r+0x17a>
 800ac9a:	9b04      	ldr	r3, [sp, #16]
 800ac9c:	eba0 000a 	sub.w	r0, r0, sl
 800aca0:	2240      	movs	r2, #64	; 0x40
 800aca2:	4082      	lsls	r2, r0
 800aca4:	4313      	orrs	r3, r2
 800aca6:	3401      	adds	r4, #1
 800aca8:	9304      	str	r3, [sp, #16]
 800acaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acae:	4829      	ldr	r0, [pc, #164]	; (800ad54 <_vfiprintf_r+0x224>)
 800acb0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800acb4:	2206      	movs	r2, #6
 800acb6:	f7f5 fac3 	bl	8000240 <memchr>
 800acba:	2800      	cmp	r0, #0
 800acbc:	d03f      	beq.n	800ad3e <_vfiprintf_r+0x20e>
 800acbe:	4b26      	ldr	r3, [pc, #152]	; (800ad58 <_vfiprintf_r+0x228>)
 800acc0:	bb1b      	cbnz	r3, 800ad0a <_vfiprintf_r+0x1da>
 800acc2:	9b03      	ldr	r3, [sp, #12]
 800acc4:	3307      	adds	r3, #7
 800acc6:	f023 0307 	bic.w	r3, r3, #7
 800acca:	3308      	adds	r3, #8
 800accc:	9303      	str	r3, [sp, #12]
 800acce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acd0:	443b      	add	r3, r7
 800acd2:	9309      	str	r3, [sp, #36]	; 0x24
 800acd4:	e768      	b.n	800aba8 <_vfiprintf_r+0x78>
 800acd6:	fb0c 3202 	mla	r2, ip, r2, r3
 800acda:	460c      	mov	r4, r1
 800acdc:	2001      	movs	r0, #1
 800acde:	e7a6      	b.n	800ac2e <_vfiprintf_r+0xfe>
 800ace0:	2300      	movs	r3, #0
 800ace2:	3401      	adds	r4, #1
 800ace4:	9305      	str	r3, [sp, #20]
 800ace6:	4619      	mov	r1, r3
 800ace8:	f04f 0c0a 	mov.w	ip, #10
 800acec:	4620      	mov	r0, r4
 800acee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acf2:	3a30      	subs	r2, #48	; 0x30
 800acf4:	2a09      	cmp	r2, #9
 800acf6:	d903      	bls.n	800ad00 <_vfiprintf_r+0x1d0>
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d0c6      	beq.n	800ac8a <_vfiprintf_r+0x15a>
 800acfc:	9105      	str	r1, [sp, #20]
 800acfe:	e7c4      	b.n	800ac8a <_vfiprintf_r+0x15a>
 800ad00:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad04:	4604      	mov	r4, r0
 800ad06:	2301      	movs	r3, #1
 800ad08:	e7f0      	b.n	800acec <_vfiprintf_r+0x1bc>
 800ad0a:	ab03      	add	r3, sp, #12
 800ad0c:	9300      	str	r3, [sp, #0]
 800ad0e:	462a      	mov	r2, r5
 800ad10:	4b12      	ldr	r3, [pc, #72]	; (800ad5c <_vfiprintf_r+0x22c>)
 800ad12:	a904      	add	r1, sp, #16
 800ad14:	4630      	mov	r0, r6
 800ad16:	f7fd fc47 	bl	80085a8 <_printf_float>
 800ad1a:	4607      	mov	r7, r0
 800ad1c:	1c78      	adds	r0, r7, #1
 800ad1e:	d1d6      	bne.n	800acce <_vfiprintf_r+0x19e>
 800ad20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad22:	07d9      	lsls	r1, r3, #31
 800ad24:	d405      	bmi.n	800ad32 <_vfiprintf_r+0x202>
 800ad26:	89ab      	ldrh	r3, [r5, #12]
 800ad28:	059a      	lsls	r2, r3, #22
 800ad2a:	d402      	bmi.n	800ad32 <_vfiprintf_r+0x202>
 800ad2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad2e:	f7fe f989 	bl	8009044 <__retarget_lock_release_recursive>
 800ad32:	89ab      	ldrh	r3, [r5, #12]
 800ad34:	065b      	lsls	r3, r3, #25
 800ad36:	f53f af1d 	bmi.w	800ab74 <_vfiprintf_r+0x44>
 800ad3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad3c:	e71c      	b.n	800ab78 <_vfiprintf_r+0x48>
 800ad3e:	ab03      	add	r3, sp, #12
 800ad40:	9300      	str	r3, [sp, #0]
 800ad42:	462a      	mov	r2, r5
 800ad44:	4b05      	ldr	r3, [pc, #20]	; (800ad5c <_vfiprintf_r+0x22c>)
 800ad46:	a904      	add	r1, sp, #16
 800ad48:	4630      	mov	r0, r6
 800ad4a:	f7fd feb5 	bl	8008ab8 <_printf_i>
 800ad4e:	e7e4      	b.n	800ad1a <_vfiprintf_r+0x1ea>
 800ad50:	0800b624 	.word	0x0800b624
 800ad54:	0800b62e 	.word	0x0800b62e
 800ad58:	080085a9 	.word	0x080085a9
 800ad5c:	0800ab0d 	.word	0x0800ab0d
 800ad60:	0800b62a 	.word	0x0800b62a

0800ad64 <__swbuf_r>:
 800ad64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad66:	460e      	mov	r6, r1
 800ad68:	4614      	mov	r4, r2
 800ad6a:	4605      	mov	r5, r0
 800ad6c:	b118      	cbz	r0, 800ad76 <__swbuf_r+0x12>
 800ad6e:	6a03      	ldr	r3, [r0, #32]
 800ad70:	b90b      	cbnz	r3, 800ad76 <__swbuf_r+0x12>
 800ad72:	f7fe f84f 	bl	8008e14 <__sinit>
 800ad76:	69a3      	ldr	r3, [r4, #24]
 800ad78:	60a3      	str	r3, [r4, #8]
 800ad7a:	89a3      	ldrh	r3, [r4, #12]
 800ad7c:	071a      	lsls	r2, r3, #28
 800ad7e:	d525      	bpl.n	800adcc <__swbuf_r+0x68>
 800ad80:	6923      	ldr	r3, [r4, #16]
 800ad82:	b31b      	cbz	r3, 800adcc <__swbuf_r+0x68>
 800ad84:	6823      	ldr	r3, [r4, #0]
 800ad86:	6922      	ldr	r2, [r4, #16]
 800ad88:	1a98      	subs	r0, r3, r2
 800ad8a:	6963      	ldr	r3, [r4, #20]
 800ad8c:	b2f6      	uxtb	r6, r6
 800ad8e:	4283      	cmp	r3, r0
 800ad90:	4637      	mov	r7, r6
 800ad92:	dc04      	bgt.n	800ad9e <__swbuf_r+0x3a>
 800ad94:	4621      	mov	r1, r4
 800ad96:	4628      	mov	r0, r5
 800ad98:	f7ff fdc4 	bl	800a924 <_fflush_r>
 800ad9c:	b9e0      	cbnz	r0, 800add8 <__swbuf_r+0x74>
 800ad9e:	68a3      	ldr	r3, [r4, #8]
 800ada0:	3b01      	subs	r3, #1
 800ada2:	60a3      	str	r3, [r4, #8]
 800ada4:	6823      	ldr	r3, [r4, #0]
 800ada6:	1c5a      	adds	r2, r3, #1
 800ada8:	6022      	str	r2, [r4, #0]
 800adaa:	701e      	strb	r6, [r3, #0]
 800adac:	6962      	ldr	r2, [r4, #20]
 800adae:	1c43      	adds	r3, r0, #1
 800adb0:	429a      	cmp	r2, r3
 800adb2:	d004      	beq.n	800adbe <__swbuf_r+0x5a>
 800adb4:	89a3      	ldrh	r3, [r4, #12]
 800adb6:	07db      	lsls	r3, r3, #31
 800adb8:	d506      	bpl.n	800adc8 <__swbuf_r+0x64>
 800adba:	2e0a      	cmp	r6, #10
 800adbc:	d104      	bne.n	800adc8 <__swbuf_r+0x64>
 800adbe:	4621      	mov	r1, r4
 800adc0:	4628      	mov	r0, r5
 800adc2:	f7ff fdaf 	bl	800a924 <_fflush_r>
 800adc6:	b938      	cbnz	r0, 800add8 <__swbuf_r+0x74>
 800adc8:	4638      	mov	r0, r7
 800adca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800adcc:	4621      	mov	r1, r4
 800adce:	4628      	mov	r0, r5
 800add0:	f000 f806 	bl	800ade0 <__swsetup_r>
 800add4:	2800      	cmp	r0, #0
 800add6:	d0d5      	beq.n	800ad84 <__swbuf_r+0x20>
 800add8:	f04f 37ff 	mov.w	r7, #4294967295
 800addc:	e7f4      	b.n	800adc8 <__swbuf_r+0x64>
	...

0800ade0 <__swsetup_r>:
 800ade0:	b538      	push	{r3, r4, r5, lr}
 800ade2:	4b2a      	ldr	r3, [pc, #168]	; (800ae8c <__swsetup_r+0xac>)
 800ade4:	4605      	mov	r5, r0
 800ade6:	6818      	ldr	r0, [r3, #0]
 800ade8:	460c      	mov	r4, r1
 800adea:	b118      	cbz	r0, 800adf4 <__swsetup_r+0x14>
 800adec:	6a03      	ldr	r3, [r0, #32]
 800adee:	b90b      	cbnz	r3, 800adf4 <__swsetup_r+0x14>
 800adf0:	f7fe f810 	bl	8008e14 <__sinit>
 800adf4:	89a3      	ldrh	r3, [r4, #12]
 800adf6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800adfa:	0718      	lsls	r0, r3, #28
 800adfc:	d422      	bmi.n	800ae44 <__swsetup_r+0x64>
 800adfe:	06d9      	lsls	r1, r3, #27
 800ae00:	d407      	bmi.n	800ae12 <__swsetup_r+0x32>
 800ae02:	2309      	movs	r3, #9
 800ae04:	602b      	str	r3, [r5, #0]
 800ae06:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ae0a:	81a3      	strh	r3, [r4, #12]
 800ae0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae10:	e034      	b.n	800ae7c <__swsetup_r+0x9c>
 800ae12:	0758      	lsls	r0, r3, #29
 800ae14:	d512      	bpl.n	800ae3c <__swsetup_r+0x5c>
 800ae16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae18:	b141      	cbz	r1, 800ae2c <__swsetup_r+0x4c>
 800ae1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae1e:	4299      	cmp	r1, r3
 800ae20:	d002      	beq.n	800ae28 <__swsetup_r+0x48>
 800ae22:	4628      	mov	r0, r5
 800ae24:	f7fe ff24 	bl	8009c70 <_free_r>
 800ae28:	2300      	movs	r3, #0
 800ae2a:	6363      	str	r3, [r4, #52]	; 0x34
 800ae2c:	89a3      	ldrh	r3, [r4, #12]
 800ae2e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ae32:	81a3      	strh	r3, [r4, #12]
 800ae34:	2300      	movs	r3, #0
 800ae36:	6063      	str	r3, [r4, #4]
 800ae38:	6923      	ldr	r3, [r4, #16]
 800ae3a:	6023      	str	r3, [r4, #0]
 800ae3c:	89a3      	ldrh	r3, [r4, #12]
 800ae3e:	f043 0308 	orr.w	r3, r3, #8
 800ae42:	81a3      	strh	r3, [r4, #12]
 800ae44:	6923      	ldr	r3, [r4, #16]
 800ae46:	b94b      	cbnz	r3, 800ae5c <__swsetup_r+0x7c>
 800ae48:	89a3      	ldrh	r3, [r4, #12]
 800ae4a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ae4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae52:	d003      	beq.n	800ae5c <__swsetup_r+0x7c>
 800ae54:	4621      	mov	r1, r4
 800ae56:	4628      	mov	r0, r5
 800ae58:	f000 f88c 	bl	800af74 <__smakebuf_r>
 800ae5c:	89a0      	ldrh	r0, [r4, #12]
 800ae5e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ae62:	f010 0301 	ands.w	r3, r0, #1
 800ae66:	d00a      	beq.n	800ae7e <__swsetup_r+0x9e>
 800ae68:	2300      	movs	r3, #0
 800ae6a:	60a3      	str	r3, [r4, #8]
 800ae6c:	6963      	ldr	r3, [r4, #20]
 800ae6e:	425b      	negs	r3, r3
 800ae70:	61a3      	str	r3, [r4, #24]
 800ae72:	6923      	ldr	r3, [r4, #16]
 800ae74:	b943      	cbnz	r3, 800ae88 <__swsetup_r+0xa8>
 800ae76:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ae7a:	d1c4      	bne.n	800ae06 <__swsetup_r+0x26>
 800ae7c:	bd38      	pop	{r3, r4, r5, pc}
 800ae7e:	0781      	lsls	r1, r0, #30
 800ae80:	bf58      	it	pl
 800ae82:	6963      	ldrpl	r3, [r4, #20]
 800ae84:	60a3      	str	r3, [r4, #8]
 800ae86:	e7f4      	b.n	800ae72 <__swsetup_r+0x92>
 800ae88:	2000      	movs	r0, #0
 800ae8a:	e7f7      	b.n	800ae7c <__swsetup_r+0x9c>
 800ae8c:	2000047c 	.word	0x2000047c

0800ae90 <_raise_r>:
 800ae90:	291f      	cmp	r1, #31
 800ae92:	b538      	push	{r3, r4, r5, lr}
 800ae94:	4604      	mov	r4, r0
 800ae96:	460d      	mov	r5, r1
 800ae98:	d904      	bls.n	800aea4 <_raise_r+0x14>
 800ae9a:	2316      	movs	r3, #22
 800ae9c:	6003      	str	r3, [r0, #0]
 800ae9e:	f04f 30ff 	mov.w	r0, #4294967295
 800aea2:	bd38      	pop	{r3, r4, r5, pc}
 800aea4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800aea6:	b112      	cbz	r2, 800aeae <_raise_r+0x1e>
 800aea8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aeac:	b94b      	cbnz	r3, 800aec2 <_raise_r+0x32>
 800aeae:	4620      	mov	r0, r4
 800aeb0:	f000 f830 	bl	800af14 <_getpid_r>
 800aeb4:	462a      	mov	r2, r5
 800aeb6:	4601      	mov	r1, r0
 800aeb8:	4620      	mov	r0, r4
 800aeba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aebe:	f000 b817 	b.w	800aef0 <_kill_r>
 800aec2:	2b01      	cmp	r3, #1
 800aec4:	d00a      	beq.n	800aedc <_raise_r+0x4c>
 800aec6:	1c59      	adds	r1, r3, #1
 800aec8:	d103      	bne.n	800aed2 <_raise_r+0x42>
 800aeca:	2316      	movs	r3, #22
 800aecc:	6003      	str	r3, [r0, #0]
 800aece:	2001      	movs	r0, #1
 800aed0:	e7e7      	b.n	800aea2 <_raise_r+0x12>
 800aed2:	2400      	movs	r4, #0
 800aed4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aed8:	4628      	mov	r0, r5
 800aeda:	4798      	blx	r3
 800aedc:	2000      	movs	r0, #0
 800aede:	e7e0      	b.n	800aea2 <_raise_r+0x12>

0800aee0 <raise>:
 800aee0:	4b02      	ldr	r3, [pc, #8]	; (800aeec <raise+0xc>)
 800aee2:	4601      	mov	r1, r0
 800aee4:	6818      	ldr	r0, [r3, #0]
 800aee6:	f7ff bfd3 	b.w	800ae90 <_raise_r>
 800aeea:	bf00      	nop
 800aeec:	2000047c 	.word	0x2000047c

0800aef0 <_kill_r>:
 800aef0:	b538      	push	{r3, r4, r5, lr}
 800aef2:	4d07      	ldr	r5, [pc, #28]	; (800af10 <_kill_r+0x20>)
 800aef4:	2300      	movs	r3, #0
 800aef6:	4604      	mov	r4, r0
 800aef8:	4608      	mov	r0, r1
 800aefa:	4611      	mov	r1, r2
 800aefc:	602b      	str	r3, [r5, #0]
 800aefe:	f7f7 f8e5 	bl	80020cc <_kill>
 800af02:	1c43      	adds	r3, r0, #1
 800af04:	d102      	bne.n	800af0c <_kill_r+0x1c>
 800af06:	682b      	ldr	r3, [r5, #0]
 800af08:	b103      	cbz	r3, 800af0c <_kill_r+0x1c>
 800af0a:	6023      	str	r3, [r4, #0]
 800af0c:	bd38      	pop	{r3, r4, r5, pc}
 800af0e:	bf00      	nop
 800af10:	20000b18 	.word	0x20000b18

0800af14 <_getpid_r>:
 800af14:	f7f7 b8d2 	b.w	80020bc <_getpid>

0800af18 <_malloc_usable_size_r>:
 800af18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af1c:	1f18      	subs	r0, r3, #4
 800af1e:	2b00      	cmp	r3, #0
 800af20:	bfbc      	itt	lt
 800af22:	580b      	ldrlt	r3, [r1, r0]
 800af24:	18c0      	addlt	r0, r0, r3
 800af26:	4770      	bx	lr

0800af28 <__swhatbuf_r>:
 800af28:	b570      	push	{r4, r5, r6, lr}
 800af2a:	460c      	mov	r4, r1
 800af2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af30:	2900      	cmp	r1, #0
 800af32:	b096      	sub	sp, #88	; 0x58
 800af34:	4615      	mov	r5, r2
 800af36:	461e      	mov	r6, r3
 800af38:	da0d      	bge.n	800af56 <__swhatbuf_r+0x2e>
 800af3a:	89a3      	ldrh	r3, [r4, #12]
 800af3c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800af40:	f04f 0100 	mov.w	r1, #0
 800af44:	bf0c      	ite	eq
 800af46:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800af4a:	2340      	movne	r3, #64	; 0x40
 800af4c:	2000      	movs	r0, #0
 800af4e:	6031      	str	r1, [r6, #0]
 800af50:	602b      	str	r3, [r5, #0]
 800af52:	b016      	add	sp, #88	; 0x58
 800af54:	bd70      	pop	{r4, r5, r6, pc}
 800af56:	466a      	mov	r2, sp
 800af58:	f000 f848 	bl	800afec <_fstat_r>
 800af5c:	2800      	cmp	r0, #0
 800af5e:	dbec      	blt.n	800af3a <__swhatbuf_r+0x12>
 800af60:	9901      	ldr	r1, [sp, #4]
 800af62:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800af66:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800af6a:	4259      	negs	r1, r3
 800af6c:	4159      	adcs	r1, r3
 800af6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af72:	e7eb      	b.n	800af4c <__swhatbuf_r+0x24>

0800af74 <__smakebuf_r>:
 800af74:	898b      	ldrh	r3, [r1, #12]
 800af76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800af78:	079d      	lsls	r5, r3, #30
 800af7a:	4606      	mov	r6, r0
 800af7c:	460c      	mov	r4, r1
 800af7e:	d507      	bpl.n	800af90 <__smakebuf_r+0x1c>
 800af80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800af84:	6023      	str	r3, [r4, #0]
 800af86:	6123      	str	r3, [r4, #16]
 800af88:	2301      	movs	r3, #1
 800af8a:	6163      	str	r3, [r4, #20]
 800af8c:	b002      	add	sp, #8
 800af8e:	bd70      	pop	{r4, r5, r6, pc}
 800af90:	ab01      	add	r3, sp, #4
 800af92:	466a      	mov	r2, sp
 800af94:	f7ff ffc8 	bl	800af28 <__swhatbuf_r>
 800af98:	9900      	ldr	r1, [sp, #0]
 800af9a:	4605      	mov	r5, r0
 800af9c:	4630      	mov	r0, r6
 800af9e:	f7fe fedb 	bl	8009d58 <_malloc_r>
 800afa2:	b948      	cbnz	r0, 800afb8 <__smakebuf_r+0x44>
 800afa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afa8:	059a      	lsls	r2, r3, #22
 800afaa:	d4ef      	bmi.n	800af8c <__smakebuf_r+0x18>
 800afac:	f023 0303 	bic.w	r3, r3, #3
 800afb0:	f043 0302 	orr.w	r3, r3, #2
 800afb4:	81a3      	strh	r3, [r4, #12]
 800afb6:	e7e3      	b.n	800af80 <__smakebuf_r+0xc>
 800afb8:	89a3      	ldrh	r3, [r4, #12]
 800afba:	6020      	str	r0, [r4, #0]
 800afbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afc0:	81a3      	strh	r3, [r4, #12]
 800afc2:	9b00      	ldr	r3, [sp, #0]
 800afc4:	6163      	str	r3, [r4, #20]
 800afc6:	9b01      	ldr	r3, [sp, #4]
 800afc8:	6120      	str	r0, [r4, #16]
 800afca:	b15b      	cbz	r3, 800afe4 <__smakebuf_r+0x70>
 800afcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800afd0:	4630      	mov	r0, r6
 800afd2:	f000 f81d 	bl	800b010 <_isatty_r>
 800afd6:	b128      	cbz	r0, 800afe4 <__smakebuf_r+0x70>
 800afd8:	89a3      	ldrh	r3, [r4, #12]
 800afda:	f023 0303 	bic.w	r3, r3, #3
 800afde:	f043 0301 	orr.w	r3, r3, #1
 800afe2:	81a3      	strh	r3, [r4, #12]
 800afe4:	89a3      	ldrh	r3, [r4, #12]
 800afe6:	431d      	orrs	r5, r3
 800afe8:	81a5      	strh	r5, [r4, #12]
 800afea:	e7cf      	b.n	800af8c <__smakebuf_r+0x18>

0800afec <_fstat_r>:
 800afec:	b538      	push	{r3, r4, r5, lr}
 800afee:	4d07      	ldr	r5, [pc, #28]	; (800b00c <_fstat_r+0x20>)
 800aff0:	2300      	movs	r3, #0
 800aff2:	4604      	mov	r4, r0
 800aff4:	4608      	mov	r0, r1
 800aff6:	4611      	mov	r1, r2
 800aff8:	602b      	str	r3, [r5, #0]
 800affa:	f7f7 f8c6 	bl	800218a <_fstat>
 800affe:	1c43      	adds	r3, r0, #1
 800b000:	d102      	bne.n	800b008 <_fstat_r+0x1c>
 800b002:	682b      	ldr	r3, [r5, #0]
 800b004:	b103      	cbz	r3, 800b008 <_fstat_r+0x1c>
 800b006:	6023      	str	r3, [r4, #0]
 800b008:	bd38      	pop	{r3, r4, r5, pc}
 800b00a:	bf00      	nop
 800b00c:	20000b18 	.word	0x20000b18

0800b010 <_isatty_r>:
 800b010:	b538      	push	{r3, r4, r5, lr}
 800b012:	4d06      	ldr	r5, [pc, #24]	; (800b02c <_isatty_r+0x1c>)
 800b014:	2300      	movs	r3, #0
 800b016:	4604      	mov	r4, r0
 800b018:	4608      	mov	r0, r1
 800b01a:	602b      	str	r3, [r5, #0]
 800b01c:	f7f7 f8c5 	bl	80021aa <_isatty>
 800b020:	1c43      	adds	r3, r0, #1
 800b022:	d102      	bne.n	800b02a <_isatty_r+0x1a>
 800b024:	682b      	ldr	r3, [r5, #0]
 800b026:	b103      	cbz	r3, 800b02a <_isatty_r+0x1a>
 800b028:	6023      	str	r3, [r4, #0]
 800b02a:	bd38      	pop	{r3, r4, r5, pc}
 800b02c:	20000b18 	.word	0x20000b18

0800b030 <_init>:
 800b030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b032:	bf00      	nop
 800b034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b036:	bc08      	pop	{r3}
 800b038:	469e      	mov	lr, r3
 800b03a:	4770      	bx	lr

0800b03c <_fini>:
 800b03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b03e:	bf00      	nop
 800b040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b042:	bc08      	pop	{r3}
 800b044:	469e      	mov	lr, r3
 800b046:	4770      	bx	lr
